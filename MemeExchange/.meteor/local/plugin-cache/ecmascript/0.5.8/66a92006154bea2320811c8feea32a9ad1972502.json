{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/random.js","filenameRelative":"/bundle/programs/server/packages/random.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/random.js.map","sourceFileName":"/bundle/programs/server/packages/random.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"random"},"ignored":false,"code":"(function () {\n\n  /* Imports */\n  var Meteor = Package.meteor.Meteor;\n  var global = Package.meteor.global;\n  var meteorEnv = Package.meteor.meteorEnv;\n  var _ = Package.underscore._;\n  var ECMAScript = Package.ecmascript.ECMAScript;\n  var meteorInstall = Package.modules.meteorInstall;\n  var Buffer = Package.modules.Buffer;\n  var process = Package.modules.process;\n  var _Symbol = Package['ecmascript-runtime'].Symbol;\n  var Map = Package['ecmascript-runtime'].Map;\n  var Set = Package['ecmascript-runtime'].Set;\n  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\n  var Promise = Package.promise.Promise;\n\n  /* Package-scope variables */\n  var Random;\n\n  var require = meteorInstall({ \"node_modules\": { \"meteor\": { \"random\": { \"random.js\": function randomJs(require) {\n\n            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //                                                                                                                     //\n            // packages/random/random.js                                                                                           //\n            //                                                                                                                     //\n            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //\n            // We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,                                       //\n            // window.crypto.getRandomValues() in the browser) when available. If these                                            //\n            // PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically                                           //\n            // strong, and we seed it with various sources such as the date, Math.random,                                          //\n            // and window size on the client.  When using crypto.getRandomValues(), our                                            //\n            // primitive is hexString(), from which we construct fraction(). When using                                            //\n            // window.crypto.getRandomValues() or alea, the primitive is fraction and we use                                       //\n            // that to construct hex string.                                                                                       //\n            //\n            if (Meteor.isServer) var nodeCrypto = Npm.require('crypto'); // 10\n            //\n            // see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript                                                  //\n            // for a full discussion and Alea implementation.                                                                      //\n            var Alea = function Alea() {\n              // 15\n              function Mash() {\n                // 16\n                var n = 0xefc8249d; // 17\n                //\n                var mash = function mash(data) {\n                  // 19\n                  data = data.toString(); // 20\n                  for (var i = 0; i < data.length; i++) {\n                    // 21\n                    n += data.charCodeAt(i); // 22\n                    var h = 0.02519603282416938 * n; // 23\n                    n = h >>> 0; // 24\n                    h -= n; // 25\n                    h *= n; // 26\n                    n = h >>> 0; // 27\n                    h -= n; // 28\n                    n += h * 0x100000000; // 2^32                                                                                  // 29\n                  } // 30\n                  return (n >>> 0) * 2.3283064365386963e-10; // 2^-32                                                              // 31\n                }; // 32\n                //\n                mash.version = 'Mash 0.9'; // 34\n                return mash; // 35\n              } // 36\n              //\n              return function (args) {\n                // 38\n                var s0 = 0; // 39\n                var s1 = 0; // 40\n                var s2 = 0; // 41\n                var c = 1; // 42\n                //\n                if (args.length == 0) {\n                  // 44\n                  args = [+new Date()]; // 45\n                } // 46\n                var mash = Mash(); // 47\n                s0 = mash(' '); // 48\n                s1 = mash(' '); // 49\n                s2 = mash(' '); // 50\n                //\n                for (var i = 0; i < args.length; i++) {\n                  // 52\n                  s0 -= mash(args[i]); // 53\n                  if (s0 < 0) {\n                    // 54\n                    s0 += 1; // 55\n                  } // 56\n                  s1 -= mash(args[i]); // 57\n                  if (s1 < 0) {\n                    // 58\n                    s1 += 1; // 59\n                  } // 60\n                  s2 -= mash(args[i]); // 61\n                  if (s2 < 0) {\n                    // 62\n                    s2 += 1; // 63\n                  } // 64\n                } // 65\n                mash = null; // 66\n                //\n                var random = function random() {\n                  // 68\n                  var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32                                                      // 69\n                  s0 = s1; // 70\n                  s1 = s2; // 71\n                  return s2 = t - (c = t | 0); // 72\n                }; // 73\n                random.uint32 = function () {\n                  // 74\n                  return random() * 0x100000000; // 2^32                                                                           // 75\n                }; // 76\n                random.fract53 = function () {\n                  // 77\n                  return random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53                                   // 78\n                }; // 80\n                random.version = 'Alea 0.9'; // 81\n                random.args = args; // 82\n                return random; // 83\n              }(Array.prototype.slice.call(arguments)); // 85\n            }; // 86\n            //\n            var UNMISTAKABLE_CHARS = \"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\"; // 88\n            var BASE64_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"0123456789-_\"; // 89\n            //\n            // `type` is one of `RandomGenerator.Type` as defined below.                                                           //\n            //                                                                                                                     //\n            // options:                                                                                                            //\n            // - seeds: (required, only for RandomGenerator.Type.ALEA) an array                                                    //\n            //   whose items will be `toString`ed and used as the seed to the Alea                                                 //\n            //   algorithm                                                                                                         //\n            var RandomGenerator = function RandomGenerator(type, options) {\n              // 98\n              var self = this; // 99\n              self.type = type; // 100\n              //\n              if (!RandomGenerator.Type[type]) {\n                // 102\n                throw new Error(\"Unknown random generator type: \" + type); // 103\n              } // 104\n              //\n              if (type === RandomGenerator.Type.ALEA) {\n                // 106\n                if (!options.seeds) {\n                  // 107\n                  throw new Error(\"No seeds were provided for Alea PRNG\"); // 108\n                } // 109\n                self.alea = Alea.apply(null, options.seeds); // 110\n              } // 111\n            }; // 112\n            //\n            // Types of PRNGs supported by the `RandomGenerator` class                                                             //\n            RandomGenerator.Type = { // 115\n              // Use Node's built-in `crypto.getRandomBytes` (cryptographically                                                    //\n              // secure but not seedable, runs only on the server). Reverts to                                                     //\n              // `crypto.getPseudoRandomBytes` in the extremely uncommon case that                                                 //\n              // there isn't enough entropy yet                                                                                    //\n              NODE_CRYPTO: \"NODE_CRYPTO\", // 120\n              //\n              // Use non-IE browser's built-in `window.crypto.getRandomValues`                                                     //\n              // (cryptographically secure but not seedable, runs only in the                                                      //\n              // browser).                                                                                                         //\n              BROWSER_CRYPTO: \"BROWSER_CRYPTO\", // 125\n              //\n              // Use the *fast*, seedaable and not cryptographically secure                                                        //\n              // Alea algorithm                                                                                                    //\n              ALEA: \"ALEA\" // 129\n            }; // 115\n            //\n            /**                                                                                                                    //\n             * @name Random.fraction                                                                                               //\n             * @summary Return a number between 0 and 1, like `Math.random`.                                                       //\n             * @locus Anywhere                                                                                                     //\n             */ //\n            RandomGenerator.prototype.fraction = function () {\n              // 137\n              var self = this; // 138\n              if (self.type === RandomGenerator.Type.ALEA) {\n                // 139\n                return self.alea(); // 140\n              } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {\n                  // 141\n                  var numerator = parseInt(self.hexString(8), 16); // 142\n                  return numerator * 2.3283064365386963e-10; // 2^-32                                                                // 143\n                } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {\n                    // 144\n                    var array = new Uint32Array(1); // 145\n                    window.crypto.getRandomValues(array); // 146\n                    return array[0] * 2.3283064365386963e-10; // 2^-32                                                               // 147\n                  } else {\n                      // 148\n                      throw new Error('Unknown random generator type: ' + self.type); // 149\n                    } // 150\n            }; // 151\n            //\n            /**                                                                                                                    //\n             * @name Random.hexString                                                                                              //\n             * @summary Return a random string of `n` hexadecimal digits.                                                          //\n             * @locus Anywhere                                                                                                     //\n             * @param {Number} n Length of the string                                                                              //\n             */ //\n            RandomGenerator.prototype.hexString = function (digits) {\n              // 159\n              var self = this; // 160\n              if (self.type === RandomGenerator.Type.NODE_CRYPTO) {\n                // 161\n                var numBytes = Math.ceil(digits / 2); // 162\n                var bytes; // 163\n                // Try to get cryptographically strong randomness. Fall back to                                                    //\n                // non-cryptographically strong if not available.                                                                  //\n                try {\n                  // 166\n                  bytes = nodeCrypto.randomBytes(numBytes); // 167\n                } catch (e) {\n                  // 168\n                  // XXX should re-throw any error except insufficient entropy                                                     //\n                  bytes = nodeCrypto.pseudoRandomBytes(numBytes); // 170\n                } // 171\n                var result = bytes.toString(\"hex\"); // 172\n                // If the number of digits is odd, we'll have generated an extra 4 bits                                            //\n                // of randomness, so we need to trim the last digit.                                                               //\n                return result.substring(0, digits); // 175\n              } else {\n                  // 176\n                  return this._randomString(digits, \"0123456789abcdef\"); // 177\n                } // 178\n            }; // 179\n            //\n            RandomGenerator.prototype._randomString = function (charsCount, alphabet) {\n              // 181\n              var self = this; // 183\n              var digits = []; // 184\n              for (var i = 0; i < charsCount; i++) {\n                // 185\n                digits[i] = self.choice(alphabet); // 186\n              } // 187\n              return digits.join(\"\"); // 188\n            }; // 189\n            //\n            /**                                                                                                                    //\n             * @name Random.id                                                                                                     //\n             * @summary Return a unique identifier, such as `\"Jjwjg6gouWLXhMGKW\"`, that is                                         //\n             * likely to be unique in the whole world.                                                                             //\n             * @locus Anywhere                                                                                                     //\n             * @param {Number} [n] Optional length of the identifier in characters                                                 //\n             *   (defaults to 17)                                                                                                  //\n             */ //\n            RandomGenerator.prototype.id = function (charsCount) {\n              // 199\n              var self = this; // 200\n              // 17 characters is around 96 bits of entropy, which is the amount of                                                //\n              // state in the Alea PRNG.                                                                                           //\n              if (charsCount === undefined) charsCount = 17; // 203\n              //\n              return self._randomString(charsCount, UNMISTAKABLE_CHARS); // 206\n            }; // 207\n            //\n            /**                                                                                                                    //\n             * @name Random.secret                                                                                                 //\n             * @summary Return a random string of printable characters with 6 bits of                                              //\n             * entropy per character. Use `Random.secret` for security-critical secrets                                            //\n             * that are intended for machine, rather than human, consumption.                                                      //\n             * @locus Anywhere                                                                                                     //\n             * @param {Number} [n] Optional length of the secret string (defaults to 43                                            //\n             *   characters, or 256 bits of entropy)                                                                               //\n             */ //\n            RandomGenerator.prototype.secret = function (charsCount) {\n              // 218\n              var self = this; // 219\n              // Default to 256 bits of entropy, or 43 characters at 6 bits per                                                    //\n              // character.                                                                                                        //\n              if (charsCount === undefined) charsCount = 43; // 222\n              return self._randomString(charsCount, BASE64_CHARS); // 224\n            }; // 225\n            //\n            /**                                                                                                                    //\n             * @name Random.choice                                                                                                 //\n             * @summary Return a random element of the given array or string.                                                      //\n             * @locus Anywhere                                                                                                     //\n             * @param {Array|String} arrayOrString Array or string to choose from                                                  //\n             */ //\n            RandomGenerator.prototype.choice = function (arrayOrString) {\n              // 233\n              var index = Math.floor(this.fraction() * arrayOrString.length); // 234\n              if (typeof arrayOrString === \"string\") return arrayOrString.substr(index, 1);else return arrayOrString[index]; // 235\n            }; // 239\n            //\n            // instantiate RNG.  Heuristically collect entropy from various sources when a                                         //\n            // cryptographic PRNG isn't available.                                                                                 //\n            //\n            // client sources                                                                                                      //\n            var height = typeof window !== 'undefined' && window.innerHeight || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientHeight || typeof document !== 'undefined' && document.body && document.body.clientHeight || 1;\n            //\n            var width = typeof window !== 'undefined' && window.innerWidth || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientWidth || typeof document !== 'undefined' && document.body && document.body.clientWidth || 1;\n            //\n            var agent = typeof navigator !== 'undefined' && navigator.userAgent || \"\"; // 263\n            //\n            function createAleaGeneratorWithGeneratedSeed() {\n              // 265\n              return new RandomGenerator(RandomGenerator.Type.ALEA, { seeds: [new Date(), height, width, agent, Math.random()] });\n            }; // 269\n            //\n            if (Meteor.isServer) {\n              // 271\n              Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO); // 272\n            } else {\n                // 273\n                if (typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues) {\n                  // 274\n                  Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO); // 276\n                } else {\n                    // 277\n                    // On IE 10 and below, there's no browser crypto API                                                               //\n                    // available. Fall back to Alea                                                                                    //\n                    //                                                                                                                 //\n                    // XXX looks like at the moment, we use Alea in IE 11 as well,                                                     //\n                    // which has `window.msCrypto` instead of `window.crypto`.                                                         //\n                    Random = createAleaGeneratorWithGeneratedSeed(); // 283\n                  } // 284\n              } // 285\n            //\n            // Create a non-cryptographically secure PRNG with a given seed (using                                                 //\n            // the Alea algorithm)                                                                                                 //\n            Random.createWithSeeds = function () {\n              // 289\n              for (var _len = arguments.length, seeds = Array(_len), _key = 0; _key < _len; _key++) {\n                // 289\n                seeds[_key] = arguments[_key]; // 289\n              } // 289\n              //\n              if (seeds.length === 0) {\n                // 290\n                throw new Error(\"No seeds were provided\"); // 291\n              } // 292\n              return new RandomGenerator(RandomGenerator.Type.ALEA, { seeds: seeds }); // 293\n            }; // 294\n            //\n            // Used like `Random`, but much faster and not cryptographically                                                       //\n            // secure                                                                                                              //\n            Random.insecure = createAleaGeneratorWithGeneratedSeed(); // 298\n            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n          }, \"deprecated.js\": function deprecatedJs() {\n\n            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //                                                                                                                     //\n            // packages/random/deprecated.js                                                                                       //\n            //                                                                                                                     //\n            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //\n            // Before this package existed, we used to use this Meteor.uuid()                                                      //\n            // implementing the RFC 4122 v4 UUID. It is no longer documented                                                       //\n            // and will go away.                                                                                                   //\n            // XXX COMPAT WITH 0.5.6                                                                                               //\n            Meteor.uuid = function () {\n              // 5\n              var HEX_DIGITS = \"0123456789abcdef\"; // 6\n              var s = []; // 7\n              for (var i = 0; i < 36; i++) {\n                // 8\n                s[i] = Random.choice(HEX_DIGITS); // 9\n              } // 10\n              s[14] = \"4\"; // 11\n              s[19] = HEX_DIGITS.substr(parseInt(s[19], 16) & 0x3 | 0x8, 1); // 12\n              s[8] = s[13] = s[18] = s[23] = \"-\"; // 13\n              //\n              var uuid = s.join(\"\"); // 15\n              return uuid; // 16\n            }; // 17\n            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n          } } } } }, { \"extensions\": [\".js\", \".json\"] });\n  require(\"./node_modules/meteor/random/random.js\");\n  require(\"./node_modules/meteor/random/deprecated.js\");\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  (function (pkg, symbols) {\n    for (var s in symbols) {\n      s in pkg || (pkg[s] = symbols[s]);\n    }\n  })(Package.random = {}, {\n    Random: Random\n  });\n})();\n\n//# sourceMappingURL=random.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/random.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/random.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Random;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"random\":{\"random.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/random/random.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,                                       //\n// window.crypto.getRandomValues() in the browser) when available. If these                                            //\n// PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically                                           //\n// strong, and we seed it with various sources such as the date, Math.random,                                          //\n// and window size on the client.  When using crypto.getRandomValues(), our                                            //\n// primitive is hexString(), from which we construct fraction(). When using                                            //\n// window.crypto.getRandomValues() or alea, the primitive is fraction and we use                                       //\n// that to construct hex string.                                                                                       //\n                                                                                                                       //\nif (Meteor.isServer) var nodeCrypto = Npm.require('crypto');                                                           // 10\n                                                                                                                       //\n// see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript                                                  //\n// for a full discussion and Alea implementation.                                                                      //\nvar Alea = function Alea() {                                                                                           // 15\n  function Mash() {                                                                                                    // 16\n    var n = 0xefc8249d;                                                                                                // 17\n                                                                                                                       //\n    var mash = function mash(data) {                                                                                   // 19\n      data = data.toString();                                                                                          // 20\n      for (var i = 0; i < data.length; i++) {                                                                          // 21\n        n += data.charCodeAt(i);                                                                                       // 22\n        var h = 0.02519603282416938 * n;                                                                               // 23\n        n = h >>> 0;                                                                                                   // 24\n        h -= n;                                                                                                        // 25\n        h *= n;                                                                                                        // 26\n        n = h >>> 0;                                                                                                   // 27\n        h -= n;                                                                                                        // 28\n        n += h * 0x100000000; // 2^32                                                                                  // 29\n      }                                                                                                                // 30\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32                                                              // 31\n    };                                                                                                                 // 32\n                                                                                                                       //\n    mash.version = 'Mash 0.9';                                                                                         // 34\n    return mash;                                                                                                       // 35\n  }                                                                                                                    // 36\n                                                                                                                       //\n  return function (args) {                                                                                             // 38\n    var s0 = 0;                                                                                                        // 39\n    var s1 = 0;                                                                                                        // 40\n    var s2 = 0;                                                                                                        // 41\n    var c = 1;                                                                                                         // 42\n                                                                                                                       //\n    if (args.length == 0) {                                                                                            // 44\n      args = [+new Date()];                                                                                            // 45\n    }                                                                                                                  // 46\n    var mash = Mash();                                                                                                 // 47\n    s0 = mash(' ');                                                                                                    // 48\n    s1 = mash(' ');                                                                                                    // 49\n    s2 = mash(' ');                                                                                                    // 50\n                                                                                                                       //\n    for (var i = 0; i < args.length; i++) {                                                                            // 52\n      s0 -= mash(args[i]);                                                                                             // 53\n      if (s0 < 0) {                                                                                                    // 54\n        s0 += 1;                                                                                                       // 55\n      }                                                                                                                // 56\n      s1 -= mash(args[i]);                                                                                             // 57\n      if (s1 < 0) {                                                                                                    // 58\n        s1 += 1;                                                                                                       // 59\n      }                                                                                                                // 60\n      s2 -= mash(args[i]);                                                                                             // 61\n      if (s2 < 0) {                                                                                                    // 62\n        s2 += 1;                                                                                                       // 63\n      }                                                                                                                // 64\n    }                                                                                                                  // 65\n    mash = null;                                                                                                       // 66\n                                                                                                                       //\n    var random = function random() {                                                                                   // 68\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32                                                      // 69\n      s0 = s1;                                                                                                         // 70\n      s1 = s2;                                                                                                         // 71\n      return s2 = t - (c = t | 0);                                                                                     // 72\n    };                                                                                                                 // 73\n    random.uint32 = function () {                                                                                      // 74\n      return random() * 0x100000000; // 2^32                                                                           // 75\n    };                                                                                                                 // 76\n    random.fract53 = function () {                                                                                     // 77\n      return random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53                                   // 78\n    };                                                                                                                 // 80\n    random.version = 'Alea 0.9';                                                                                       // 81\n    random.args = args;                                                                                                // 82\n    return random;                                                                                                     // 83\n  }(Array.prototype.slice.call(arguments));                                                                            // 85\n};                                                                                                                     // 86\n                                                                                                                       //\nvar UNMISTAKABLE_CHARS = \"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\";                                    // 88\nvar BASE64_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"0123456789-_\";                            // 89\n                                                                                                                       //\n// `type` is one of `RandomGenerator.Type` as defined below.                                                           //\n//                                                                                                                     //\n// options:                                                                                                            //\n// - seeds: (required, only for RandomGenerator.Type.ALEA) an array                                                    //\n//   whose items will be `toString`ed and used as the seed to the Alea                                                 //\n//   algorithm                                                                                                         //\nvar RandomGenerator = function RandomGenerator(type, options) {                                                        // 98\n  var self = this;                                                                                                     // 99\n  self.type = type;                                                                                                    // 100\n                                                                                                                       //\n  if (!RandomGenerator.Type[type]) {                                                                                   // 102\n    throw new Error(\"Unknown random generator type: \" + type);                                                         // 103\n  }                                                                                                                    // 104\n                                                                                                                       //\n  if (type === RandomGenerator.Type.ALEA) {                                                                            // 106\n    if (!options.seeds) {                                                                                              // 107\n      throw new Error(\"No seeds were provided for Alea PRNG\");                                                         // 108\n    }                                                                                                                  // 109\n    self.alea = Alea.apply(null, options.seeds);                                                                       // 110\n  }                                                                                                                    // 111\n};                                                                                                                     // 112\n                                                                                                                       //\n// Types of PRNGs supported by the `RandomGenerator` class                                                             //\nRandomGenerator.Type = {                                                                                               // 115\n  // Use Node's built-in `crypto.getRandomBytes` (cryptographically                                                    //\n  // secure but not seedable, runs only on the server). Reverts to                                                     //\n  // `crypto.getPseudoRandomBytes` in the extremely uncommon case that                                                 //\n  // there isn't enough entropy yet                                                                                    //\n  NODE_CRYPTO: \"NODE_CRYPTO\",                                                                                          // 120\n                                                                                                                       //\n  // Use non-IE browser's built-in `window.crypto.getRandomValues`                                                     //\n  // (cryptographically secure but not seedable, runs only in the                                                      //\n  // browser).                                                                                                         //\n  BROWSER_CRYPTO: \"BROWSER_CRYPTO\",                                                                                    // 125\n                                                                                                                       //\n  // Use the *fast*, seedaable and not cryptographically secure                                                        //\n  // Alea algorithm                                                                                                    //\n  ALEA: \"ALEA\"                                                                                                         // 129\n};                                                                                                                     // 115\n                                                                                                                       //\n/**                                                                                                                    //\n * @name Random.fraction                                                                                               //\n * @summary Return a number between 0 and 1, like `Math.random`.                                                       //\n * @locus Anywhere                                                                                                     //\n */                                                                                                                    //\nRandomGenerator.prototype.fraction = function () {                                                                     // 137\n  var self = this;                                                                                                     // 138\n  if (self.type === RandomGenerator.Type.ALEA) {                                                                       // 139\n    return self.alea();                                                                                                // 140\n  } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {                                                         // 141\n    var numerator = parseInt(self.hexString(8), 16);                                                                   // 142\n    return numerator * 2.3283064365386963e-10; // 2^-32                                                                // 143\n  } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {                                                      // 144\n      var array = new Uint32Array(1);                                                                                  // 145\n      window.crypto.getRandomValues(array);                                                                            // 146\n      return array[0] * 2.3283064365386963e-10; // 2^-32                                                               // 147\n    } else {                                                                                                           // 148\n        throw new Error('Unknown random generator type: ' + self.type);                                                // 149\n      }                                                                                                                // 150\n};                                                                                                                     // 151\n                                                                                                                       //\n/**                                                                                                                    //\n * @name Random.hexString                                                                                              //\n * @summary Return a random string of `n` hexadecimal digits.                                                          //\n * @locus Anywhere                                                                                                     //\n * @param {Number} n Length of the string                                                                              //\n */                                                                                                                    //\nRandomGenerator.prototype.hexString = function (digits) {                                                              // 159\n  var self = this;                                                                                                     // 160\n  if (self.type === RandomGenerator.Type.NODE_CRYPTO) {                                                                // 161\n    var numBytes = Math.ceil(digits / 2);                                                                              // 162\n    var bytes;                                                                                                         // 163\n    // Try to get cryptographically strong randomness. Fall back to                                                    //\n    // non-cryptographically strong if not available.                                                                  //\n    try {                                                                                                              // 166\n      bytes = nodeCrypto.randomBytes(numBytes);                                                                        // 167\n    } catch (e) {                                                                                                      // 168\n      // XXX should re-throw any error except insufficient entropy                                                     //\n      bytes = nodeCrypto.pseudoRandomBytes(numBytes);                                                                  // 170\n    }                                                                                                                  // 171\n    var result = bytes.toString(\"hex\");                                                                                // 172\n    // If the number of digits is odd, we'll have generated an extra 4 bits                                            //\n    // of randomness, so we need to trim the last digit.                                                               //\n    return result.substring(0, digits);                                                                                // 175\n  } else {                                                                                                             // 176\n    return this._randomString(digits, \"0123456789abcdef\");                                                             // 177\n  }                                                                                                                    // 178\n};                                                                                                                     // 179\n                                                                                                                       //\nRandomGenerator.prototype._randomString = function (charsCount, alphabet) {                                            // 181\n  var self = this;                                                                                                     // 183\n  var digits = [];                                                                                                     // 184\n  for (var i = 0; i < charsCount; i++) {                                                                               // 185\n    digits[i] = self.choice(alphabet);                                                                                 // 186\n  }                                                                                                                    // 187\n  return digits.join(\"\");                                                                                              // 188\n};                                                                                                                     // 189\n                                                                                                                       //\n/**                                                                                                                    //\n * @name Random.id                                                                                                     //\n * @summary Return a unique identifier, such as `\"Jjwjg6gouWLXhMGKW\"`, that is                                         //\n * likely to be unique in the whole world.                                                                             //\n * @locus Anywhere                                                                                                     //\n * @param {Number} [n] Optional length of the identifier in characters                                                 //\n *   (defaults to 17)                                                                                                  //\n */                                                                                                                    //\nRandomGenerator.prototype.id = function (charsCount) {                                                                 // 199\n  var self = this;                                                                                                     // 200\n  // 17 characters is around 96 bits of entropy, which is the amount of                                                //\n  // state in the Alea PRNG.                                                                                           //\n  if (charsCount === undefined) charsCount = 17;                                                                       // 203\n                                                                                                                       //\n  return self._randomString(charsCount, UNMISTAKABLE_CHARS);                                                           // 206\n};                                                                                                                     // 207\n                                                                                                                       //\n/**                                                                                                                    //\n * @name Random.secret                                                                                                 //\n * @summary Return a random string of printable characters with 6 bits of                                              //\n * entropy per character. Use `Random.secret` for security-critical secrets                                            //\n * that are intended for machine, rather than human, consumption.                                                      //\n * @locus Anywhere                                                                                                     //\n * @param {Number} [n] Optional length of the secret string (defaults to 43                                            //\n *   characters, or 256 bits of entropy)                                                                               //\n */                                                                                                                    //\nRandomGenerator.prototype.secret = function (charsCount) {                                                             // 218\n  var self = this;                                                                                                     // 219\n  // Default to 256 bits of entropy, or 43 characters at 6 bits per                                                    //\n  // character.                                                                                                        //\n  if (charsCount === undefined) charsCount = 43;                                                                       // 222\n  return self._randomString(charsCount, BASE64_CHARS);                                                                 // 224\n};                                                                                                                     // 225\n                                                                                                                       //\n/**                                                                                                                    //\n * @name Random.choice                                                                                                 //\n * @summary Return a random element of the given array or string.                                                      //\n * @locus Anywhere                                                                                                     //\n * @param {Array|String} arrayOrString Array or string to choose from                                                  //\n */                                                                                                                    //\nRandomGenerator.prototype.choice = function (arrayOrString) {                                                          // 233\n  var index = Math.floor(this.fraction() * arrayOrString.length);                                                      // 234\n  if (typeof arrayOrString === \"string\") return arrayOrString.substr(index, 1);else return arrayOrString[index];       // 235\n};                                                                                                                     // 239\n                                                                                                                       //\n// instantiate RNG.  Heuristically collect entropy from various sources when a                                         //\n// cryptographic PRNG isn't available.                                                                                 //\n                                                                                                                       //\n// client sources                                                                                                      //\nvar height = typeof window !== 'undefined' && window.innerHeight || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientHeight || typeof document !== 'undefined' && document.body && document.body.clientHeight || 1;\n                                                                                                                       //\nvar width = typeof window !== 'undefined' && window.innerWidth || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientWidth || typeof document !== 'undefined' && document.body && document.body.clientWidth || 1;\n                                                                                                                       //\nvar agent = typeof navigator !== 'undefined' && navigator.userAgent || \"\";                                             // 263\n                                                                                                                       //\nfunction createAleaGeneratorWithGeneratedSeed() {                                                                      // 265\n  return new RandomGenerator(RandomGenerator.Type.ALEA, { seeds: [new Date(), height, width, agent, Math.random()] });\n};                                                                                                                     // 269\n                                                                                                                       //\nif (Meteor.isServer) {                                                                                                 // 271\n  Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO);                                                      // 272\n} else {                                                                                                               // 273\n  if (typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues) {                               // 274\n    Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO);                                                 // 276\n  } else {                                                                                                             // 277\n    // On IE 10 and below, there's no browser crypto API                                                               //\n    // available. Fall back to Alea                                                                                    //\n    //                                                                                                                 //\n    // XXX looks like at the moment, we use Alea in IE 11 as well,                                                     //\n    // which has `window.msCrypto` instead of `window.crypto`.                                                         //\n    Random = createAleaGeneratorWithGeneratedSeed();                                                                   // 283\n  }                                                                                                                    // 284\n}                                                                                                                      // 285\n                                                                                                                       //\n// Create a non-cryptographically secure PRNG with a given seed (using                                                 //\n// the Alea algorithm)                                                                                                 //\nRandom.createWithSeeds = function () {                                                                                 // 289\n  for (var _len = arguments.length, seeds = Array(_len), _key = 0; _key < _len; _key++) {                              // 289\n    seeds[_key] = arguments[_key];                                                                                     // 289\n  }                                                                                                                    // 289\n                                                                                                                       //\n  if (seeds.length === 0) {                                                                                            // 290\n    throw new Error(\"No seeds were provided\");                                                                         // 291\n  }                                                                                                                    // 292\n  return new RandomGenerator(RandomGenerator.Type.ALEA, { seeds: seeds });                                             // 293\n};                                                                                                                     // 294\n                                                                                                                       //\n// Used like `Random`, but much faster and not cryptographically                                                       //\n// secure                                                                                                              //\nRandom.insecure = createAleaGeneratorWithGeneratedSeed();                                                              // 298\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"deprecated.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/random/deprecated.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Before this package existed, we used to use this Meteor.uuid()                                                      //\n// implementing the RFC 4122 v4 UUID. It is no longer documented                                                       //\n// and will go away.                                                                                                   //\n// XXX COMPAT WITH 0.5.6                                                                                               //\nMeteor.uuid = function () {                                                                                            // 5\n  var HEX_DIGITS = \"0123456789abcdef\";                                                                                 // 6\n  var s = [];                                                                                                          // 7\n  for (var i = 0; i < 36; i++) {                                                                                       // 8\n    s[i] = Random.choice(HEX_DIGITS);                                                                                  // 9\n  }                                                                                                                    // 10\n  s[14] = \"4\";                                                                                                         // 11\n  s[19] = HEX_DIGITS.substr(parseInt(s[19], 16) & 0x3 | 0x8, 1);                                                       // 12\n  s[8] = s[13] = s[18] = s[23] = \"-\";                                                                                  // 13\n                                                                                                                       //\n  var uuid = s.join(\"\");                                                                                               // 15\n  return uuid;                                                                                                         // 16\n};                                                                                                                     // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/random/random.js\");\nrequire(\"./node_modules/meteor/random/deprecated.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.random = {}, {\n  Random: Random\n});\n\n})();\n\n//# sourceMappingURL=random.js.map\n"]},"hash":"66a92006154bea2320811c8feea32a9ad1972502"}
