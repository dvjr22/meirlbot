{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/webapp.js","filenameRelative":"/bundle/programs/server/packages/webapp.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/webapp.js.map","sourceFileName":"/bundle/programs/server/packages/webapp.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"webapp"},"ignored":false,"code":"(function () {\n\n  /* Imports */\n  var Meteor = Package.meteor.Meteor;\n  var global = Package.meteor.global;\n  var meteorEnv = Package.meteor.meteorEnv;\n  var ECMAScript = Package.ecmascript.ECMAScript;\n  var Log = Package.logging.Log;\n  var _ = Package.underscore._;\n  var RoutePolicy = Package.routepolicy.RoutePolicy;\n  var Boilerplate = Package['boilerplate-generator'].Boilerplate;\n  var WebAppHashing = Package['webapp-hashing'].WebAppHashing;\n  var meteorInstall = Package.modules.meteorInstall;\n  var Buffer = Package.modules.Buffer;\n  var process = Package.modules.process;\n  var _Symbol = Package['ecmascript-runtime'].Symbol;\n  var Map = Package['ecmascript-runtime'].Map;\n  var Set = Package['ecmascript-runtime'].Set;\n  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\n  var Promise = Package.promise.Promise;\n\n  /* Package-scope variables */\n  var WebApp, WebAppInternals, main;\n\n  var require = meteorInstall({ \"node_modules\": { \"meteor\": { \"webapp\": { \"webapp_server.js\": [\"babel-runtime/helpers/typeof\", function (require, exports, module) {\n\n            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //                                                                                                                   //\n            // packages/webapp/webapp_server.js                                                                                  //\n            //                                                                                                                   //\n            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //\n            var _typeof;module['import'](\"babel-runtime/helpers/typeof\", { \"default\": function _default(v) {\n                _typeof = v;\n              } }); //\n            ////////// Requires //////////                                                                                       //\n            //\n            var fs = Npm.require(\"fs\"); // 3\n            var http = Npm.require(\"http\"); // 4\n            var os = Npm.require(\"os\"); // 5\n            var path = Npm.require(\"path\"); // 6\n            var url = Npm.require(\"url\"); // 7\n            var crypto = Npm.require(\"crypto\"); // 8\n            //\n            var connect = Npm.require('connect'); // 10\n            var parseurl = Npm.require('parseurl'); // 11\n            var useragent = Npm.require('useragent'); // 12\n            var send = Npm.require('send'); // 13\n            //\n            var Future = Npm.require('fibers/future'); // 15\n            var Fiber = Npm.require('fibers'); // 16\n            //\n            var SHORT_SOCKET_TIMEOUT = 5 * 1000; // 18\n            var LONG_SOCKET_TIMEOUT = 120 * 1000; // 19\n            //\n            WebApp = {}; // 21\n            WebAppInternals = {}; // 22\n            //\n            WebAppInternals.NpmModules = { // 24\n              connect: { // 25\n                version: Npm.require('connect/package.json').version, // 26\n                module: connect // 27\n              } // 25\n            }; // 24\n            //\n            WebApp.defaultArch = 'web.browser'; // 31\n            //\n            // XXX maps archs to manifests                                                                                       //\n            WebApp.clientPrograms = {}; // 34\n            //\n            // XXX maps archs to program path on filesystem                                                                      //\n            var archPath = {}; // 37\n            //\n            var bundledJsCssUrlRewriteHook = function bundledJsCssUrlRewriteHook(url) {\n              // 39\n              var bundledPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || ''; // 40\n              return bundledPrefix + url; // 42\n            }; // 43\n            //\n            var sha1 = function sha1(contents) {\n              // 45\n              var hash = crypto.createHash('sha1'); // 46\n              hash.update(contents); // 47\n              return hash.digest('hex'); // 48\n            }; // 49\n            //\n            var readUtf8FileSync = function readUtf8FileSync(filename) {\n              // 51\n              return Meteor.wrapAsync(fs.readFile)(filename, 'utf8'); // 52\n            }; // 53\n            //\n            // #BrowserIdentification                                                                                            //\n            //                                                                                                                   //\n            // We have multiple places that want to identify the browser: the                                                    //\n            // unsupported browser page, the appcache package, and, eventually                                                   //\n            // delivering browser polyfills only as needed.                                                                      //\n            //                                                                                                                   //\n            // To avoid detecting the browser in multiple places ad-hoc, we create a                                             //\n            // Meteor \"browser\" object. It uses but does not expose the npm                                                      //\n            // useragent module (we could choose a different mechanism to identify                                               //\n            // the browser in the future if we wanted to).  The browser object                                                   //\n            // contains                                                                                                          //\n            //                                                                                                                   //\n            // * `name`: the name of the browser in camel case                                                                   //\n            // * `major`, `minor`, `patch`: integers describing the browser version                                              //\n            //                                                                                                                   //\n            // Also here is an early version of a Meteor `request` object, intended                                              //\n            // to be a high-level description of the request without exposing                                                    //\n            // details of connect's low-level `req`.  Currently it contains:                                                     //\n            //                                                                                                                   //\n            // * `browser`: browser identification object described above                                                        //\n            // * `url`: parsed url, including parsed query params                                                                //\n            //                                                                                                                   //\n            // As a temporary hack there is a `categorizeRequest` function on WebApp which                                       //\n            // converts a connect `req` to a Meteor `request`. This can go away once smart                                       //\n            // packages such as appcache are being passed a `request` object directly when                                       //\n            // they serve content.                                                                                               //\n            //                                                                                                                   //\n            // This allows `request` to be used uniformly: it is passed to the html                                              //\n            // attributes hook, and the appcache package can use it when deciding                                                //\n            // whether to generate a 404 for the manifest.                                                                       //\n            //                                                                                                                   //\n            // Real routing / server side rendering will probably refactor this                                                  //\n            // heavily.                                                                                                          //\n            //\n            // e.g. \"Mobile Safari\" => \"mobileSafari\"                                                                            //\n            var camelCase = function camelCase(name) {\n              // 91\n              var parts = name.split(' '); // 92\n              parts[0] = parts[0].toLowerCase(); // 93\n              for (var i = 1; i < parts.length; ++i) {\n                // 94\n                parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].substr(1); // 95\n              } // 96\n              return parts.join(''); // 97\n            }; // 98\n            //\n            var identifyBrowser = function identifyBrowser(userAgentString) {\n              // 100\n              var userAgent = useragent.lookup(userAgentString); // 101\n              return { // 102\n                name: camelCase(userAgent.family), // 103\n                major: +userAgent.major, // 104\n                minor: +userAgent.minor, // 105\n                patch: +userAgent.patch // 106\n              }; // 102\n            }; // 108\n            //\n            // XXX Refactor as part of implementing real routing.                                                                //\n            WebAppInternals.identifyBrowser = identifyBrowser; // 111\n            //\n            WebApp.categorizeRequest = function (req) {\n              // 113\n              return _.extend({ // 114\n                browser: identifyBrowser(req.headers['user-agent']), // 115\n                url: url.parse(req.url, true) // 116\n              }, _.pick(req, 'dynamicHead', 'dynamicBody')); // 114\n            }; // 118\n            //\n            // HTML attribute hooks: functions to be called to determine any attributes to                                       //\n            // be added to the '<html>' tag. Each function is passed a 'request' object (see                                     //\n            // #BrowserIdentification) and should return null or object.                                                         //\n            var htmlAttributeHooks = []; // 123\n            var getHtmlAttributes = function getHtmlAttributes(request) {\n              // 124\n              var combinedAttributes = {}; // 125\n              _.each(htmlAttributeHooks || [], function (hook) {\n                // 126\n                var attributes = hook(request); // 127\n                if (attributes === null) return; // 128\n                if ((typeof attributes === \"undefined\" ? \"undefined\" : _typeof(attributes)) !== 'object') throw Error(\"HTML attribute hook must return null or object\");\n                _.extend(combinedAttributes, attributes); // 132\n              }); // 133\n              return combinedAttributes; // 134\n            }; // 135\n            WebApp.addHtmlAttributeHook = function (hook) {\n              // 136\n              htmlAttributeHooks.push(hook); // 137\n            }; // 138\n            //\n            // Serve app HTML for this URL?                                                                                      //\n            var appUrl = function appUrl(url) {\n              // 141\n              if (url === '/favicon.ico' || url === '/robots.txt') return false; // 142\n              //\n              // NOTE: app.manifest is not a web standard like favicon.ico and                                                   //\n              // robots.txt. It is a file name we have chosen to use for HTML5                                                   //\n              // appcache URLs. It is included here to prevent using an appcache                                                 //\n              // then removing it from poisoning an app permanently. Eventually,                                                 //\n              // once we have server side routing, this won't be needed as                                                       //\n              // unknown URLs with return a 404 automatically.                                                                   //\n              if (url === '/app.manifest') return false; // 151\n              //\n              // Avoid serving app HTML for declared routes such as /sockjs/.                                                    //\n              if (RoutePolicy.classify(url)) return false; // 155\n              //\n              // we currently return app HTML on all URLs by default                                                             //\n              return true; // 159\n            }; // 160\n            //\n            // We need to calculate the client hash after all packages have loaded                                               //\n            // to give them a chance to populate __meteor_runtime_config__.                                                      //\n            //                                                                                                                   //\n            // Calculating the hash during startup means that packages can only                                                  //\n            // populate __meteor_runtime_config__ during load, not during startup.                                               //\n            //                                                                                                                   //\n            // Calculating instead it at the beginning of main after all startup                                                 //\n            // hooks had run would allow packages to also populate                                                               //\n            // __meteor_runtime_config__ during startup, but that's too late for                                                 //\n            // autoupdate because it needs to have the client hash at startup to                                                 //\n            // insert the auto update version itself into                                                                        //\n            // __meteor_runtime_config__ to get it to the client.                                                                //\n            //                                                                                                                   //\n            // An alternative would be to give autoupdate a \"post-start,                                                         //\n            // pre-listen\" hook to allow it to insert the auto update version at                                                 //\n            // the right moment.                                                                                                 //\n            //\n            Meteor.startup(function () {\n              // 180\n              var calculateClientHash = WebAppHashing.calculateClientHash; // 181\n              WebApp.clientHash = function (archName) {\n                // 182\n                archName = archName || WebApp.defaultArch; // 183\n                return calculateClientHash(WebApp.clientPrograms[archName].manifest); // 184\n              }; // 185\n              //\n              WebApp.calculateClientHashRefreshable = function (archName) {\n                // 187\n                archName = archName || WebApp.defaultArch; // 188\n                return calculateClientHash(WebApp.clientPrograms[archName].manifest, function (name) {\n                  // 189\n                  return name === \"css\"; // 191\n                }); // 192\n              }; // 193\n              WebApp.calculateClientHashNonRefreshable = function (archName) {\n                // 194\n                archName = archName || WebApp.defaultArch; // 195\n                return calculateClientHash(WebApp.clientPrograms[archName].manifest, function (name) {\n                  // 196\n                  return name !== \"css\"; // 198\n                }); // 199\n              }; // 200\n              WebApp.calculateClientHashCordova = function () {\n                // 201\n                var archName = 'web.cordova'; // 202\n                if (!WebApp.clientPrograms[archName]) return 'none'; // 203\n                //\n                return calculateClientHash(WebApp.clientPrograms[archName].manifest, null, _.pick(__meteor_runtime_config__, 'PUBLIC_SETTINGS'));\n              }; // 209\n            }); // 210\n            //\n            // When we have a request pending, we want the socket timeout to be long, to                                         //\n            // give ourselves a while to serve it, and to allow sockjs long polls to                                             //\n            // complete.  On the other hand, we want to close idle sockets relatively                                            //\n            // quickly, so that we can shut down relatively promptly but cleanly, without                                        //\n            // cutting off anyone's response.                                                                                    //\n            WebApp._timeoutAdjustmentRequestCallback = function (req, res) {\n              // 219\n              // this is really just req.socket.setTimeout(LONG_SOCKET_TIMEOUT);                                                 //\n              req.setTimeout(LONG_SOCKET_TIMEOUT); // 221\n              // Insert our new finish listener to run BEFORE the existing one which removes                                     //\n              // the response from the socket.                                                                                   //\n              var finishListeners = res.listeners('finish'); // 224\n              // XXX Apparently in Node 0.12 this event was called 'prefinish'.                                                  //\n              // https://github.com/joyent/node/commit/7c9b6070                                                                  //\n              // But it has switched back to 'finish' in Node v4:                                                                //\n              // https://github.com/nodejs/node/pull/1411                                                                        //\n              res.removeAllListeners('finish'); // 229\n              res.on('finish', function () {\n                // 230\n                res.setTimeout(SHORT_SOCKET_TIMEOUT); // 231\n              }); // 232\n              _.each(finishListeners, function (l) {\n                // 233\n                res.on('finish', l); // 233\n              }); // 233\n            }; // 234\n            //\n            // Will be updated by main before we listen.                                                                         //\n            // Map from client arch to boilerplate object.                                                                       //\n            // Boilerplate object has:                                                                                           //\n            //   - func: XXX                                                                                                     //\n            //   - baseData: XXX                                                                                                 //\n            var boilerplateByArch = {}; // 242\n            //\n            // Given a request (as returned from `categorizeRequest`), return the                                                //\n            // boilerplate HTML to serve for that request.                                                                       //\n            //                                                                                                                   //\n            // If a previous connect middleware has rendered content for the head or body,                                       //\n            // returns the boilerplate with that content patched in otherwise                                                    //\n            // memoizes on HTML attributes (used by, eg, appcache) and whether inline                                            //\n            // scripts are currently allowed.                                                                                    //\n            // XXX so far this function is always called with arch === 'web.browser'                                             //\n            var memoizedBoilerplate = {}; // 252\n            var getBoilerplate = function getBoilerplate(request, arch) {\n              // 253\n              var useMemoized = !(request.dynamicHead || request.dynamicBody); // 254\n              var htmlAttributes = getHtmlAttributes(request); // 255\n              //\n              if (useMemoized) {\n                // 257\n                // The only thing that changes from request to request (unless extra                                             //\n                // content is added to the head or body) are the HTML attributes                                                 //\n                // (used by, eg, appcache) and whether inline scripts are allowed, so we                                         //\n                // can memoize based on that.                                                                                    //\n                var memHash = JSON.stringify({ // 262\n                  inlineScriptsAllowed: inlineScriptsAllowed, // 263\n                  htmlAttributes: htmlAttributes, // 264\n                  arch: arch // 265\n                }); // 262\n                //\n                if (!memoizedBoilerplate[memHash]) {\n                  // 268\n                  memoizedBoilerplate[memHash] = boilerplateByArch[arch].toHTML({ // 269\n                    htmlAttributes: htmlAttributes // 270\n                  }); // 269\n                } // 272\n                return memoizedBoilerplate[memHash]; // 273\n              } // 274\n              //\n              var boilerplateOptions = _.extend({ // 276\n                htmlAttributes: htmlAttributes // 277\n              }, _.pick(request, 'dynamicHead', 'dynamicBody')); // 276\n              //\n              return boilerplateByArch[arch].toHTML(boilerplateOptions); // 280\n            }; // 281\n            //\n            WebAppInternals.generateBoilerplateInstance = function (arch, manifest, additionalOptions) {\n              // 283\n              additionalOptions = additionalOptions || {}; // 286\n              //\n              var runtimeConfig = _.extend(_.clone(__meteor_runtime_config__), additionalOptions.runtimeConfigOverrides || {}); // 288\n              return new Boilerplate(arch, manifest, _.extend({ // 292\n                pathMapper: function pathMapper(itemPath) {\n                  // 294\n                  return path.join(archPath[arch], itemPath); // 295\n                }, // 295\n                baseDataExtension: { // 296\n                  additionalStaticJs: _.map(additionalStaticJs || [], function (contents, pathname) {\n                    // 297\n                    return { // 300\n                      pathname: pathname, // 301\n                      contents: contents // 302\n                    }; // 300\n                  }), // 304\n                  // Convert to a JSON string, then get rid of most weird characters, then                                       //\n                  // wrap in double quotes. (The outermost JSON.stringify really ought to                                        //\n                  // just be \"wrap in double quotes\" but we use it to be safe.) This might                                       //\n                  // end up inside a <script> tag so we need to be careful to not include                                        //\n                  // \"</script>\", but normal {{spacebars}} escaping escapes too much! See                                        //\n                  // https://github.com/meteor/meteor/issues/3730                                                                //\n                  meteorRuntimeConfig: JSON.stringify(encodeURIComponent(JSON.stringify(runtimeConfig))), // 312\n                  rootUrlPathPrefix: __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '', // 314\n                  bundledJsCssUrlRewriteHook: bundledJsCssUrlRewriteHook, // 315\n                  inlineScriptsAllowed: WebAppInternals.inlineScriptsAllowed(), // 316\n                  inline: additionalOptions.inline // 317\n                } // 296\n              }, additionalOptions)); // 293\n            }; // 321\n            //\n            // A mapping from url path to \"info\". Where \"info\" has the following fields:                                         //\n            // - type: the type of file to be served                                                                             //\n            // - cacheable: optionally, whether the file should be cached or not                                                 //\n            // - sourceMapUrl: optionally, the url of the source map                                                             //\n            //                                                                                                                   //\n            // Info also contains one of the following:                                                                          //\n            // - content: the stringified content that should be served at this path                                             //\n            // - absolutePath: the absolute path on disk to the file                                                             //\n            //\n            var staticFiles; // 332\n            //\n            // Serve static files from the manifest or added with                                                                //\n            // `addStaticJs`. Exported for tests.                                                                                //\n            WebAppInternals.staticFilesMiddleware = function (staticFiles, req, res, next) {\n              // 336\n              if ('GET' != req.method && 'HEAD' != req.method && 'OPTIONS' != req.method) {\n                // 337\n                next(); // 338\n                return; // 339\n              } // 340\n              var pathname = parseurl(req).pathname; // 341\n              try {\n                // 342\n                pathname = decodeURIComponent(pathname); // 343\n              } catch (e) {\n                // 344\n                next(); // 345\n                return; // 346\n              } // 347\n              //\n              var serveStaticJs = function serveStaticJs(s) {\n                // 349\n                res.writeHead(200, { // 350\n                  'Content-type': 'application/javascript; charset=UTF-8' // 351\n                }); // 350\n                res.write(s); // 353\n                res.end(); // 354\n              }; // 355\n              //\n              if (pathname === \"/meteor_runtime_config.js\" && !WebAppInternals.inlineScriptsAllowed()) {\n                // 357\n                serveStaticJs(\"__meteor_runtime_config__ = \" + JSON.stringify(__meteor_runtime_config__) + \";\"); // 359\n                return; // 361\n              } else if (_.has(additionalStaticJs, pathname) && !WebAppInternals.inlineScriptsAllowed()) {\n                  // 362\n                  serveStaticJs(additionalStaticJs[pathname]); // 364\n                  return; // 365\n                } // 366\n              //\n              if (!_.has(staticFiles, pathname)) {\n                // 368\n                next(); // 369\n                return; // 370\n              } // 371\n              //\n              // We don't need to call pause because, unlike 'static', once we call into                                         //\n              // 'send' and yield to the event loop, we never call another handler with                                          //\n              // 'next'.                                                                                                         //\n              //\n              var info = staticFiles[pathname]; // 377\n              //\n              // Cacheable files are files that should never change. Typically                                                   //\n              // named by their hash (eg meteor bundled js and css files).                                                       //\n              // We cache them ~forever (1yr).                                                                                   //\n              var maxAge = info.cacheable ? 1000 * 60 * 60 * 24 * 365 : 0; // 382\n              //\n              // Set the X-SourceMap header, which current Chrome, FireFox, and Safari                                           //\n              // understand.  (The SourceMap header is slightly more spec-correct but FF                                         //\n              // doesn't understand it.)                                                                                         //\n              //                                                                                                                 //\n              // You may also need to enable source maps in Chrome: open dev tools, click                                        //\n              // the gear in the bottom right corner, and select \"enable source maps\".                                           //\n              if (info.sourceMapUrl) {\n                // 392\n                res.setHeader('X-SourceMap', __meteor_runtime_config__.ROOT_URL_PATH_PREFIX + info.sourceMapUrl); // 393\n              } // 396\n              //\n              if (info.type === \"js\") {\n                // 398\n                res.setHeader(\"Content-Type\", \"application/javascript; charset=UTF-8\"); // 399\n              } else if (info.type === \"css\") {\n                  // 400\n                  res.setHeader(\"Content-Type\", \"text/css; charset=UTF-8\"); // 401\n                } else if (info.type === \"json\") {\n                    // 402\n                    res.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\"); // 403\n                  } // 404\n              //\n              if (info.hash) {\n                // 406\n                res.setHeader('ETag', '\"' + info.hash + '\"'); // 407\n              } // 408\n              //\n              if (info.content) {\n                // 410\n                res.write(info.content); // 411\n                res.end(); // 412\n              } else {\n                  // 413\n                  send(req, info.absolutePath, { // 414\n                    maxage: maxAge, // 415\n                    dotfiles: 'allow', // if we specified a dotfile in the manifest, serve it                                      // 416\n                    lastModified: false // don't set last-modified based on the file date                                          // 417\n                  }).on('error', function (err) {\n                    // 414\n                    Log.error(\"Error serving static file \" + err); // 419\n                    res.writeHead(500); // 420\n                    res.end(); // 421\n                  }).on('directory', function () {\n                    // 422\n                    Log.error(\"Unexpected directory \" + info.absolutePath); // 424\n                    res.writeHead(500); // 425\n                    res.end(); // 426\n                  }).pipe(res); // 427\n                } // 429\n            }; // 430\n            //\n            var getUrlPrefixForArch = function getUrlPrefixForArch(arch) {\n              // 432\n              // XXX we rely on the fact that arch names don't contain slashes                                                   //\n              // in that case we would need to uri escape it                                                                     //\n              //\n              // We add '__' to the beginning of non-standard archs to \"scope\" the url                                           //\n              // to Meteor internals.                                                                                            //\n              return arch === WebApp.defaultArch ? '' : '/' + '__' + arch.replace(/^web\\./, ''); // 438\n            }; // 440\n            //\n            // parse port to see if its a Windows Server style named pipe. If so, return as-is (String), otherwise return as Int\n            WebAppInternals.parsePort = function (port) {\n              // 443\n              if (/\\\\\\\\?.+\\\\pipe\\\\?.+/.test(port)) {\n                // 444\n                return port; // 445\n              } // 446\n              //\n              return parseInt(port); // 448\n            }; // 449\n            //\n            var runWebAppServer = function runWebAppServer() {\n              // 451\n              var shuttingDown = false; // 452\n              var syncQueue = new Meteor._SynchronousQueue(); // 453\n              //\n              var getItemPathname = function getItemPathname(itemUrl) {\n                // 455\n                return decodeURIComponent(url.parse(itemUrl).pathname); // 456\n              }; // 457\n              //\n              WebAppInternals.reloadClientPrograms = function () {\n                // 459\n                syncQueue.runTask(function () {\n                  // 460\n                  staticFiles = {}; // 461\n                  var generateClientProgram = function generateClientProgram(clientPath, arch) {\n                    // 462\n                    // read the control for the client we'll be serving up                                                       //\n                    var clientJsonPath = path.join(__meteor_bootstrap__.serverDir, clientPath); // 464\n                    var clientDir = path.dirname(clientJsonPath); // 466\n                    var clientJson = JSON.parse(readUtf8FileSync(clientJsonPath)); // 467\n                    if (clientJson.format !== \"web-program-pre1\") throw new Error(\"Unsupported format for client assets: \" + JSON.stringify(clientJson.format));\n                    //\n                    if (!clientJsonPath || !clientDir || !clientJson) throw new Error(\"Client config file not parsed.\"); // 472\n                    //\n                    var urlPrefix = getUrlPrefixForArch(arch); // 475\n                    //\n                    var manifest = clientJson.manifest; // 477\n                    _.each(manifest, function (item) {\n                      // 478\n                      if (item.url && item.where === \"client\") {\n                        // 479\n                        staticFiles[urlPrefix + getItemPathname(item.url)] = { // 480\n                          absolutePath: path.join(clientDir, item.path), // 481\n                          cacheable: item.cacheable, // 482\n                          hash: item.hash, // 483\n                          // Link from source to its map                                                                         //\n                          sourceMapUrl: item.sourceMapUrl, // 485\n                          type: item.type // 486\n                        }; // 480\n                        //\n                        if (item.sourceMap) {\n                          // 489\n                          // Serve the source map too, under the specified URL. We assume all                                    //\n                          // source maps are cacheable.                                                                          //\n                          staticFiles[urlPrefix + getItemPathname(item.sourceMapUrl)] = { // 492\n                            absolutePath: path.join(clientDir, item.sourceMap), // 493\n                            cacheable: true // 494\n                          }; // 492\n                        } // 496\n                      } // 497\n                    }); // 498\n                    //\n                    var program = { // 500\n                      format: \"web-program-pre1\", // 501\n                      manifest: manifest, // 502\n                      version: WebAppHashing.calculateClientHash(manifest, null, _.pick(__meteor_runtime_config__, 'PUBLIC_SETTINGS')),\n                      cordovaCompatibilityVersions: clientJson.cordovaCompatibilityVersions, // 505\n                      PUBLIC_SETTINGS: __meteor_runtime_config__.PUBLIC_SETTINGS // 506\n                    }; // 500\n                    //\n                    WebApp.clientPrograms[arch] = program; // 509\n                    //\n                    // Serve the program as a string at /foo/<arch>/manifest.json                                                //\n                    // XXX change manifest.json -> program.json                                                                  //\n                    staticFiles[urlPrefix + getItemPathname('/manifest.json')] = { // 513\n                      content: JSON.stringify(program), // 514\n                      cacheable: false, // 515\n                      hash: program.version, // 516\n                      type: \"json\" // 517\n                    }; // 513\n                  }; // 519\n                  //\n                  try {\n                    // 521\n                    var clientPaths = __meteor_bootstrap__.configJson.clientPaths; // 522\n                    _.each(clientPaths, function (clientPath, arch) {\n                      // 523\n                      archPath[arch] = path.dirname(clientPath); // 524\n                      generateClientProgram(clientPath, arch); // 525\n                    }); // 526\n                    //\n                    // Exported for tests.                                                                                       //\n                    WebAppInternals.staticFiles = staticFiles; // 529\n                  } catch (e) {\n                    // 530\n                    Log.error(\"Error reloading the client program: \" + e.stack); // 531\n                    process.exit(1); // 532\n                  } // 533\n                }); // 534\n              }; // 535\n              //\n              WebAppInternals.generateBoilerplate = function () {\n                // 537\n                // This boilerplate will be served to the mobile devices when used with                                          //\n                // Meteor/Cordova for the Hot-Code Push and since the file will be served by                                     //\n                // the device's server, it is important to set the DDP url to the actual                                         //\n                // Meteor server accepting DDP connections and not the device's file server.                                     //\n                var defaultOptionsForArch = { // 542\n                  'web.cordova': { // 543\n                    runtimeConfigOverrides: { // 544\n                      // XXX We use absoluteUrl() here so that we serve https://                                                 //\n                      // URLs to cordova clients if force-ssl is in use. If we were                                              //\n                      // to use __meteor_runtime_config__.ROOT_URL instead of                                                    //\n                      // absoluteUrl(), then Cordova clients would immediately get a                                             //\n                      // HCP setting their DDP_DEFAULT_CONNECTION_URL to                                                         //\n                      // http://example.meteor.com. This breaks the app, because                                                 //\n                      // force-ssl doesn't serve CORS headers on 302                                                             //\n                      // redirects. (Plus it's undesirable to have clients                                                       //\n                      // connecting to http://example.meteor.com when force-ssl is                                               //\n                      // in use.)                                                                                                //\n                      DDP_DEFAULT_CONNECTION_URL: process.env.MOBILE_DDP_URL || Meteor.absoluteUrl(), // 555\n                      ROOT_URL: process.env.MOBILE_ROOT_URL || Meteor.absoluteUrl() // 557\n                    } // 544\n                  } // 543\n                }; // 542\n                //\n                syncQueue.runTask(function () {\n                  // 563\n                  _.each(WebApp.clientPrograms, function (program, archName) {\n                    // 564\n                    boilerplateByArch[archName] = WebAppInternals.generateBoilerplateInstance(archName, program.manifest, defaultOptionsForArch[archName]);\n                  }); // 569\n                  //\n                  // Clear the memoized boilerplate cache.                                                                       //\n                  memoizedBoilerplate = {}; // 572\n                  //\n                  // Configure CSS injection for the default arch                                                                //\n                  // XXX implement the CSS injection for all archs?                                                              //\n                  var cssFiles = boilerplateByArch[WebApp.defaultArch].baseData.css; // 576\n                  // Rewrite all CSS files (which are written directly to <style> tags)                                          //\n                  // by autoupdate_client to use the CDN prefix/etc                                                              //\n                  var allCss = _.map(cssFiles, function (cssFile) {\n                    // 579\n                    return { url: bundledJsCssUrlRewriteHook(cssFile.url) }; // 580\n                  }); // 581\n                  WebAppInternals.refreshableAssets = { allCss: allCss }; // 582\n                }); // 583\n              }; // 584\n              //\n              WebAppInternals.reloadClientPrograms(); // 586\n              //\n              // webserver                                                                                                       //\n              var app = connect(); // 589\n              //\n              // Auto-compress any json, javascript, or text.                                                                    //\n              app.use(connect.compress()); // 592\n              //\n              // Packages and apps can add handlers that run before any other Meteor                                             //\n              // handlers via WebApp.rawConnectHandlers.                                                                         //\n              var rawConnectHandlers = connect(); // 596\n              app.use(rawConnectHandlers); // 597\n              //\n              // We're not a proxy; reject (without crashing) attempts to treat us like                                          //\n              // one. (See #1212.)                                                                                               //\n              app.use(function (req, res, next) {\n                // 601\n                if (RoutePolicy.isValidUrl(req.url)) {\n                  // 602\n                  next(); // 603\n                  return; // 604\n                } // 605\n                res.writeHead(400); // 606\n                res.write(\"Not a proxy\"); // 607\n                res.end(); // 608\n              }); // 609\n              //\n              // Strip off the path prefix, if it exists.                                                                        //\n              app.use(function (request, response, next) {\n                // 612\n                var pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX; // 613\n                var url = Npm.require('url').parse(request.url); // 614\n                var pathname = url.pathname; // 615\n                // check if the path in the url starts with the path prefix (and the part                                        //\n                // after the path prefix must start with a / if it exists.)                                                      //\n                if (pathPrefix && pathname.substring(0, pathPrefix.length) === pathPrefix && (pathname.length == pathPrefix.length || pathname.substring(pathPrefix.length, pathPrefix.length + 1) === \"/\")) {\n                  request.url = request.url.substring(pathPrefix.length); // 621\n                  next(); // 622\n                } else if (pathname === \"/favicon.ico\" || pathname === \"/robots.txt\") {\n                    // 623\n                    next(); // 624\n                  } else if (pathPrefix) {\n                      // 625\n                      response.writeHead(404); // 626\n                      response.write(\"Unknown path\"); // 627\n                      response.end(); // 628\n                    } else {\n                        // 629\n                        next(); // 630\n                      } // 631\n              }); // 632\n              //\n              // Parse the query string into res.query. Used by oauth_server, but it's                                           //\n              // generally pretty handy..                                                                                        //\n              app.use(connect.query()); // 636\n              //\n              // Serve static files from the manifest.                                                                           //\n              // This is inspired by the 'static' middleware.                                                                    //\n              app.use(function (req, res, next) {\n                // 640\n                Fiber(function () {\n                  // 641\n                  WebAppInternals.staticFilesMiddleware(staticFiles, req, res, next); // 642\n                }).run(); // 643\n              }); // 644\n              //\n              // Packages and apps can add handlers to this via WebApp.connectHandlers.                                          //\n              // They are inserted before our default handler.                                                                   //\n              var packageAndAppHandlers = connect(); // 648\n              app.use(packageAndAppHandlers); // 649\n              //\n              var _suppressConnectErrors = false; // 651\n              // connect knows it is an error handler because it has 4 arguments instead of                                      //\n              // 3. go figure.  (It is not smart enough to find such a thing if it's hidden                                      //\n              // inside packageAndAppHandlers.)                                                                                  //\n              app.use(function (err, req, res, next) {\n                // 655\n                if (!err || !_suppressConnectErrors || !req.headers['x-suppress-error']) {\n                  // 656\n                  next(err); // 657\n                  return; // 658\n                } // 659\n                res.writeHead(err.status, { 'Content-Type': 'text/plain' }); // 660\n                res.end(\"An error message\"); // 661\n              }); // 662\n              //\n              app.use(function (req, res, next) {\n                // 664\n                Fiber(function () {\n                  // 665\n                  if (!appUrl(req.url)) return next(); // 666\n                  //\n                  var headers = { // 669\n                    'Content-Type': 'text/html; charset=utf-8' // 670\n                  }; // 669\n                  if (shuttingDown) headers['Connection'] = 'Close'; // 672\n                  //\n                  var request = WebApp.categorizeRequest(req); // 675\n                  //\n                  if (request.url.query && request.url.query['meteor_css_resource']) {\n                    // 677\n                    // In this case, we're requesting a CSS resource in the meteor-specific                                      //\n                    // way, but we don't have it.  Serve a static css file that indicates that                                   //\n                    // we didn't have it, so we can detect that and refresh.  Make sure                                          //\n                    // that any proxies or CDNs don't cache this error!  (Normally proxies                                       //\n                    // or CDNs are smart enough not to cache error pages, but in order to                                        //\n                    // make this hack work, we need to return the CSS file as a 200, which                                       //\n                    // would otherwise be cached.)                                                                               //\n                    headers['Content-Type'] = 'text/css; charset=utf-8'; // 685\n                    headers['Cache-Control'] = 'no-cache'; // 686\n                    res.writeHead(200, headers); // 687\n                    res.write(\".meteor-css-not-found-error { width: 0px;}\"); // 688\n                    res.end(); // 689\n                    return undefined; // 690\n                  } // 691\n                  //\n                  if (request.url.query && request.url.query['meteor_js_resource']) {\n                    // 693\n                    // Similarly, we're requesting a JS resource that we don't have.                                             //\n                    // Serve an uncached 404. (We can't use the same hack we use for CSS,                                        //\n                    // because actually acting on that hack requires us to have the JS                                           //\n                    // already!)                                                                                                 //\n                    headers['Cache-Control'] = 'no-cache'; // 698\n                    res.writeHead(404, headers); // 699\n                    res.end(\"404 Not Found\"); // 700\n                    return undefined; // 701\n                  } // 702\n                  //\n                  if (request.url.query && request.url.query['meteor_dont_serve_index']) {\n                    // 704\n                    // When downloading files during a Cordova hot code push, we need                                            //\n                    // to detect if a file is not available instead of inadvertently                                             //\n                    // downloading the default index page.                                                                       //\n                    // So similar to the situation above, we serve an uncached 404.                                              //\n                    headers['Cache-Control'] = 'no-cache'; // 709\n                    res.writeHead(404, headers); // 710\n                    res.end(\"404 Not Found\"); // 711\n                    return undefined; // 712\n                  } // 713\n                  //\n                  // /packages/asdfsad ... /__cordova/dafsdf.js                                                                  //\n                  var pathname = parseurl(req).pathname; // 716\n                  var archKey = pathname.split('/')[1]; // 717\n                  var archKeyCleaned = 'web.' + archKey.replace(/^__/, ''); // 718\n                  //\n                  if (!/^__/.test(archKey) || !_.has(archPath, archKeyCleaned)) {\n                    // 720\n                    archKey = WebApp.defaultArch; // 721\n                  } else {\n                      // 722\n                      archKey = archKeyCleaned; // 723\n                    } // 724\n                  //\n                  var boilerplate; // 726\n                  try {\n                    // 727\n                    boilerplate = getBoilerplate(request, archKey); // 728\n                  } catch (e) {\n                    // 729\n                    Log.error(\"Error running template: \" + e.stack); // 730\n                    res.writeHead(500, headers); // 731\n                    res.end(); // 732\n                    return undefined; // 733\n                  } // 734\n                  //\n                  var statusCode = res.statusCode ? res.statusCode : 200; // 736\n                  res.writeHead(statusCode, headers); // 737\n                  res.write(boilerplate); // 738\n                  res.end(); // 739\n                  return undefined; // 740\n                }).run(); // 741\n              }); // 742\n              //\n              // Return 404 by default, if no other handlers serve this URL.                                                     //\n              app.use(function (req, res) {\n                // 745\n                res.writeHead(404); // 746\n                res.end(); // 747\n              }); // 748\n              //\n              var httpServer = http.createServer(app); // 751\n              var onListeningCallbacks = []; // 752\n              //\n              // After 5 seconds w/o data on a socket, kill it.  On the other hand, if                                           //\n              // there's an outstanding request, give it a higher timeout instead (to avoid                                      //\n              // killing long-polling requests)                                                                                  //\n              httpServer.setTimeout(SHORT_SOCKET_TIMEOUT); // 757\n              //\n              // Do this here, and then also in livedata/stream_server.js, because                                               //\n              // stream_server.js kills all the current request handlers when installing its                                     //\n              // own.                                                                                                            //\n              httpServer.on('request', WebApp._timeoutAdjustmentRequestCallback); // 762\n              //\n              // start up app                                                                                                    //\n              _.extend(WebApp, { // 766\n                connectHandlers: packageAndAppHandlers, // 767\n                rawConnectHandlers: rawConnectHandlers, // 768\n                httpServer: httpServer, // 769\n                // For testing.                                                                                                  //\n                suppressConnectErrors: function suppressConnectErrors() {\n                  // 771\n                  _suppressConnectErrors = true; // 772\n                }, // 773\n                onListening: function onListening(f) {\n                  // 774\n                  if (onListeningCallbacks) onListeningCallbacks.push(f);else f(); // 775\n                } // 779\n              }); // 766\n              //\n              // Let the rest of the packages (and Meteor.startup hooks) insert connect                                          //\n              // middlewares and update __meteor_runtime_config__, then keep going to set up                                     //\n              // actually serving HTML.                                                                                          //\n              main = function main(argv) {\n                // 785\n                WebAppInternals.generateBoilerplate(); // 786\n                //\n                // only start listening after all the startup code has run.                                                      //\n                var localPort = WebAppInternals.parsePort(process.env.PORT) || 0; // 789\n                var host = process.env.BIND_IP; // 790\n                var localIp = host || '0.0.0.0'; // 791\n                httpServer.listen(localPort, localIp, Meteor.bindEnvironment(function () {\n                  // 792\n                  if (process.env.METEOR_PRINT_ON_LISTEN) console.log(\"LISTENING\"); // must match run-app.js                     // 793\n                  //\n                  var callbacks = onListeningCallbacks; // 796\n                  onListeningCallbacks = null; // 797\n                  _.each(callbacks, function (x) {\n                    // 798\n                    x(); // 798\n                  }); // 798\n                }, function (e) {\n                  // 800\n                  console.error(\"Error listening:\", e); // 801\n                  console.error(e && e.stack); // 802\n                })); // 803\n                //\n                return 'DAEMON'; // 805\n              }; // 806\n            }; // 807\n            //\n            runWebAppServer(); // 810\n            //\n            var inlineScriptsAllowed = true; // 813\n            //\n            WebAppInternals.inlineScriptsAllowed = function () {\n              // 815\n              return inlineScriptsAllowed; // 816\n            }; // 817\n            //\n            WebAppInternals.setInlineScriptsAllowed = function (value) {\n              // 819\n              inlineScriptsAllowed = value; // 820\n              WebAppInternals.generateBoilerplate(); // 821\n            }; // 822\n            //\n            WebAppInternals.setBundledJsCssUrlRewriteHook = function (hookFn) {\n              // 825\n              bundledJsCssUrlRewriteHook = hookFn; // 826\n              WebAppInternals.generateBoilerplate(); // 827\n            }; // 828\n            //\n            WebAppInternals.setBundledJsCssPrefix = function (prefix) {\n              // 830\n              var self = this; // 831\n              self.setBundledJsCssUrlRewriteHook(function (url) {\n                // 832\n                return prefix + url; // 834\n              }); // 835\n            }; // 836\n            //\n            // Packages can call `WebAppInternals.addStaticJs` to specify static                                                 //\n            // JavaScript to be included in the app. This static JS will be inlined,                                             //\n            // unless inline scripts have been disabled, in which case it will be                                                //\n            // served under `/<sha1 of contents>`.                                                                               //\n            var additionalStaticJs = {}; // 842\n            WebAppInternals.addStaticJs = function (contents) {\n              // 843\n              additionalStaticJs[\"/\" + sha1(contents) + \".js\"] = contents; // 844\n            }; // 845\n            //\n            // Exported for tests                                                                                                //\n            WebAppInternals.getBoilerplate = getBoilerplate; // 848\n            WebAppInternals.additionalStaticJs = additionalStaticJs; // 849\n            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n          }] } } } }, { \"extensions\": [\".js\", \".json\"] });\n  require(\"./node_modules/meteor/webapp/webapp_server.js\");\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  (function (pkg, symbols) {\n    for (var s in symbols) {\n      s in pkg || (pkg[s] = symbols[s]);\n    }\n  })(Package.webapp = {}, {\n    WebApp: WebApp,\n    main: main,\n    WebAppInternals: WebAppInternals\n  });\n})();\n\n//# sourceMappingURL=webapp.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/webapp.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/webapp.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar Log = Package.logging.Log;\nvar _ = Package.underscore._;\nvar RoutePolicy = Package.routepolicy.RoutePolicy;\nvar Boilerplate = Package['boilerplate-generator'].Boilerplate;\nvar WebAppHashing = Package['webapp-hashing'].WebAppHashing;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar WebApp, WebAppInternals, main;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"webapp\":{\"webapp_server.js\":[\"babel-runtime/helpers/typeof\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/webapp/webapp_server.js                                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar _typeof;module.import(\"babel-runtime/helpers/typeof\",{\"default\":function(v){_typeof=v}});                        //\n////////// Requires //////////                                                                                       //\n                                                                                                                     //\nvar fs = Npm.require(\"fs\");                                                                                          // 3\nvar http = Npm.require(\"http\");                                                                                      // 4\nvar os = Npm.require(\"os\");                                                                                          // 5\nvar path = Npm.require(\"path\");                                                                                      // 6\nvar url = Npm.require(\"url\");                                                                                        // 7\nvar crypto = Npm.require(\"crypto\");                                                                                  // 8\n                                                                                                                     //\nvar connect = Npm.require('connect');                                                                                // 10\nvar parseurl = Npm.require('parseurl');                                                                              // 11\nvar useragent = Npm.require('useragent');                                                                            // 12\nvar send = Npm.require('send');                                                                                      // 13\n                                                                                                                     //\nvar Future = Npm.require('fibers/future');                                                                           // 15\nvar Fiber = Npm.require('fibers');                                                                                   // 16\n                                                                                                                     //\nvar SHORT_SOCKET_TIMEOUT = 5 * 1000;                                                                                 // 18\nvar LONG_SOCKET_TIMEOUT = 120 * 1000;                                                                                // 19\n                                                                                                                     //\nWebApp = {};                                                                                                         // 21\nWebAppInternals = {};                                                                                                // 22\n                                                                                                                     //\nWebAppInternals.NpmModules = {                                                                                       // 24\n  connect: {                                                                                                         // 25\n    version: Npm.require('connect/package.json').version,                                                            // 26\n    module: connect                                                                                                  // 27\n  }                                                                                                                  // 25\n};                                                                                                                   // 24\n                                                                                                                     //\nWebApp.defaultArch = 'web.browser';                                                                                  // 31\n                                                                                                                     //\n// XXX maps archs to manifests                                                                                       //\nWebApp.clientPrograms = {};                                                                                          // 34\n                                                                                                                     //\n// XXX maps archs to program path on filesystem                                                                      //\nvar archPath = {};                                                                                                   // 37\n                                                                                                                     //\nvar bundledJsCssUrlRewriteHook = function bundledJsCssUrlRewriteHook(url) {                                          // 39\n  var bundledPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';                                          // 40\n  return bundledPrefix + url;                                                                                        // 42\n};                                                                                                                   // 43\n                                                                                                                     //\nvar sha1 = function sha1(contents) {                                                                                 // 45\n  var hash = crypto.createHash('sha1');                                                                              // 46\n  hash.update(contents);                                                                                             // 47\n  return hash.digest('hex');                                                                                         // 48\n};                                                                                                                   // 49\n                                                                                                                     //\nvar readUtf8FileSync = function readUtf8FileSync(filename) {                                                         // 51\n  return Meteor.wrapAsync(fs.readFile)(filename, 'utf8');                                                            // 52\n};                                                                                                                   // 53\n                                                                                                                     //\n// #BrowserIdentification                                                                                            //\n//                                                                                                                   //\n// We have multiple places that want to identify the browser: the                                                    //\n// unsupported browser page, the appcache package, and, eventually                                                   //\n// delivering browser polyfills only as needed.                                                                      //\n//                                                                                                                   //\n// To avoid detecting the browser in multiple places ad-hoc, we create a                                             //\n// Meteor \"browser\" object. It uses but does not expose the npm                                                      //\n// useragent module (we could choose a different mechanism to identify                                               //\n// the browser in the future if we wanted to).  The browser object                                                   //\n// contains                                                                                                          //\n//                                                                                                                   //\n// * `name`: the name of the browser in camel case                                                                   //\n// * `major`, `minor`, `patch`: integers describing the browser version                                              //\n//                                                                                                                   //\n// Also here is an early version of a Meteor `request` object, intended                                              //\n// to be a high-level description of the request without exposing                                                    //\n// details of connect's low-level `req`.  Currently it contains:                                                     //\n//                                                                                                                   //\n// * `browser`: browser identification object described above                                                        //\n// * `url`: parsed url, including parsed query params                                                                //\n//                                                                                                                   //\n// As a temporary hack there is a `categorizeRequest` function on WebApp which                                       //\n// converts a connect `req` to a Meteor `request`. This can go away once smart                                       //\n// packages such as appcache are being passed a `request` object directly when                                       //\n// they serve content.                                                                                               //\n//                                                                                                                   //\n// This allows `request` to be used uniformly: it is passed to the html                                              //\n// attributes hook, and the appcache package can use it when deciding                                                //\n// whether to generate a 404 for the manifest.                                                                       //\n//                                                                                                                   //\n// Real routing / server side rendering will probably refactor this                                                  //\n// heavily.                                                                                                          //\n                                                                                                                     //\n// e.g. \"Mobile Safari\" => \"mobileSafari\"                                                                            //\nvar camelCase = function camelCase(name) {                                                                           // 91\n  var parts = name.split(' ');                                                                                       // 92\n  parts[0] = parts[0].toLowerCase();                                                                                 // 93\n  for (var i = 1; i < parts.length; ++i) {                                                                           // 94\n    parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].substr(1);                                                // 95\n  }                                                                                                                  // 96\n  return parts.join('');                                                                                             // 97\n};                                                                                                                   // 98\n                                                                                                                     //\nvar identifyBrowser = function identifyBrowser(userAgentString) {                                                    // 100\n  var userAgent = useragent.lookup(userAgentString);                                                                 // 101\n  return {                                                                                                           // 102\n    name: camelCase(userAgent.family),                                                                               // 103\n    major: +userAgent.major,                                                                                         // 104\n    minor: +userAgent.minor,                                                                                         // 105\n    patch: +userAgent.patch                                                                                          // 106\n  };                                                                                                                 // 102\n};                                                                                                                   // 108\n                                                                                                                     //\n// XXX Refactor as part of implementing real routing.                                                                //\nWebAppInternals.identifyBrowser = identifyBrowser;                                                                   // 111\n                                                                                                                     //\nWebApp.categorizeRequest = function (req) {                                                                          // 113\n  return _.extend({                                                                                                  // 114\n    browser: identifyBrowser(req.headers['user-agent']),                                                             // 115\n    url: url.parse(req.url, true)                                                                                    // 116\n  }, _.pick(req, 'dynamicHead', 'dynamicBody'));                                                                     // 114\n};                                                                                                                   // 118\n                                                                                                                     //\n// HTML attribute hooks: functions to be called to determine any attributes to                                       //\n// be added to the '<html>' tag. Each function is passed a 'request' object (see                                     //\n// #BrowserIdentification) and should return null or object.                                                         //\nvar htmlAttributeHooks = [];                                                                                         // 123\nvar getHtmlAttributes = function getHtmlAttributes(request) {                                                        // 124\n  var combinedAttributes = {};                                                                                       // 125\n  _.each(htmlAttributeHooks || [], function (hook) {                                                                 // 126\n    var attributes = hook(request);                                                                                  // 127\n    if (attributes === null) return;                                                                                 // 128\n    if ((typeof attributes === \"undefined\" ? \"undefined\" : _typeof(attributes)) !== 'object') throw Error(\"HTML attribute hook must return null or object\");\n    _.extend(combinedAttributes, attributes);                                                                        // 132\n  });                                                                                                                // 133\n  return combinedAttributes;                                                                                         // 134\n};                                                                                                                   // 135\nWebApp.addHtmlAttributeHook = function (hook) {                                                                      // 136\n  htmlAttributeHooks.push(hook);                                                                                     // 137\n};                                                                                                                   // 138\n                                                                                                                     //\n// Serve app HTML for this URL?                                                                                      //\nvar appUrl = function appUrl(url) {                                                                                  // 141\n  if (url === '/favicon.ico' || url === '/robots.txt') return false;                                                 // 142\n                                                                                                                     //\n  // NOTE: app.manifest is not a web standard like favicon.ico and                                                   //\n  // robots.txt. It is a file name we have chosen to use for HTML5                                                   //\n  // appcache URLs. It is included here to prevent using an appcache                                                 //\n  // then removing it from poisoning an app permanently. Eventually,                                                 //\n  // once we have server side routing, this won't be needed as                                                       //\n  // unknown URLs with return a 404 automatically.                                                                   //\n  if (url === '/app.manifest') return false;                                                                         // 151\n                                                                                                                     //\n  // Avoid serving app HTML for declared routes such as /sockjs/.                                                    //\n  if (RoutePolicy.classify(url)) return false;                                                                       // 155\n                                                                                                                     //\n  // we currently return app HTML on all URLs by default                                                             //\n  return true;                                                                                                       // 159\n};                                                                                                                   // 160\n                                                                                                                     //\n// We need to calculate the client hash after all packages have loaded                                               //\n// to give them a chance to populate __meteor_runtime_config__.                                                      //\n//                                                                                                                   //\n// Calculating the hash during startup means that packages can only                                                  //\n// populate __meteor_runtime_config__ during load, not during startup.                                               //\n//                                                                                                                   //\n// Calculating instead it at the beginning of main after all startup                                                 //\n// hooks had run would allow packages to also populate                                                               //\n// __meteor_runtime_config__ during startup, but that's too late for                                                 //\n// autoupdate because it needs to have the client hash at startup to                                                 //\n// insert the auto update version itself into                                                                        //\n// __meteor_runtime_config__ to get it to the client.                                                                //\n//                                                                                                                   //\n// An alternative would be to give autoupdate a \"post-start,                                                         //\n// pre-listen\" hook to allow it to insert the auto update version at                                                 //\n// the right moment.                                                                                                 //\n                                                                                                                     //\nMeteor.startup(function () {                                                                                         // 180\n  var calculateClientHash = WebAppHashing.calculateClientHash;                                                       // 181\n  WebApp.clientHash = function (archName) {                                                                          // 182\n    archName = archName || WebApp.defaultArch;                                                                       // 183\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest);                                            // 184\n  };                                                                                                                 // 185\n                                                                                                                     //\n  WebApp.calculateClientHashRefreshable = function (archName) {                                                      // 187\n    archName = archName || WebApp.defaultArch;                                                                       // 188\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest, function (name) {                           // 189\n      return name === \"css\";                                                                                         // 191\n    });                                                                                                              // 192\n  };                                                                                                                 // 193\n  WebApp.calculateClientHashNonRefreshable = function (archName) {                                                   // 194\n    archName = archName || WebApp.defaultArch;                                                                       // 195\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest, function (name) {                           // 196\n      return name !== \"css\";                                                                                         // 198\n    });                                                                                                              // 199\n  };                                                                                                                 // 200\n  WebApp.calculateClientHashCordova = function () {                                                                  // 201\n    var archName = 'web.cordova';                                                                                    // 202\n    if (!WebApp.clientPrograms[archName]) return 'none';                                                             // 203\n                                                                                                                     //\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest, null, _.pick(__meteor_runtime_config__, 'PUBLIC_SETTINGS'));\n  };                                                                                                                 // 209\n});                                                                                                                  // 210\n                                                                                                                     //\n// When we have a request pending, we want the socket timeout to be long, to                                         //\n// give ourselves a while to serve it, and to allow sockjs long polls to                                             //\n// complete.  On the other hand, we want to close idle sockets relatively                                            //\n// quickly, so that we can shut down relatively promptly but cleanly, without                                        //\n// cutting off anyone's response.                                                                                    //\nWebApp._timeoutAdjustmentRequestCallback = function (req, res) {                                                     // 219\n  // this is really just req.socket.setTimeout(LONG_SOCKET_TIMEOUT);                                                 //\n  req.setTimeout(LONG_SOCKET_TIMEOUT);                                                                               // 221\n  // Insert our new finish listener to run BEFORE the existing one which removes                                     //\n  // the response from the socket.                                                                                   //\n  var finishListeners = res.listeners('finish');                                                                     // 224\n  // XXX Apparently in Node 0.12 this event was called 'prefinish'.                                                  //\n  // https://github.com/joyent/node/commit/7c9b6070                                                                  //\n  // But it has switched back to 'finish' in Node v4:                                                                //\n  // https://github.com/nodejs/node/pull/1411                                                                        //\n  res.removeAllListeners('finish');                                                                                  // 229\n  res.on('finish', function () {                                                                                     // 230\n    res.setTimeout(SHORT_SOCKET_TIMEOUT);                                                                            // 231\n  });                                                                                                                // 232\n  _.each(finishListeners, function (l) {                                                                             // 233\n    res.on('finish', l);                                                                                             // 233\n  });                                                                                                                // 233\n};                                                                                                                   // 234\n                                                                                                                     //\n// Will be updated by main before we listen.                                                                         //\n// Map from client arch to boilerplate object.                                                                       //\n// Boilerplate object has:                                                                                           //\n//   - func: XXX                                                                                                     //\n//   - baseData: XXX                                                                                                 //\nvar boilerplateByArch = {};                                                                                          // 242\n                                                                                                                     //\n// Given a request (as returned from `categorizeRequest`), return the                                                //\n// boilerplate HTML to serve for that request.                                                                       //\n//                                                                                                                   //\n// If a previous connect middleware has rendered content for the head or body,                                       //\n// returns the boilerplate with that content patched in otherwise                                                    //\n// memoizes on HTML attributes (used by, eg, appcache) and whether inline                                            //\n// scripts are currently allowed.                                                                                    //\n// XXX so far this function is always called with arch === 'web.browser'                                             //\nvar memoizedBoilerplate = {};                                                                                        // 252\nvar getBoilerplate = function getBoilerplate(request, arch) {                                                        // 253\n  var useMemoized = !(request.dynamicHead || request.dynamicBody);                                                   // 254\n  var htmlAttributes = getHtmlAttributes(request);                                                                   // 255\n                                                                                                                     //\n  if (useMemoized) {                                                                                                 // 257\n    // The only thing that changes from request to request (unless extra                                             //\n    // content is added to the head or body) are the HTML attributes                                                 //\n    // (used by, eg, appcache) and whether inline scripts are allowed, so we                                         //\n    // can memoize based on that.                                                                                    //\n    var memHash = JSON.stringify({                                                                                   // 262\n      inlineScriptsAllowed: inlineScriptsAllowed,                                                                    // 263\n      htmlAttributes: htmlAttributes,                                                                                // 264\n      arch: arch                                                                                                     // 265\n    });                                                                                                              // 262\n                                                                                                                     //\n    if (!memoizedBoilerplate[memHash]) {                                                                             // 268\n      memoizedBoilerplate[memHash] = boilerplateByArch[arch].toHTML({                                                // 269\n        htmlAttributes: htmlAttributes                                                                               // 270\n      });                                                                                                            // 269\n    }                                                                                                                // 272\n    return memoizedBoilerplate[memHash];                                                                             // 273\n  }                                                                                                                  // 274\n                                                                                                                     //\n  var boilerplateOptions = _.extend({                                                                                // 276\n    htmlAttributes: htmlAttributes                                                                                   // 277\n  }, _.pick(request, 'dynamicHead', 'dynamicBody'));                                                                 // 276\n                                                                                                                     //\n  return boilerplateByArch[arch].toHTML(boilerplateOptions);                                                         // 280\n};                                                                                                                   // 281\n                                                                                                                     //\nWebAppInternals.generateBoilerplateInstance = function (arch, manifest, additionalOptions) {                         // 283\n  additionalOptions = additionalOptions || {};                                                                       // 286\n                                                                                                                     //\n  var runtimeConfig = _.extend(_.clone(__meteor_runtime_config__), additionalOptions.runtimeConfigOverrides || {});  // 288\n  return new Boilerplate(arch, manifest, _.extend({                                                                  // 292\n    pathMapper: function pathMapper(itemPath) {                                                                      // 294\n      return path.join(archPath[arch], itemPath);                                                                    // 295\n    },                                                                                                               // 295\n    baseDataExtension: {                                                                                             // 296\n      additionalStaticJs: _.map(additionalStaticJs || [], function (contents, pathname) {                            // 297\n        return {                                                                                                     // 300\n          pathname: pathname,                                                                                        // 301\n          contents: contents                                                                                         // 302\n        };                                                                                                           // 300\n      }),                                                                                                            // 304\n      // Convert to a JSON string, then get rid of most weird characters, then                                       //\n      // wrap in double quotes. (The outermost JSON.stringify really ought to                                        //\n      // just be \"wrap in double quotes\" but we use it to be safe.) This might                                       //\n      // end up inside a <script> tag so we need to be careful to not include                                        //\n      // \"</script>\", but normal {{spacebars}} escaping escapes too much! See                                        //\n      // https://github.com/meteor/meteor/issues/3730                                                                //\n      meteorRuntimeConfig: JSON.stringify(encodeURIComponent(JSON.stringify(runtimeConfig))),                        // 312\n      rootUrlPathPrefix: __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '',                                       // 314\n      bundledJsCssUrlRewriteHook: bundledJsCssUrlRewriteHook,                                                        // 315\n      inlineScriptsAllowed: WebAppInternals.inlineScriptsAllowed(),                                                  // 316\n      inline: additionalOptions.inline                                                                               // 317\n    }                                                                                                                // 296\n  }, additionalOptions));                                                                                            // 293\n};                                                                                                                   // 321\n                                                                                                                     //\n// A mapping from url path to \"info\". Where \"info\" has the following fields:                                         //\n// - type: the type of file to be served                                                                             //\n// - cacheable: optionally, whether the file should be cached or not                                                 //\n// - sourceMapUrl: optionally, the url of the source map                                                             //\n//                                                                                                                   //\n// Info also contains one of the following:                                                                          //\n// - content: the stringified content that should be served at this path                                             //\n// - absolutePath: the absolute path on disk to the file                                                             //\n                                                                                                                     //\nvar staticFiles;                                                                                                     // 332\n                                                                                                                     //\n// Serve static files from the manifest or added with                                                                //\n// `addStaticJs`. Exported for tests.                                                                                //\nWebAppInternals.staticFilesMiddleware = function (staticFiles, req, res, next) {                                     // 336\n  if ('GET' != req.method && 'HEAD' != req.method && 'OPTIONS' != req.method) {                                      // 337\n    next();                                                                                                          // 338\n    return;                                                                                                          // 339\n  }                                                                                                                  // 340\n  var pathname = parseurl(req).pathname;                                                                             // 341\n  try {                                                                                                              // 342\n    pathname = decodeURIComponent(pathname);                                                                         // 343\n  } catch (e) {                                                                                                      // 344\n    next();                                                                                                          // 345\n    return;                                                                                                          // 346\n  }                                                                                                                  // 347\n                                                                                                                     //\n  var serveStaticJs = function serveStaticJs(s) {                                                                    // 349\n    res.writeHead(200, {                                                                                             // 350\n      'Content-type': 'application/javascript; charset=UTF-8'                                                        // 351\n    });                                                                                                              // 350\n    res.write(s);                                                                                                    // 353\n    res.end();                                                                                                       // 354\n  };                                                                                                                 // 355\n                                                                                                                     //\n  if (pathname === \"/meteor_runtime_config.js\" && !WebAppInternals.inlineScriptsAllowed()) {                         // 357\n    serveStaticJs(\"__meteor_runtime_config__ = \" + JSON.stringify(__meteor_runtime_config__) + \";\");                 // 359\n    return;                                                                                                          // 361\n  } else if (_.has(additionalStaticJs, pathname) && !WebAppInternals.inlineScriptsAllowed()) {                       // 362\n    serveStaticJs(additionalStaticJs[pathname]);                                                                     // 364\n    return;                                                                                                          // 365\n  }                                                                                                                  // 366\n                                                                                                                     //\n  if (!_.has(staticFiles, pathname)) {                                                                               // 368\n    next();                                                                                                          // 369\n    return;                                                                                                          // 370\n  }                                                                                                                  // 371\n                                                                                                                     //\n  // We don't need to call pause because, unlike 'static', once we call into                                         //\n  // 'send' and yield to the event loop, we never call another handler with                                          //\n  // 'next'.                                                                                                         //\n                                                                                                                     //\n  var info = staticFiles[pathname];                                                                                  // 377\n                                                                                                                     //\n  // Cacheable files are files that should never change. Typically                                                   //\n  // named by their hash (eg meteor bundled js and css files).                                                       //\n  // We cache them ~forever (1yr).                                                                                   //\n  var maxAge = info.cacheable ? 1000 * 60 * 60 * 24 * 365 : 0;                                                       // 382\n                                                                                                                     //\n  // Set the X-SourceMap header, which current Chrome, FireFox, and Safari                                           //\n  // understand.  (The SourceMap header is slightly more spec-correct but FF                                         //\n  // doesn't understand it.)                                                                                         //\n  //                                                                                                                 //\n  // You may also need to enable source maps in Chrome: open dev tools, click                                        //\n  // the gear in the bottom right corner, and select \"enable source maps\".                                           //\n  if (info.sourceMapUrl) {                                                                                           // 392\n    res.setHeader('X-SourceMap', __meteor_runtime_config__.ROOT_URL_PATH_PREFIX + info.sourceMapUrl);                // 393\n  }                                                                                                                  // 396\n                                                                                                                     //\n  if (info.type === \"js\") {                                                                                          // 398\n    res.setHeader(\"Content-Type\", \"application/javascript; charset=UTF-8\");                                          // 399\n  } else if (info.type === \"css\") {                                                                                  // 400\n    res.setHeader(\"Content-Type\", \"text/css; charset=UTF-8\");                                                        // 401\n  } else if (info.type === \"json\") {                                                                                 // 402\n    res.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");                                                // 403\n  }                                                                                                                  // 404\n                                                                                                                     //\n  if (info.hash) {                                                                                                   // 406\n    res.setHeader('ETag', '\"' + info.hash + '\"');                                                                    // 407\n  }                                                                                                                  // 408\n                                                                                                                     //\n  if (info.content) {                                                                                                // 410\n    res.write(info.content);                                                                                         // 411\n    res.end();                                                                                                       // 412\n  } else {                                                                                                           // 413\n    send(req, info.absolutePath, {                                                                                   // 414\n      maxage: maxAge,                                                                                                // 415\n      dotfiles: 'allow', // if we specified a dotfile in the manifest, serve it                                      // 416\n      lastModified: false // don't set last-modified based on the file date                                          // 417\n    }).on('error', function (err) {                                                                                  // 414\n      Log.error(\"Error serving static file \" + err);                                                                 // 419\n      res.writeHead(500);                                                                                            // 420\n      res.end();                                                                                                     // 421\n    }).on('directory', function () {                                                                                 // 422\n      Log.error(\"Unexpected directory \" + info.absolutePath);                                                        // 424\n      res.writeHead(500);                                                                                            // 425\n      res.end();                                                                                                     // 426\n    }).pipe(res);                                                                                                    // 427\n  }                                                                                                                  // 429\n};                                                                                                                   // 430\n                                                                                                                     //\nvar getUrlPrefixForArch = function getUrlPrefixForArch(arch) {                                                       // 432\n  // XXX we rely on the fact that arch names don't contain slashes                                                   //\n  // in that case we would need to uri escape it                                                                     //\n                                                                                                                     //\n  // We add '__' to the beginning of non-standard archs to \"scope\" the url                                           //\n  // to Meteor internals.                                                                                            //\n  return arch === WebApp.defaultArch ? '' : '/' + '__' + arch.replace(/^web\\./, '');                                 // 438\n};                                                                                                                   // 440\n                                                                                                                     //\n// parse port to see if its a Windows Server style named pipe. If so, return as-is (String), otherwise return as Int\nWebAppInternals.parsePort = function (port) {                                                                        // 443\n  if (/\\\\\\\\?.+\\\\pipe\\\\?.+/.test(port)) {                                                                             // 444\n    return port;                                                                                                     // 445\n  }                                                                                                                  // 446\n                                                                                                                     //\n  return parseInt(port);                                                                                             // 448\n};                                                                                                                   // 449\n                                                                                                                     //\nvar runWebAppServer = function runWebAppServer() {                                                                   // 451\n  var shuttingDown = false;                                                                                          // 452\n  var syncQueue = new Meteor._SynchronousQueue();                                                                    // 453\n                                                                                                                     //\n  var getItemPathname = function getItemPathname(itemUrl) {                                                          // 455\n    return decodeURIComponent(url.parse(itemUrl).pathname);                                                          // 456\n  };                                                                                                                 // 457\n                                                                                                                     //\n  WebAppInternals.reloadClientPrograms = function () {                                                               // 459\n    syncQueue.runTask(function () {                                                                                  // 460\n      staticFiles = {};                                                                                              // 461\n      var generateClientProgram = function generateClientProgram(clientPath, arch) {                                 // 462\n        // read the control for the client we'll be serving up                                                       //\n        var clientJsonPath = path.join(__meteor_bootstrap__.serverDir, clientPath);                                  // 464\n        var clientDir = path.dirname(clientJsonPath);                                                                // 466\n        var clientJson = JSON.parse(readUtf8FileSync(clientJsonPath));                                               // 467\n        if (clientJson.format !== \"web-program-pre1\") throw new Error(\"Unsupported format for client assets: \" + JSON.stringify(clientJson.format));\n                                                                                                                     //\n        if (!clientJsonPath || !clientDir || !clientJson) throw new Error(\"Client config file not parsed.\");         // 472\n                                                                                                                     //\n        var urlPrefix = getUrlPrefixForArch(arch);                                                                   // 475\n                                                                                                                     //\n        var manifest = clientJson.manifest;                                                                          // 477\n        _.each(manifest, function (item) {                                                                           // 478\n          if (item.url && item.where === \"client\") {                                                                 // 479\n            staticFiles[urlPrefix + getItemPathname(item.url)] = {                                                   // 480\n              absolutePath: path.join(clientDir, item.path),                                                         // 481\n              cacheable: item.cacheable,                                                                             // 482\n              hash: item.hash,                                                                                       // 483\n              // Link from source to its map                                                                         //\n              sourceMapUrl: item.sourceMapUrl,                                                                       // 485\n              type: item.type                                                                                        // 486\n            };                                                                                                       // 480\n                                                                                                                     //\n            if (item.sourceMap) {                                                                                    // 489\n              // Serve the source map too, under the specified URL. We assume all                                    //\n              // source maps are cacheable.                                                                          //\n              staticFiles[urlPrefix + getItemPathname(item.sourceMapUrl)] = {                                        // 492\n                absolutePath: path.join(clientDir, item.sourceMap),                                                  // 493\n                cacheable: true                                                                                      // 494\n              };                                                                                                     // 492\n            }                                                                                                        // 496\n          }                                                                                                          // 497\n        });                                                                                                          // 498\n                                                                                                                     //\n        var program = {                                                                                              // 500\n          format: \"web-program-pre1\",                                                                                // 501\n          manifest: manifest,                                                                                        // 502\n          version: WebAppHashing.calculateClientHash(manifest, null, _.pick(__meteor_runtime_config__, 'PUBLIC_SETTINGS')),\n          cordovaCompatibilityVersions: clientJson.cordovaCompatibilityVersions,                                     // 505\n          PUBLIC_SETTINGS: __meteor_runtime_config__.PUBLIC_SETTINGS                                                 // 506\n        };                                                                                                           // 500\n                                                                                                                     //\n        WebApp.clientPrograms[arch] = program;                                                                       // 509\n                                                                                                                     //\n        // Serve the program as a string at /foo/<arch>/manifest.json                                                //\n        // XXX change manifest.json -> program.json                                                                  //\n        staticFiles[urlPrefix + getItemPathname('/manifest.json')] = {                                               // 513\n          content: JSON.stringify(program),                                                                          // 514\n          cacheable: false,                                                                                          // 515\n          hash: program.version,                                                                                     // 516\n          type: \"json\"                                                                                               // 517\n        };                                                                                                           // 513\n      };                                                                                                             // 519\n                                                                                                                     //\n      try {                                                                                                          // 521\n        var clientPaths = __meteor_bootstrap__.configJson.clientPaths;                                               // 522\n        _.each(clientPaths, function (clientPath, arch) {                                                            // 523\n          archPath[arch] = path.dirname(clientPath);                                                                 // 524\n          generateClientProgram(clientPath, arch);                                                                   // 525\n        });                                                                                                          // 526\n                                                                                                                     //\n        // Exported for tests.                                                                                       //\n        WebAppInternals.staticFiles = staticFiles;                                                                   // 529\n      } catch (e) {                                                                                                  // 530\n        Log.error(\"Error reloading the client program: \" + e.stack);                                                 // 531\n        process.exit(1);                                                                                             // 532\n      }                                                                                                              // 533\n    });                                                                                                              // 534\n  };                                                                                                                 // 535\n                                                                                                                     //\n  WebAppInternals.generateBoilerplate = function () {                                                                // 537\n    // This boilerplate will be served to the mobile devices when used with                                          //\n    // Meteor/Cordova for the Hot-Code Push and since the file will be served by                                     //\n    // the device's server, it is important to set the DDP url to the actual                                         //\n    // Meteor server accepting DDP connections and not the device's file server.                                     //\n    var defaultOptionsForArch = {                                                                                    // 542\n      'web.cordova': {                                                                                               // 543\n        runtimeConfigOverrides: {                                                                                    // 544\n          // XXX We use absoluteUrl() here so that we serve https://                                                 //\n          // URLs to cordova clients if force-ssl is in use. If we were                                              //\n          // to use __meteor_runtime_config__.ROOT_URL instead of                                                    //\n          // absoluteUrl(), then Cordova clients would immediately get a                                             //\n          // HCP setting their DDP_DEFAULT_CONNECTION_URL to                                                         //\n          // http://example.meteor.com. This breaks the app, because                                                 //\n          // force-ssl doesn't serve CORS headers on 302                                                             //\n          // redirects. (Plus it's undesirable to have clients                                                       //\n          // connecting to http://example.meteor.com when force-ssl is                                               //\n          // in use.)                                                                                                //\n          DDP_DEFAULT_CONNECTION_URL: process.env.MOBILE_DDP_URL || Meteor.absoluteUrl(),                            // 555\n          ROOT_URL: process.env.MOBILE_ROOT_URL || Meteor.absoluteUrl()                                              // 557\n        }                                                                                                            // 544\n      }                                                                                                              // 543\n    };                                                                                                               // 542\n                                                                                                                     //\n    syncQueue.runTask(function () {                                                                                  // 563\n      _.each(WebApp.clientPrograms, function (program, archName) {                                                   // 564\n        boilerplateByArch[archName] = WebAppInternals.generateBoilerplateInstance(archName, program.manifest, defaultOptionsForArch[archName]);\n      });                                                                                                            // 569\n                                                                                                                     //\n      // Clear the memoized boilerplate cache.                                                                       //\n      memoizedBoilerplate = {};                                                                                      // 572\n                                                                                                                     //\n      // Configure CSS injection for the default arch                                                                //\n      // XXX implement the CSS injection for all archs?                                                              //\n      var cssFiles = boilerplateByArch[WebApp.defaultArch].baseData.css;                                             // 576\n      // Rewrite all CSS files (which are written directly to <style> tags)                                          //\n      // by autoupdate_client to use the CDN prefix/etc                                                              //\n      var allCss = _.map(cssFiles, function (cssFile) {                                                              // 579\n        return { url: bundledJsCssUrlRewriteHook(cssFile.url) };                                                     // 580\n      });                                                                                                            // 581\n      WebAppInternals.refreshableAssets = { allCss: allCss };                                                        // 582\n    });                                                                                                              // 583\n  };                                                                                                                 // 584\n                                                                                                                     //\n  WebAppInternals.reloadClientPrograms();                                                                            // 586\n                                                                                                                     //\n  // webserver                                                                                                       //\n  var app = connect();                                                                                               // 589\n                                                                                                                     //\n  // Auto-compress any json, javascript, or text.                                                                    //\n  app.use(connect.compress());                                                                                       // 592\n                                                                                                                     //\n  // Packages and apps can add handlers that run before any other Meteor                                             //\n  // handlers via WebApp.rawConnectHandlers.                                                                         //\n  var rawConnectHandlers = connect();                                                                                // 596\n  app.use(rawConnectHandlers);                                                                                       // 597\n                                                                                                                     //\n  // We're not a proxy; reject (without crashing) attempts to treat us like                                          //\n  // one. (See #1212.)                                                                                               //\n  app.use(function (req, res, next) {                                                                                // 601\n    if (RoutePolicy.isValidUrl(req.url)) {                                                                           // 602\n      next();                                                                                                        // 603\n      return;                                                                                                        // 604\n    }                                                                                                                // 605\n    res.writeHead(400);                                                                                              // 606\n    res.write(\"Not a proxy\");                                                                                        // 607\n    res.end();                                                                                                       // 608\n  });                                                                                                                // 609\n                                                                                                                     //\n  // Strip off the path prefix, if it exists.                                                                        //\n  app.use(function (request, response, next) {                                                                       // 612\n    var pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;                                                 // 613\n    var url = Npm.require('url').parse(request.url);                                                                 // 614\n    var pathname = url.pathname;                                                                                     // 615\n    // check if the path in the url starts with the path prefix (and the part                                        //\n    // after the path prefix must start with a / if it exists.)                                                      //\n    if (pathPrefix && pathname.substring(0, pathPrefix.length) === pathPrefix && (pathname.length == pathPrefix.length || pathname.substring(pathPrefix.length, pathPrefix.length + 1) === \"/\")) {\n      request.url = request.url.substring(pathPrefix.length);                                                        // 621\n      next();                                                                                                        // 622\n    } else if (pathname === \"/favicon.ico\" || pathname === \"/robots.txt\") {                                          // 623\n      next();                                                                                                        // 624\n    } else if (pathPrefix) {                                                                                         // 625\n      response.writeHead(404);                                                                                       // 626\n      response.write(\"Unknown path\");                                                                                // 627\n      response.end();                                                                                                // 628\n    } else {                                                                                                         // 629\n      next();                                                                                                        // 630\n    }                                                                                                                // 631\n  });                                                                                                                // 632\n                                                                                                                     //\n  // Parse the query string into res.query. Used by oauth_server, but it's                                           //\n  // generally pretty handy..                                                                                        //\n  app.use(connect.query());                                                                                          // 636\n                                                                                                                     //\n  // Serve static files from the manifest.                                                                           //\n  // This is inspired by the 'static' middleware.                                                                    //\n  app.use(function (req, res, next) {                                                                                // 640\n    Fiber(function () {                                                                                              // 641\n      WebAppInternals.staticFilesMiddleware(staticFiles, req, res, next);                                            // 642\n    }).run();                                                                                                        // 643\n  });                                                                                                                // 644\n                                                                                                                     //\n  // Packages and apps can add handlers to this via WebApp.connectHandlers.                                          //\n  // They are inserted before our default handler.                                                                   //\n  var packageAndAppHandlers = connect();                                                                             // 648\n  app.use(packageAndAppHandlers);                                                                                    // 649\n                                                                                                                     //\n  var _suppressConnectErrors = false;                                                                                // 651\n  // connect knows it is an error handler because it has 4 arguments instead of                                      //\n  // 3. go figure.  (It is not smart enough to find such a thing if it's hidden                                      //\n  // inside packageAndAppHandlers.)                                                                                  //\n  app.use(function (err, req, res, next) {                                                                           // 655\n    if (!err || !_suppressConnectErrors || !req.headers['x-suppress-error']) {                                       // 656\n      next(err);                                                                                                     // 657\n      return;                                                                                                        // 658\n    }                                                                                                                // 659\n    res.writeHead(err.status, { 'Content-Type': 'text/plain' });                                                     // 660\n    res.end(\"An error message\");                                                                                     // 661\n  });                                                                                                                // 662\n                                                                                                                     //\n  app.use(function (req, res, next) {                                                                                // 664\n    Fiber(function () {                                                                                              // 665\n      if (!appUrl(req.url)) return next();                                                                           // 666\n                                                                                                                     //\n      var headers = {                                                                                                // 669\n        'Content-Type': 'text/html; charset=utf-8'                                                                   // 670\n      };                                                                                                             // 669\n      if (shuttingDown) headers['Connection'] = 'Close';                                                             // 672\n                                                                                                                     //\n      var request = WebApp.categorizeRequest(req);                                                                   // 675\n                                                                                                                     //\n      if (request.url.query && request.url.query['meteor_css_resource']) {                                           // 677\n        // In this case, we're requesting a CSS resource in the meteor-specific                                      //\n        // way, but we don't have it.  Serve a static css file that indicates that                                   //\n        // we didn't have it, so we can detect that and refresh.  Make sure                                          //\n        // that any proxies or CDNs don't cache this error!  (Normally proxies                                       //\n        // or CDNs are smart enough not to cache error pages, but in order to                                        //\n        // make this hack work, we need to return the CSS file as a 200, which                                       //\n        // would otherwise be cached.)                                                                               //\n        headers['Content-Type'] = 'text/css; charset=utf-8';                                                         // 685\n        headers['Cache-Control'] = 'no-cache';                                                                       // 686\n        res.writeHead(200, headers);                                                                                 // 687\n        res.write(\".meteor-css-not-found-error { width: 0px;}\");                                                     // 688\n        res.end();                                                                                                   // 689\n        return undefined;                                                                                            // 690\n      }                                                                                                              // 691\n                                                                                                                     //\n      if (request.url.query && request.url.query['meteor_js_resource']) {                                            // 693\n        // Similarly, we're requesting a JS resource that we don't have.                                             //\n        // Serve an uncached 404. (We can't use the same hack we use for CSS,                                        //\n        // because actually acting on that hack requires us to have the JS                                           //\n        // already!)                                                                                                 //\n        headers['Cache-Control'] = 'no-cache';                                                                       // 698\n        res.writeHead(404, headers);                                                                                 // 699\n        res.end(\"404 Not Found\");                                                                                    // 700\n        return undefined;                                                                                            // 701\n      }                                                                                                              // 702\n                                                                                                                     //\n      if (request.url.query && request.url.query['meteor_dont_serve_index']) {                                       // 704\n        // When downloading files during a Cordova hot code push, we need                                            //\n        // to detect if a file is not available instead of inadvertently                                             //\n        // downloading the default index page.                                                                       //\n        // So similar to the situation above, we serve an uncached 404.                                              //\n        headers['Cache-Control'] = 'no-cache';                                                                       // 709\n        res.writeHead(404, headers);                                                                                 // 710\n        res.end(\"404 Not Found\");                                                                                    // 711\n        return undefined;                                                                                            // 712\n      }                                                                                                              // 713\n                                                                                                                     //\n      // /packages/asdfsad ... /__cordova/dafsdf.js                                                                  //\n      var pathname = parseurl(req).pathname;                                                                         // 716\n      var archKey = pathname.split('/')[1];                                                                          // 717\n      var archKeyCleaned = 'web.' + archKey.replace(/^__/, '');                                                      // 718\n                                                                                                                     //\n      if (!/^__/.test(archKey) || !_.has(archPath, archKeyCleaned)) {                                                // 720\n        archKey = WebApp.defaultArch;                                                                                // 721\n      } else {                                                                                                       // 722\n        archKey = archKeyCleaned;                                                                                    // 723\n      }                                                                                                              // 724\n                                                                                                                     //\n      var boilerplate;                                                                                               // 726\n      try {                                                                                                          // 727\n        boilerplate = getBoilerplate(request, archKey);                                                              // 728\n      } catch (e) {                                                                                                  // 729\n        Log.error(\"Error running template: \" + e.stack);                                                             // 730\n        res.writeHead(500, headers);                                                                                 // 731\n        res.end();                                                                                                   // 732\n        return undefined;                                                                                            // 733\n      }                                                                                                              // 734\n                                                                                                                     //\n      var statusCode = res.statusCode ? res.statusCode : 200;                                                        // 736\n      res.writeHead(statusCode, headers);                                                                            // 737\n      res.write(boilerplate);                                                                                        // 738\n      res.end();                                                                                                     // 739\n      return undefined;                                                                                              // 740\n    }).run();                                                                                                        // 741\n  });                                                                                                                // 742\n                                                                                                                     //\n  // Return 404 by default, if no other handlers serve this URL.                                                     //\n  app.use(function (req, res) {                                                                                      // 745\n    res.writeHead(404);                                                                                              // 746\n    res.end();                                                                                                       // 747\n  });                                                                                                                // 748\n                                                                                                                     //\n  var httpServer = http.createServer(app);                                                                           // 751\n  var onListeningCallbacks = [];                                                                                     // 752\n                                                                                                                     //\n  // After 5 seconds w/o data on a socket, kill it.  On the other hand, if                                           //\n  // there's an outstanding request, give it a higher timeout instead (to avoid                                      //\n  // killing long-polling requests)                                                                                  //\n  httpServer.setTimeout(SHORT_SOCKET_TIMEOUT);                                                                       // 757\n                                                                                                                     //\n  // Do this here, and then also in livedata/stream_server.js, because                                               //\n  // stream_server.js kills all the current request handlers when installing its                                     //\n  // own.                                                                                                            //\n  httpServer.on('request', WebApp._timeoutAdjustmentRequestCallback);                                                // 762\n                                                                                                                     //\n  // start up app                                                                                                    //\n  _.extend(WebApp, {                                                                                                 // 766\n    connectHandlers: packageAndAppHandlers,                                                                          // 767\n    rawConnectHandlers: rawConnectHandlers,                                                                          // 768\n    httpServer: httpServer,                                                                                          // 769\n    // For testing.                                                                                                  //\n    suppressConnectErrors: function suppressConnectErrors() {                                                        // 771\n      _suppressConnectErrors = true;                                                                                 // 772\n    },                                                                                                               // 773\n    onListening: function onListening(f) {                                                                           // 774\n      if (onListeningCallbacks) onListeningCallbacks.push(f);else f();                                               // 775\n    }                                                                                                                // 779\n  });                                                                                                                // 766\n                                                                                                                     //\n  // Let the rest of the packages (and Meteor.startup hooks) insert connect                                          //\n  // middlewares and update __meteor_runtime_config__, then keep going to set up                                     //\n  // actually serving HTML.                                                                                          //\n  main = function main(argv) {                                                                                       // 785\n    WebAppInternals.generateBoilerplate();                                                                           // 786\n                                                                                                                     //\n    // only start listening after all the startup code has run.                                                      //\n    var localPort = WebAppInternals.parsePort(process.env.PORT) || 0;                                                // 789\n    var host = process.env.BIND_IP;                                                                                  // 790\n    var localIp = host || '0.0.0.0';                                                                                 // 791\n    httpServer.listen(localPort, localIp, Meteor.bindEnvironment(function () {                                       // 792\n      if (process.env.METEOR_PRINT_ON_LISTEN) console.log(\"LISTENING\"); // must match run-app.js                     // 793\n                                                                                                                     //\n      var callbacks = onListeningCallbacks;                                                                          // 796\n      onListeningCallbacks = null;                                                                                   // 797\n      _.each(callbacks, function (x) {                                                                               // 798\n        x();                                                                                                         // 798\n      });                                                                                                            // 798\n    }, function (e) {                                                                                                // 800\n      console.error(\"Error listening:\", e);                                                                          // 801\n      console.error(e && e.stack);                                                                                   // 802\n    }));                                                                                                             // 803\n                                                                                                                     //\n    return 'DAEMON';                                                                                                 // 805\n  };                                                                                                                 // 806\n};                                                                                                                   // 807\n                                                                                                                     //\nrunWebAppServer();                                                                                                   // 810\n                                                                                                                     //\nvar inlineScriptsAllowed = true;                                                                                     // 813\n                                                                                                                     //\nWebAppInternals.inlineScriptsAllowed = function () {                                                                 // 815\n  return inlineScriptsAllowed;                                                                                       // 816\n};                                                                                                                   // 817\n                                                                                                                     //\nWebAppInternals.setInlineScriptsAllowed = function (value) {                                                         // 819\n  inlineScriptsAllowed = value;                                                                                      // 820\n  WebAppInternals.generateBoilerplate();                                                                             // 821\n};                                                                                                                   // 822\n                                                                                                                     //\nWebAppInternals.setBundledJsCssUrlRewriteHook = function (hookFn) {                                                  // 825\n  bundledJsCssUrlRewriteHook = hookFn;                                                                               // 826\n  WebAppInternals.generateBoilerplate();                                                                             // 827\n};                                                                                                                   // 828\n                                                                                                                     //\nWebAppInternals.setBundledJsCssPrefix = function (prefix) {                                                          // 830\n  var self = this;                                                                                                   // 831\n  self.setBundledJsCssUrlRewriteHook(function (url) {                                                                // 832\n    return prefix + url;                                                                                             // 834\n  });                                                                                                                // 835\n};                                                                                                                   // 836\n                                                                                                                     //\n// Packages can call `WebAppInternals.addStaticJs` to specify static                                                 //\n// JavaScript to be included in the app. This static JS will be inlined,                                             //\n// unless inline scripts have been disabled, in which case it will be                                                //\n// served under `/<sha1 of contents>`.                                                                               //\nvar additionalStaticJs = {};                                                                                         // 842\nWebAppInternals.addStaticJs = function (contents) {                                                                  // 843\n  additionalStaticJs[\"/\" + sha1(contents) + \".js\"] = contents;                                                       // 844\n};                                                                                                                   // 845\n                                                                                                                     //\n// Exported for tests                                                                                                //\nWebAppInternals.getBoilerplate = getBoilerplate;                                                                     // 848\nWebAppInternals.additionalStaticJs = additionalStaticJs;                                                             // 849\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/webapp/webapp_server.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.webapp = {}, {\n  WebApp: WebApp,\n  main: main,\n  WebAppInternals: WebAppInternals\n});\n\n})();\n\n//# sourceMappingURL=webapp.js.map\n"]},"hash":"5259661fce4d1ec0d9956de6493d12147b4e92be"}
