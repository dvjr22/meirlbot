{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/boilerplate-generator.js","filenameRelative":"/bundle/programs/server/packages/boilerplate-generator.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/boilerplate-generator.js.map","sourceFileName":"/bundle/programs/server/packages/boilerplate-generator.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"boilerplate-generator"},"ignored":false,"code":"(function () {\n\n  /* Imports */\n  var Meteor = Package.meteor.Meteor;\n  var global = Package.meteor.global;\n  var meteorEnv = Package.meteor.meteorEnv;\n  var _ = Package.underscore._;\n  var SpacebarsCompiler = Package['spacebars-compiler'].SpacebarsCompiler;\n  var Spacebars = Package.spacebars.Spacebars;\n  var HTML = Package.htmljs.HTML;\n  var Blaze = Package.blaze.Blaze;\n  var UI = Package.blaze.UI;\n  var Handlebars = Package.blaze.Handlebars;\n\n  /* Package-scope variables */\n  var Boilerplate;\n\n  (function () {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    //                                                                               //\n    // packages/boilerplate-generator/boilerplate-generator.js                       //\n    //                                                                               //\n    ///////////////////////////////////////////////////////////////////////////////////\n    //\n    var fs = Npm.require('fs');\n    var path = Npm.require('path');\n\n    // Copied from webapp_server\n    var readUtf8FileSync = function readUtf8FileSync(filename) {\n      return Meteor.wrapAsync(fs.readFile)(filename, 'utf8');\n    };\n\n    Boilerplate = function Boilerplate(arch, manifest, options) {\n      var self = this;\n      options = options || {};\n      self.template = _getTemplate(arch);\n      self.baseData = null;\n      self.func = null;\n\n      self._generateBoilerplateFromManifestAndSource(manifest, self.template, options);\n    };\n\n    // The 'extraData' argument can be used to extend 'self.baseData'. Its\n    // purpose is to allow you to specify data that you might not know at\n    // the time that you construct the Boilerplate object. (e.g. it is used\n    // by 'webapp' to specify data that is only known at request-time).\n    Boilerplate.prototype.toHTML = function (extraData) {\n      var self = this;\n\n      if (!self.baseData || !self.func) throw new Error('Boilerplate did not instantiate correctly.');\n\n      return \"<!DOCTYPE html>\\n\" + Blaze.toHTML(Blaze.With(_.extend(self.baseData, extraData), self.func));\n    };\n\n    // XXX Exported to allow client-side only changes to rebuild the boilerplate\n    // without requiring a full server restart.\n    // Produces an HTML string with given manifest and boilerplateSource.\n    // Optionally takes urlMapper in case urls from manifest need to be prefixed\n    // or rewritten.\n    // Optionally takes pathMapper for resolving relative file system paths.\n    // Optionally allows to override fields of the data context.\n    Boilerplate.prototype._generateBoilerplateFromManifestAndSource = function (manifest, boilerplateSource, options) {\n      var self = this;\n      // map to the identity by default\n      var urlMapper = options.urlMapper || _.identity;\n      var pathMapper = options.pathMapper || _.identity;\n\n      var boilerplateBaseData = {\n        css: [],\n        js: [],\n        head: '',\n        body: '',\n        meteorManifest: JSON.stringify(manifest)\n      };\n\n      // allow the caller to extend the default base data\n      _.extend(boilerplateBaseData, options.baseDataExtension);\n\n      _.each(manifest, function (item) {\n        var urlPath = urlMapper(item.url);\n        var itemObj = { url: urlPath };\n\n        if (options.inline) {\n          itemObj.scriptContent = readUtf8FileSync(pathMapper(item.path));\n          itemObj.inline = true;\n        }\n\n        if (item.type === 'css' && item.where === 'client') {\n          boilerplateBaseData.css.push(itemObj);\n        }\n        if (item.type === 'js' && item.where === 'client') {\n          boilerplateBaseData.js.push(itemObj);\n        }\n        if (item.type === 'head') {\n          boilerplateBaseData.head = readUtf8FileSync(pathMapper(item.path));\n        }\n        if (item.type === 'body') {\n          boilerplateBaseData.body = readUtf8FileSync(pathMapper(item.path));\n        }\n      });\n      var boilerplateRenderCode = SpacebarsCompiler.compile(boilerplateSource, { isBody: true });\n\n      // Note that we are actually depending on eval's local environment capture\n      // so that UI and HTML are visible to the eval'd code.\n      // XXX the template we are evaluating relies on the fact that UI is globally\n      // available.\n      global.UI = UI;\n      self.func = module.runModuleSetters(eval(boilerplateRenderCode));\n      self.baseData = boilerplateBaseData;\n    };\n\n    var _getTemplate = _.memoize(function (arch) {\n      var filename = 'boilerplate_' + arch + '.html';\n      return Assets.getText(filename);\n    });\n\n    ///////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  (function (pkg, symbols) {\n    for (var s in symbols) {\n      s in pkg || (pkg[s] = symbols[s]);\n    }\n  })(Package['boilerplate-generator'] = {}, {\n    Boilerplate: Boilerplate\n  });\n})();\n\n//# sourceMappingURL=boilerplate-generator.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/boilerplate-generator.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/boilerplate-generator.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar SpacebarsCompiler = Package['spacebars-compiler'].SpacebarsCompiler;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\n\n/* Package-scope variables */\nvar Boilerplate;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/boilerplate-generator/boilerplate-generator.js                       //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\nvar fs = Npm.require('fs');\nvar path = Npm.require('path');\n\n// Copied from webapp_server\nvar readUtf8FileSync = function (filename) {\n  return Meteor.wrapAsync(fs.readFile)(filename, 'utf8');\n};\n\nBoilerplate = function (arch, manifest, options) {\n  var self = this;\n  options = options || {};\n  self.template = _getTemplate(arch);\n  self.baseData = null;\n  self.func = null;\n\n  self._generateBoilerplateFromManifestAndSource(\n    manifest,\n    self.template,\n    options\n  );\n};\n\n// The 'extraData' argument can be used to extend 'self.baseData'. Its\n// purpose is to allow you to specify data that you might not know at\n// the time that you construct the Boilerplate object. (e.g. it is used\n// by 'webapp' to specify data that is only known at request-time).\nBoilerplate.prototype.toHTML = function (extraData) {\n  var self = this;\n\n  if (! self.baseData || ! self.func)\n    throw new Error('Boilerplate did not instantiate correctly.');\n\n  return  \"<!DOCTYPE html>\\n\" +\n    Blaze.toHTML(Blaze.With(_.extend(self.baseData, extraData),\n                            self.func));\n};\n\n// XXX Exported to allow client-side only changes to rebuild the boilerplate\n// without requiring a full server restart.\n// Produces an HTML string with given manifest and boilerplateSource.\n// Optionally takes urlMapper in case urls from manifest need to be prefixed\n// or rewritten.\n// Optionally takes pathMapper for resolving relative file system paths.\n// Optionally allows to override fields of the data context.\nBoilerplate.prototype._generateBoilerplateFromManifestAndSource =\n  function (manifest, boilerplateSource, options) {\n    var self = this;\n    // map to the identity by default\n    var urlMapper = options.urlMapper || _.identity;\n    var pathMapper = options.pathMapper || _.identity;\n\n    var boilerplateBaseData = {\n      css: [],\n      js: [],\n      head: '',\n      body: '',\n      meteorManifest: JSON.stringify(manifest)\n    };\n\n    // allow the caller to extend the default base data\n    _.extend(boilerplateBaseData, options.baseDataExtension);\n\n    _.each(manifest, function (item) {\n      var urlPath = urlMapper(item.url);\n      var itemObj = { url: urlPath };\n\n      if (options.inline) {\n        itemObj.scriptContent = readUtf8FileSync(\n          pathMapper(item.path));\n        itemObj.inline = true;\n      }\n\n      if (item.type === 'css' && item.where === 'client') {\n        boilerplateBaseData.css.push(itemObj);\n      }\n      if (item.type === 'js' && item.where === 'client') {\n        boilerplateBaseData.js.push(itemObj);\n      }\n      if (item.type === 'head') {\n        boilerplateBaseData.head =\n          readUtf8FileSync(pathMapper(item.path));\n      }\n      if (item.type === 'body') {\n        boilerplateBaseData.body =\n          readUtf8FileSync(pathMapper(item.path));\n      }\n    });\n    var boilerplateRenderCode = SpacebarsCompiler.compile(\n      boilerplateSource, { isBody: true });\n\n    // Note that we are actually depending on eval's local environment capture\n    // so that UI and HTML are visible to the eval'd code.\n    // XXX the template we are evaluating relies on the fact that UI is globally\n      // available.\n    global.UI = UI;\n    self.func = eval(boilerplateRenderCode);\n    self.baseData = boilerplateBaseData;\n};\n\nvar _getTemplate = _.memoize(function (arch) {\n  var filename = 'boilerplate_' + arch + '.html';\n  return Assets.getText(filename);\n});\n\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['boilerplate-generator'] = {}, {\n  Boilerplate: Boilerplate\n});\n\n})();\n\n//# sourceMappingURL=boilerplate-generator.js.map\n"]},"hash":"bd787e1572591b4b1922b86f456ad5d1bffc9be2"}
