{"metadata":{"usedHelpers":["typeof"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/ddp-common.js","filenameRelative":"/bundle/programs/server/packages/ddp-common.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/ddp-common.js.map","sourceFileName":"/bundle/programs/server/packages/ddp-common.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ddp-common"},"ignored":false,"code":"var _typeof;module.import('babel-runtime/helpers/typeof',{\"default\":function(v){_typeof=v}});\n(function () {\n\n  /* Imports */\n  var Meteor = Package.meteor.Meteor;\n  var global = Package.meteor.global;\n  var meteorEnv = Package.meteor.meteorEnv;\n  var check = Package.check.check;\n  var Match = Package.check.Match;\n  var Random = Package.random.Random;\n  var EJSON = Package.ejson.EJSON;\n  var _ = Package.underscore._;\n  var Tracker = Package.tracker.Tracker;\n  var Deps = Package.tracker.Deps;\n  var Retry = Package.retry.Retry;\n\n  /* Package-scope variables */\n  var DDPCommon;\n\n  (function () {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                   //\n    // packages/ddp-common/namespace.js                                                                  //\n    //                                                                                                   //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    /**\n     * @namespace DDPCommon\n     * @summary Namespace for DDPCommon-related methods/classes. Shared between \n     * `ddp-client` and `ddp-server`, where the ddp-client is the implementation\n     * of a ddp client for both client AND server; and the ddp server is the\n     * implementation of the livedata server and stream server. Common \n     * functionality shared between both can be shared under this namespace\n     */\n    DDPCommon = {};\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                   //\n    // packages/ddp-common/heartbeat.js                                                                  //\n    //                                                                                                   //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Heartbeat options:\n    //   heartbeatInterval: interval to send pings, in milliseconds.\n    //   heartbeatTimeout: timeout to close the connection if a reply isn't\n    //     received, in milliseconds.\n    //   sendPing: function to call to send a ping on the connection.\n    //   onTimeout: function to call to close the connection.\n\n    DDPCommon.Heartbeat = function (options) {\n      var self = this;\n\n      self.heartbeatInterval = options.heartbeatInterval;\n      self.heartbeatTimeout = options.heartbeatTimeout;\n      self._sendPing = options.sendPing;\n      self._onTimeout = options.onTimeout;\n      self._seenPacket = false;\n\n      self._heartbeatIntervalHandle = null;\n      self._heartbeatTimeoutHandle = null;\n    };\n\n    _.extend(DDPCommon.Heartbeat.prototype, {\n      stop: function stop() {\n        var self = this;\n        self._clearHeartbeatIntervalTimer();\n        self._clearHeartbeatTimeoutTimer();\n      },\n\n      start: function start() {\n        var self = this;\n        self.stop();\n        self._startHeartbeatIntervalTimer();\n      },\n\n      _startHeartbeatIntervalTimer: function _startHeartbeatIntervalTimer() {\n        var self = this;\n        self._heartbeatIntervalHandle = Meteor.setInterval(_.bind(self._heartbeatIntervalFired, self), self.heartbeatInterval);\n      },\n\n      _startHeartbeatTimeoutTimer: function _startHeartbeatTimeoutTimer() {\n        var self = this;\n        self._heartbeatTimeoutHandle = Meteor.setTimeout(_.bind(self._heartbeatTimeoutFired, self), self.heartbeatTimeout);\n      },\n\n      _clearHeartbeatIntervalTimer: function _clearHeartbeatIntervalTimer() {\n        var self = this;\n        if (self._heartbeatIntervalHandle) {\n          Meteor.clearInterval(self._heartbeatIntervalHandle);\n          self._heartbeatIntervalHandle = null;\n        }\n      },\n\n      _clearHeartbeatTimeoutTimer: function _clearHeartbeatTimeoutTimer() {\n        var self = this;\n        if (self._heartbeatTimeoutHandle) {\n          Meteor.clearTimeout(self._heartbeatTimeoutHandle);\n          self._heartbeatTimeoutHandle = null;\n        }\n      },\n\n      // The heartbeat interval timer is fired when we should send a ping.\n      _heartbeatIntervalFired: function _heartbeatIntervalFired() {\n        var self = this;\n        // don't send ping if we've seen a packet since we last checked,\n        // *or* if we have already sent a ping and are awaiting a timeout.\n        // That shouldn't happen, but it's possible if\n        // `self.heartbeatInterval` is smaller than\n        // `self.heartbeatTimeout`.\n        if (!self._seenPacket && !self._heartbeatTimeoutHandle) {\n          self._sendPing();\n          // Set up timeout, in case a pong doesn't arrive in time.\n          self._startHeartbeatTimeoutTimer();\n        }\n        self._seenPacket = false;\n      },\n\n      // The heartbeat timeout timer is fired when we sent a ping, but we\n      // timed out waiting for the pong.\n      _heartbeatTimeoutFired: function _heartbeatTimeoutFired() {\n        var self = this;\n        self._heartbeatTimeoutHandle = null;\n        self._onTimeout();\n      },\n\n      messageReceived: function messageReceived() {\n        var self = this;\n        // Tell periodic checkin that we have seen a packet, and thus it\n        // does not need to send a ping this cycle.\n        self._seenPacket = true;\n        // If we were waiting for a pong, we got it.\n        if (self._heartbeatTimeoutHandle) {\n          self._clearHeartbeatTimeoutTimer();\n        }\n      }\n    });\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                   //\n    // packages/ddp-common/utils.js                                                                      //\n    //                                                                                                   //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    DDPCommon.SUPPORTED_DDP_VERSIONS = ['1', 'pre2', 'pre1'];\n\n    DDPCommon.parseDDP = function (stringMessage) {\n      try {\n        var msg = JSON.parse(stringMessage);\n      } catch (e) {\n        Meteor._debug(\"Discarding message with invalid JSON\", stringMessage);\n        return null;\n      }\n      // DDP messages must be objects.\n      if (msg === null || (typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) !== 'object') {\n        Meteor._debug(\"Discarding non-object DDP message\", stringMessage);\n        return null;\n      }\n\n      // massage msg to get it into \"abstract ddp\" rather than \"wire ddp\" format.\n\n      // switch between \"cleared\" rep of unsetting fields and \"undefined\"\n      // rep of same\n      if (_.has(msg, 'cleared')) {\n        if (!_.has(msg, 'fields')) msg.fields = {};\n        _.each(msg.cleared, function (clearKey) {\n          msg.fields[clearKey] = undefined;\n        });\n        delete msg.cleared;\n      }\n\n      _.each(['fields', 'params', 'result'], function (field) {\n        if (_.has(msg, field)) msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);\n      });\n\n      return msg;\n    };\n\n    DDPCommon.stringifyDDP = function (msg) {\n      var copy = EJSON.clone(msg);\n      // swizzle 'changed' messages from 'fields undefined' rep to 'fields\n      // and cleared' rep\n      if (_.has(msg, 'fields')) {\n        var cleared = [];\n        _.each(msg.fields, function (value, key) {\n          if (value === undefined) {\n            cleared.push(key);\n            delete copy.fields[key];\n          }\n        });\n        if (!_.isEmpty(cleared)) copy.cleared = cleared;\n        if (_.isEmpty(copy.fields)) delete copy.fields;\n      }\n      // adjust types to basic\n      _.each(['fields', 'params', 'result'], function (field) {\n        if (_.has(copy, field)) copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);\n      });\n      if (msg.id && typeof msg.id !== 'string') {\n        throw new Error(\"Message id is not a string\");\n      }\n      return JSON.stringify(copy);\n    };\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                   //\n    // packages/ddp-common/method_invocation.js                                                          //\n    //                                                                                                   //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Instance name is this because it is usually referred to as this inside a\n    // method definition\n    /**\n     * @summary The state for a single invocation of a method, referenced by this\n     * inside a method definition.\n     * @param {Object} options\n     * @instanceName this\n     */\n    DDPCommon.MethodInvocation = function (options) {\n      var self = this;\n\n      // true if we're running not the actual method, but a stub (that is,\n      // if we're on a client (which may be a browser, or in the future a\n      // server connecting to another server) and presently running a\n      // simulation of a server-side method for latency compensation\n      // purposes). not currently true except in a client such as a browser,\n      // since there's usually no point in running stubs unless you have a\n      // zero-latency connection to the user.\n\n      /**\n       * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.\n       * @locus Anywhere\n       * @name  isSimulation\n       * @memberOf DDPCommon.MethodInvocation\n       * @instance\n       * @type {Boolean}\n       */\n      this.isSimulation = options.isSimulation;\n\n      // call this function to allow other method invocations (from the\n      // same client) to continue running without waiting for this one to\n      // complete.\n      this._unblock = options.unblock || function () {};\n      this._calledUnblock = false;\n\n      // current user id\n\n      /**\n       * @summary The id of the user that made this method call, or `null` if no user was logged in.\n       * @locus Anywhere\n       * @name  userId\n       * @memberOf DDPCommon.MethodInvocation\n       * @instance\n       */\n      this.userId = options.userId;\n\n      // sets current user id in all appropriate server contexts and\n      // reruns subscriptions\n      this._setUserId = options.setUserId || function () {};\n\n      // On the server, the connection this method call came in on.\n\n      /**\n       * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`. \n       * @locus Server\n       * @name  connection\n       * @memberOf DDPCommon.MethodInvocation\n       * @instance\n       */\n      this.connection = options.connection;\n\n      // The seed for randomStream value generation\n      this.randomSeed = options.randomSeed;\n\n      // This is set by RandomStream.get; and holds the random stream state\n      this.randomStream = null;\n    };\n\n    _.extend(DDPCommon.MethodInvocation.prototype, {\n      /**\n       * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\n       * @locus Server\n       * @memberOf DDPCommon.MethodInvocation\n       * @instance\n       */\n      unblock: function unblock() {\n        var self = this;\n        self._calledUnblock = true;\n        self._unblock();\n      },\n\n      /**\n       * @summary Set the logged in user.\n       * @locus Server\n       * @memberOf DDPCommon.MethodInvocation\n       * @instance\n       * @param {String | null} userId The value that should be returned by `userId` on this connection.\n       */\n      setUserId: function setUserId(userId) {\n        var self = this;\n        if (self._calledUnblock) throw new Error(\"Can't call setUserId in a method after calling unblock\");\n        self.userId = userId;\n        self._setUserId(userId);\n      }\n    });\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                   //\n    // packages/ddp-common/random_stream.js                                                              //\n    //                                                                                                   //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // RandomStream allows for generation of pseudo-random values, from a seed.\n    //\n    // We use this for consistent 'random' numbers across the client and server.\n    // We want to generate probably-unique IDs on the client, and we ideally want\n    // the server to generate the same IDs when it executes the method.\n    //\n    // For generated values to be the same, we must seed ourselves the same way,\n    // and we must keep track of the current state of our pseudo-random generators.\n    // We call this state the scope. By default, we use the current DDP method\n    // invocation as our scope.  DDP now allows the client to specify a randomSeed.\n    // If a randomSeed is provided it will be used to seed our random sequences.\n    // In this way, client and server method calls will generate the same values.\n    //\n    // We expose multiple named streams; each stream is independent\n    // and is seeded differently (but predictably from the name).\n    // By using multiple streams, we support reordering of requests,\n    // as long as they occur on different streams.\n    //\n    // @param options {Optional Object}\n    //   seed: Array or value - Seed value(s) for the generator.\n    //                          If an array, will be used as-is\n    //                          If a value, will be converted to a single-value array\n    //                          If omitted, a random array will be used as the seed.\n    DDPCommon.RandomStream = function (options) {\n      var self = this;\n\n      this.seed = [].concat(options.seed || randomToken());\n\n      this.sequences = {};\n    };\n\n    // Returns a random string of sufficient length for a random seed.\n    // This is a placeholder function; a similar function is planned\n    // for Random itself; when that is added we should remove this function,\n    // and call Random's randomToken instead.\n    function randomToken() {\n      return Random.hexString(20);\n    };\n\n    // Returns the random stream with the specified name, in the specified\n    // scope. If a scope is passed, then we use that to seed a (not\n    // cryptographically secure) PRNG using the fast Alea algorithm.  If\n    // scope is null (or otherwise falsey) then we use a generated seed.\n    //\n    // However, scope will normally be the current DDP method invocation,\n    // so we'll use the stream with the specified name, and we should get\n    // consistent values on the client and server sides of a method call.\n    DDPCommon.RandomStream.get = function (scope, name) {\n      if (!name) {\n        name = \"default\";\n      }\n      if (!scope) {\n        // There was no scope passed in; the sequence won't actually be\n        // reproducible. but make it fast (and not cryptographically\n        // secure) anyways, so that the behavior is similar to what you'd\n        // get by passing in a scope.\n        return Random.insecure;\n      }\n      var randomStream = scope.randomStream;\n      if (!randomStream) {\n        scope.randomStream = randomStream = new DDPCommon.RandomStream({\n          seed: scope.randomSeed\n        });\n      }\n      return randomStream._sequence(name);\n    };\n\n    // Creates a randomSeed for passing to a method call.\n    // Note that we take enclosing as an argument,\n    // though we expect it to be DDP._CurrentInvocation.get()\n    // However, we often evaluate makeRpcSeed lazily, and thus the relevant\n    // invocation may not be the one currently in scope.\n    // If enclosing is null, we'll use Random and values won't be repeatable.\n    DDPCommon.makeRpcSeed = function (enclosing, methodName) {\n      var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);\n      return stream.hexString(20);\n    };\n\n    _.extend(DDPCommon.RandomStream.prototype, {\n      // Get a random sequence with the specified name, creating it if does not exist.\n      // New sequences are seeded with the seed concatenated with the name.\n      // By passing a seed into Random.create, we use the Alea generator.\n      _sequence: function _sequence(name) {\n        var self = this;\n\n        var sequence = self.sequences[name] || null;\n        if (sequence === null) {\n          var sequenceSeed = self.seed.concat(name);\n          for (var i = 0; i < sequenceSeed.length; i++) {\n            if (_.isFunction(sequenceSeed[i])) {\n              sequenceSeed[i] = sequenceSeed[i]();\n            }\n          }\n          self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);\n        }\n        return sequence;\n      }\n    });\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  (function (pkg, symbols) {\n    for (var s in symbols) {\n      s in pkg || (pkg[s] = symbols[s]);\n    }\n  })(Package['ddp-common'] = {}, {\n    DDPCommon: DDPCommon\n  });\n})();\n\n//# sourceMappingURL=ddp-common.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/ddp-common.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/ddp-common.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\n\n/* Package-scope variables */\nvar DDPCommon;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/namespace.js                                                                  //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n/**\n * @namespace DDPCommon\n * @summary Namespace for DDPCommon-related methods/classes. Shared between \n * `ddp-client` and `ddp-server`, where the ddp-client is the implementation\n * of a ddp client for both client AND server; and the ddp server is the\n * implementation of the livedata server and stream server. Common \n * functionality shared between both can be shared under this namespace\n */\nDDPCommon = {};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/heartbeat.js                                                                  //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// Heartbeat options:\n//   heartbeatInterval: interval to send pings, in milliseconds.\n//   heartbeatTimeout: timeout to close the connection if a reply isn't\n//     received, in milliseconds.\n//   sendPing: function to call to send a ping on the connection.\n//   onTimeout: function to call to close the connection.\n\nDDPCommon.Heartbeat = function (options) {\n  var self = this;\n\n  self.heartbeatInterval = options.heartbeatInterval;\n  self.heartbeatTimeout = options.heartbeatTimeout;\n  self._sendPing = options.sendPing;\n  self._onTimeout = options.onTimeout;\n  self._seenPacket = false;\n\n  self._heartbeatIntervalHandle = null;\n  self._heartbeatTimeoutHandle = null;\n};\n\n_.extend(DDPCommon.Heartbeat.prototype, {\n  stop: function () {\n    var self = this;\n    self._clearHeartbeatIntervalTimer();\n    self._clearHeartbeatTimeoutTimer();\n  },\n\n  start: function () {\n    var self = this;\n    self.stop();\n    self._startHeartbeatIntervalTimer();\n  },\n\n  _startHeartbeatIntervalTimer: function () {\n    var self = this;\n    self._heartbeatIntervalHandle = Meteor.setInterval(\n      _.bind(self._heartbeatIntervalFired, self),\n      self.heartbeatInterval\n    );\n  },\n\n  _startHeartbeatTimeoutTimer: function () {\n    var self = this;\n    self._heartbeatTimeoutHandle = Meteor.setTimeout(\n      _.bind(self._heartbeatTimeoutFired, self),\n      self.heartbeatTimeout\n    );\n  },\n\n  _clearHeartbeatIntervalTimer: function () {\n    var self = this;\n    if (self._heartbeatIntervalHandle) {\n      Meteor.clearInterval(self._heartbeatIntervalHandle);\n      self._heartbeatIntervalHandle = null;\n    }\n  },\n\n  _clearHeartbeatTimeoutTimer: function () {\n    var self = this;\n    if (self._heartbeatTimeoutHandle) {\n      Meteor.clearTimeout(self._heartbeatTimeoutHandle);\n      self._heartbeatTimeoutHandle = null;\n    }\n  },\n\n  // The heartbeat interval timer is fired when we should send a ping.\n  _heartbeatIntervalFired: function () {\n    var self = this;\n    // don't send ping if we've seen a packet since we last checked,\n    // *or* if we have already sent a ping and are awaiting a timeout.\n    // That shouldn't happen, but it's possible if\n    // `self.heartbeatInterval` is smaller than\n    // `self.heartbeatTimeout`.\n    if (! self._seenPacket && ! self._heartbeatTimeoutHandle) {\n      self._sendPing();\n      // Set up timeout, in case a pong doesn't arrive in time.\n      self._startHeartbeatTimeoutTimer();\n    }\n    self._seenPacket = false;\n  },\n\n  // The heartbeat timeout timer is fired when we sent a ping, but we\n  // timed out waiting for the pong.\n  _heartbeatTimeoutFired: function () {\n    var self = this;\n    self._heartbeatTimeoutHandle = null;\n    self._onTimeout();\n  },\n\n  messageReceived: function () {\n    var self = this;\n    // Tell periodic checkin that we have seen a packet, and thus it\n    // does not need to send a ping this cycle.\n    self._seenPacket = true;\n    // If we were waiting for a pong, we got it.\n    if (self._heartbeatTimeoutHandle) {\n      self._clearHeartbeatTimeoutTimer();\n    }\n  }\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/utils.js                                                                      //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nDDPCommon.SUPPORTED_DDP_VERSIONS = [ '1', 'pre2', 'pre1' ];\n\nDDPCommon.parseDDP = function (stringMessage) {\n  try {\n    var msg = JSON.parse(stringMessage);\n  } catch (e) {\n    Meteor._debug(\"Discarding message with invalid JSON\", stringMessage);\n    return null;\n  }\n  // DDP messages must be objects.\n  if (msg === null || typeof msg !== 'object') {\n    Meteor._debug(\"Discarding non-object DDP message\", stringMessage);\n    return null;\n  }\n\n  // massage msg to get it into \"abstract ddp\" rather than \"wire ddp\" format.\n\n  // switch between \"cleared\" rep of unsetting fields and \"undefined\"\n  // rep of same\n  if (_.has(msg, 'cleared')) {\n    if (!_.has(msg, 'fields'))\n      msg.fields = {};\n    _.each(msg.cleared, function (clearKey) {\n      msg.fields[clearKey] = undefined;\n    });\n    delete msg.cleared;\n  }\n\n  _.each(['fields', 'params', 'result'], function (field) {\n    if (_.has(msg, field))\n      msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);\n  });\n\n  return msg;\n};\n\nDDPCommon.stringifyDDP = function (msg) {\n  var copy = EJSON.clone(msg);\n  // swizzle 'changed' messages from 'fields undefined' rep to 'fields\n  // and cleared' rep\n  if (_.has(msg, 'fields')) {\n    var cleared = [];\n    _.each(msg.fields, function (value, key) {\n      if (value === undefined) {\n        cleared.push(key);\n        delete copy.fields[key];\n      }\n    });\n    if (!_.isEmpty(cleared))\n      copy.cleared = cleared;\n    if (_.isEmpty(copy.fields))\n      delete copy.fields;\n  }\n  // adjust types to basic\n  _.each(['fields', 'params', 'result'], function (field) {\n    if (_.has(copy, field))\n      copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);\n  });\n  if (msg.id && typeof msg.id !== 'string') {\n    throw new Error(\"Message id is not a string\");\n  }\n  return JSON.stringify(copy);\n};\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/method_invocation.js                                                          //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// Instance name is this because it is usually referred to as this inside a\n// method definition\n/**\n * @summary The state for a single invocation of a method, referenced by this\n * inside a method definition.\n * @param {Object} options\n * @instanceName this\n */\nDDPCommon.MethodInvocation = function (options) {\n  var self = this;\n\n  // true if we're running not the actual method, but a stub (that is,\n  // if we're on a client (which may be a browser, or in the future a\n  // server connecting to another server) and presently running a\n  // simulation of a server-side method for latency compensation\n  // purposes). not currently true except in a client such as a browser,\n  // since there's usually no point in running stubs unless you have a\n  // zero-latency connection to the user.\n\n  /**\n   * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.\n   * @locus Anywhere\n   * @name  isSimulation\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   * @type {Boolean}\n   */\n  this.isSimulation = options.isSimulation;\n\n  // call this function to allow other method invocations (from the\n  // same client) to continue running without waiting for this one to\n  // complete.\n  this._unblock = options.unblock || function () {};\n  this._calledUnblock = false;\n\n  // current user id\n\n  /**\n   * @summary The id of the user that made this method call, or `null` if no user was logged in.\n   * @locus Anywhere\n   * @name  userId\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   */\n  this.userId = options.userId;\n\n  // sets current user id in all appropriate server contexts and\n  // reruns subscriptions\n  this._setUserId = options.setUserId || function () {};\n\n  // On the server, the connection this method call came in on.\n\n  /**\n   * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`. \n   * @locus Server\n   * @name  connection\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   */\n  this.connection = options.connection;\n\n  // The seed for randomStream value generation\n  this.randomSeed = options.randomSeed;\n\n  // This is set by RandomStream.get; and holds the random stream state\n  this.randomStream = null;\n};\n\n_.extend(DDPCommon.MethodInvocation.prototype, {\n  /**\n   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\n   * @locus Server\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   */\n  unblock: function () {\n    var self = this;\n    self._calledUnblock = true;\n    self._unblock();\n  },\n\n  /**\n   * @summary Set the logged in user.\n   * @locus Server\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   * @param {String | null} userId The value that should be returned by `userId` on this connection.\n   */\n  setUserId: function(userId) {\n    var self = this;\n    if (self._calledUnblock)\n      throw new Error(\"Can't call setUserId in a method after calling unblock\");\n    self.userId = userId;\n    self._setUserId(userId);\n  }\n});\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/random_stream.js                                                              //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// RandomStream allows for generation of pseudo-random values, from a seed.\n//\n// We use this for consistent 'random' numbers across the client and server.\n// We want to generate probably-unique IDs on the client, and we ideally want\n// the server to generate the same IDs when it executes the method.\n//\n// For generated values to be the same, we must seed ourselves the same way,\n// and we must keep track of the current state of our pseudo-random generators.\n// We call this state the scope. By default, we use the current DDP method\n// invocation as our scope.  DDP now allows the client to specify a randomSeed.\n// If a randomSeed is provided it will be used to seed our random sequences.\n// In this way, client and server method calls will generate the same values.\n//\n// We expose multiple named streams; each stream is independent\n// and is seeded differently (but predictably from the name).\n// By using multiple streams, we support reordering of requests,\n// as long as they occur on different streams.\n//\n// @param options {Optional Object}\n//   seed: Array or value - Seed value(s) for the generator.\n//                          If an array, will be used as-is\n//                          If a value, will be converted to a single-value array\n//                          If omitted, a random array will be used as the seed.\nDDPCommon.RandomStream = function (options) {\n  var self = this;\n\n  this.seed = [].concat(options.seed || randomToken());\n\n  this.sequences = {};\n};\n\n// Returns a random string of sufficient length for a random seed.\n// This is a placeholder function; a similar function is planned\n// for Random itself; when that is added we should remove this function,\n// and call Random's randomToken instead.\nfunction randomToken() {\n  return Random.hexString(20);\n};\n\n// Returns the random stream with the specified name, in the specified\n// scope. If a scope is passed, then we use that to seed a (not\n// cryptographically secure) PRNG using the fast Alea algorithm.  If\n// scope is null (or otherwise falsey) then we use a generated seed.\n//\n// However, scope will normally be the current DDP method invocation,\n// so we'll use the stream with the specified name, and we should get\n// consistent values on the client and server sides of a method call.\nDDPCommon.RandomStream.get = function (scope, name) {\n  if (!name) {\n    name = \"default\";\n  }\n  if (!scope) {\n    // There was no scope passed in; the sequence won't actually be\n    // reproducible. but make it fast (and not cryptographically\n    // secure) anyways, so that the behavior is similar to what you'd\n    // get by passing in a scope.\n    return Random.insecure;\n  }\n  var randomStream = scope.randomStream;\n  if (!randomStream) {\n    scope.randomStream = randomStream = new DDPCommon.RandomStream({\n      seed: scope.randomSeed\n    });\n  }\n  return randomStream._sequence(name);\n};\n\n\n// Creates a randomSeed for passing to a method call.\n// Note that we take enclosing as an argument,\n// though we expect it to be DDP._CurrentInvocation.get()\n// However, we often evaluate makeRpcSeed lazily, and thus the relevant\n// invocation may not be the one currently in scope.\n// If enclosing is null, we'll use Random and values won't be repeatable.\nDDPCommon.makeRpcSeed = function (enclosing, methodName) {\n  var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);\n  return stream.hexString(20);\n};\n\n_.extend(DDPCommon.RandomStream.prototype, {\n  // Get a random sequence with the specified name, creating it if does not exist.\n  // New sequences are seeded with the seed concatenated with the name.\n  // By passing a seed into Random.create, we use the Alea generator.\n  _sequence: function (name) {\n    var self = this;\n\n    var sequence = self.sequences[name] || null;\n    if (sequence === null) {\n      var sequenceSeed = self.seed.concat(name);\n      for (var i = 0; i < sequenceSeed.length; i++) {\n        if (_.isFunction(sequenceSeed[i])) {\n          sequenceSeed[i] = sequenceSeed[i]();\n        }\n      }\n      self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);\n    }\n    return sequence;\n  }\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['ddp-common'] = {}, {\n  DDPCommon: DDPCommon\n});\n\n})();\n\n//# sourceMappingURL=ddp-common.js.map\n"]},"hash":"d9110b5504ba8ce7a033194ae9be02c9d96fa4ce"}
