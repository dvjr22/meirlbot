{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/webapp-hashing.js","filenameRelative":"/bundle/programs/server/packages/webapp-hashing.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/webapp-hashing.js.map","sourceFileName":"/bundle/programs/server/packages/webapp-hashing.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"webapp-hashing"},"ignored":false,"code":"(function () {\n\n  /* Imports */\n  var Meteor = Package.meteor.Meteor;\n  var global = Package.meteor.global;\n  var meteorEnv = Package.meteor.meteorEnv;\n  var ECMAScript = Package.ecmascript.ECMAScript;\n  var _ = Package.underscore._;\n  var meteorInstall = Package.modules.meteorInstall;\n  var Buffer = Package.modules.Buffer;\n  var process = Package.modules.process;\n  var _Symbol = Package['ecmascript-runtime'].Symbol;\n  var Map = Package['ecmascript-runtime'].Map;\n  var Set = Package['ecmascript-runtime'].Set;\n  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\n  var Promise = Package.promise.Promise;\n\n  /* Package-scope variables */\n  var WebAppHashing;\n\n  var require = meteorInstall({ \"node_modules\": { \"meteor\": { \"webapp-hashing\": { \"webapp-hashing.js\": function webappHashingJs(require) {\n\n            //////////////////////////////////////////////////////////////////////////////////////////////////\n            //                                                                                              //\n            // packages/webapp-hashing/webapp-hashing.js                                                    //\n            //                                                                                              //\n            //////////////////////////////////////////////////////////////////////////////////////////////////\n            //\n            var crypto = Npm.require(\"crypto\"); // 1\n            //\n            WebAppHashing = {}; // 3\n            //\n            // Calculate a hash of all the client resources downloaded by the                               //\n            // browser, including the application HTML, runtime config, code, and                           //\n            // static files.                                                                                //\n            //                                                                                              //\n            // This hash *must* change if any resources seen by the browser                                 //\n            // change, and ideally *doesn't* change for any server-only changes                             //\n            // (but the second is a performance enhancement, not a hard                                     //\n            // requirement).                                                                                //\n            //\n            WebAppHashing.calculateClientHash = function (manifest, includeFilter, runtimeConfigOverride) {\n              var hash = crypto.createHash('sha1'); // 16\n              //\n              // Omit the old hashed client values in the new hash. These may be                            //\n              // modified in the new boilerplate.                                                           //\n              var runtimeCfg = _.omit(__meteor_runtime_config__, ['autoupdateVersion', 'autoupdateVersionRefreshable', 'autoupdateVersionCordova']);\n              //\n              if (runtimeConfigOverride) {\n                // 24\n                runtimeCfg = runtimeConfigOverride; // 25\n              } // 26\n              //\n              hash.update(JSON.stringify(runtimeCfg, 'utf8')); // 28\n              //\n              _.each(manifest, function (resource) {\n                // 30\n                if ((!includeFilter || includeFilter(resource.type)) && (resource.where === 'client' || resource.where === 'internal')) {\n                  hash.update(resource.path); // 33\n                  hash.update(resource.hash); // 34\n                } // 35\n              }); // 36\n              return hash.digest('hex'); // 37\n            }; // 38\n            //\n            WebAppHashing.calculateCordovaCompatibilityHash = function (platformVersion, pluginVersions) {\n              // 40\n              var hash = crypto.createHash('sha1'); // 42\n              //\n              hash.update(platformVersion); // 44\n              //\n              // Sort plugins first so iteration order doesn't affect the hash                              //\n              var plugins = Object.keys(pluginVersions).sort(); // 47\n              for (var _iterator = plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[_Symbol.iterator]();;) {\n                var _ref; // 48\n                //\n                if (_isArray) {\n                  // 48\n                  if (_i >= _iterator.length) break; // 48\n                  _ref = _iterator[_i++]; // 48\n                } else {\n                    // 48\n                    _i = _iterator.next(); // 48\n                    if (_i.done) break; // 48\n                    _ref = _i.value; // 48\n                  } // 48\n                //\n                var plugin = _ref; // 48\n                //\n                var version = pluginVersions[plugin]; // 49\n                hash.update(plugin); // 50\n                hash.update(version); // 51\n              } // 52\n              //\n              return hash.digest('hex'); // 54\n            }; // 55\n            //////////////////////////////////////////////////////////////////////////////////////////////////\n          } } } } }, { \"extensions\": [\".js\", \".json\"] });\n  require(\"./node_modules/meteor/webapp-hashing/webapp-hashing.js\");\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  (function (pkg, symbols) {\n    for (var s in symbols) {\n      s in pkg || (pkg[s] = symbols[s]);\n    }\n  })(Package['webapp-hashing'] = {}, {\n    WebAppHashing: WebAppHashing\n  });\n})();\n\n//# sourceMappingURL=webapp-hashing.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/webapp-hashing.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/webapp-hashing.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar _ = Package.underscore._;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar WebAppHashing;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"webapp-hashing\":{\"webapp-hashing.js\":function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/webapp-hashing/webapp-hashing.js                                                    //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nvar crypto = Npm.require(\"crypto\");                                                             // 1\n                                                                                                //\nWebAppHashing = {};                                                                             // 3\n                                                                                                //\n// Calculate a hash of all the client resources downloaded by the                               //\n// browser, including the application HTML, runtime config, code, and                           //\n// static files.                                                                                //\n//                                                                                              //\n// This hash *must* change if any resources seen by the browser                                 //\n// change, and ideally *doesn't* change for any server-only changes                             //\n// (but the second is a performance enhancement, not a hard                                     //\n// requirement).                                                                                //\n                                                                                                //\nWebAppHashing.calculateClientHash = function (manifest, includeFilter, runtimeConfigOverride) {\n  var hash = crypto.createHash('sha1');                                                         // 16\n                                                                                                //\n  // Omit the old hashed client values in the new hash. These may be                            //\n  // modified in the new boilerplate.                                                           //\n  var runtimeCfg = _.omit(__meteor_runtime_config__, ['autoupdateVersion', 'autoupdateVersionRefreshable', 'autoupdateVersionCordova']);\n                                                                                                //\n  if (runtimeConfigOverride) {                                                                  // 24\n    runtimeCfg = runtimeConfigOverride;                                                         // 25\n  }                                                                                             // 26\n                                                                                                //\n  hash.update(JSON.stringify(runtimeCfg, 'utf8'));                                              // 28\n                                                                                                //\n  _.each(manifest, function (resource) {                                                        // 30\n    if ((!includeFilter || includeFilter(resource.type)) && (resource.where === 'client' || resource.where === 'internal')) {\n      hash.update(resource.path);                                                               // 33\n      hash.update(resource.hash);                                                               // 34\n    }                                                                                           // 35\n  });                                                                                           // 36\n  return hash.digest('hex');                                                                    // 37\n};                                                                                              // 38\n                                                                                                //\nWebAppHashing.calculateCordovaCompatibilityHash = function (platformVersion, pluginVersions) {  // 40\n  var hash = crypto.createHash('sha1');                                                         // 42\n                                                                                                //\n  hash.update(platformVersion);                                                                 // 44\n                                                                                                //\n  // Sort plugins first so iteration order doesn't affect the hash                              //\n  var plugins = Object.keys(pluginVersions).sort();                                             // 47\n  for (var _iterator = plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;                                                                                   // 48\n                                                                                                //\n    if (_isArray) {                                                                             // 48\n      if (_i >= _iterator.length) break;                                                        // 48\n      _ref = _iterator[_i++];                                                                   // 48\n    } else {                                                                                    // 48\n      _i = _iterator.next();                                                                    // 48\n      if (_i.done) break;                                                                       // 48\n      _ref = _i.value;                                                                          // 48\n    }                                                                                           // 48\n                                                                                                //\n    var plugin = _ref;                                                                          // 48\n                                                                                                //\n    var version = pluginVersions[plugin];                                                       // 49\n    hash.update(plugin);                                                                        // 50\n    hash.update(version);                                                                       // 51\n  }                                                                                             // 52\n                                                                                                //\n  return hash.digest('hex');                                                                    // 54\n};                                                                                              // 55\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/webapp-hashing/webapp-hashing.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['webapp-hashing'] = {}, {\n  WebAppHashing: WebAppHashing\n});\n\n})();\n\n//# sourceMappingURL=webapp-hashing.js.map\n"]},"hash":"faf4a7003e8a4e26eba7a023eff28877b825fc40"}
