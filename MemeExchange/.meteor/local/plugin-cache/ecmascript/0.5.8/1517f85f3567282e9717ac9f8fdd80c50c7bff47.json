{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/id-map.js","filenameRelative":"/bundle/programs/server/packages/id-map.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/id-map.js.map","sourceFileName":"/bundle/programs/server/packages/id-map.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"id-map"},"ignored":false,"code":"(function () {\n\n  /* Imports */\n  var Meteor = Package.meteor.Meteor;\n  var global = Package.meteor.global;\n  var meteorEnv = Package.meteor.meteorEnv;\n  var _ = Package.underscore._;\n  var EJSON = Package.ejson.EJSON;\n\n  /* Package-scope variables */\n  var IdMap;\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////\n    //                                                                            //\n    // packages/id-map/id-map.js                                                  //\n    //                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////\n    //\n    IdMap = function IdMap(idStringify, idParse) {\n      var self = this;\n      self._map = {};\n      self._idStringify = idStringify || JSON.stringify;\n      self._idParse = idParse || JSON.parse;\n    };\n\n    // Some of these methods are designed to match methods on OrderedDict, since\n    // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n    // (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n    // set of methods that overlap between the two.)\n\n    _.extend(IdMap.prototype, {\n      get: function get(id) {\n        var self = this;\n        var key = self._idStringify(id);\n        return self._map[key];\n      },\n      set: function set(id, value) {\n        var self = this;\n        var key = self._idStringify(id);\n        self._map[key] = value;\n      },\n      remove: function remove(id) {\n        var self = this;\n        var key = self._idStringify(id);\n        delete self._map[key];\n      },\n      has: function has(id) {\n        var self = this;\n        var key = self._idStringify(id);\n        return _.has(self._map, key);\n      },\n      empty: function empty() {\n        var self = this;\n        return _.isEmpty(self._map);\n      },\n      clear: function clear() {\n        var self = this;\n        self._map = {};\n      },\n      // Iterates over the items in the map. Return `false` to break the loop.\n      forEach: function forEach(iterator) {\n        var self = this;\n        // don't use _.each, because we can't break out of it.\n        var keys = _.keys(self._map);\n        for (var i = 0; i < keys.length; i++) {\n          var breakIfFalse = iterator.call(null, self._map[keys[i]], self._idParse(keys[i]));\n          if (breakIfFalse === false) return;\n        }\n      },\n      size: function size() {\n        var self = this;\n        return _.size(self._map);\n      },\n      setDefault: function setDefault(id, def) {\n        var self = this;\n        var key = self._idStringify(id);\n        if (_.has(self._map, key)) return self._map[key];\n        self._map[key] = def;\n        return def;\n      },\n      // Assumes that values are EJSON-cloneable, and that we don't need to clone\n      // IDs (ie, that nobody is going to mutate an ObjectId).\n      clone: function clone() {\n        var self = this;\n        var clone = new IdMap(self._idStringify, self._idParse);\n        self.forEach(function (value, id) {\n          clone.set(id, EJSON.clone(value));\n        });\n        return clone;\n      }\n    });\n\n    ////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  (function (pkg, symbols) {\n    for (var s in symbols) {\n      s in pkg || (pkg[s] = symbols[s]);\n    }\n  })(Package['id-map'] = {}, {\n    IdMap: IdMap\n  });\n})();\n\n//# sourceMappingURL=id-map.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/id-map.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/id-map.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar IdMap;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// packages/id-map/id-map.js                                                  //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nIdMap = function (idStringify, idParse) {\n  var self = this;\n  self._map = {};\n  self._idStringify = idStringify || JSON.stringify;\n  self._idParse = idParse || JSON.parse;\n};\n\n// Some of these methods are designed to match methods on OrderedDict, since\n// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n// (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n// set of methods that overlap between the two.)\n\n_.extend(IdMap.prototype, {\n  get: function (id) {\n    var self = this;\n    var key = self._idStringify(id);\n    return self._map[key];\n  },\n  set: function (id, value) {\n    var self = this;\n    var key = self._idStringify(id);\n    self._map[key] = value;\n  },\n  remove: function (id) {\n    var self = this;\n    var key = self._idStringify(id);\n    delete self._map[key];\n  },\n  has: function (id) {\n    var self = this;\n    var key = self._idStringify(id);\n    return _.has(self._map, key);\n  },\n  empty: function () {\n    var self = this;\n    return _.isEmpty(self._map);\n  },\n  clear: function () {\n    var self = this;\n    self._map = {};\n  },\n  // Iterates over the items in the map. Return `false` to break the loop.\n  forEach: function (iterator) {\n    var self = this;\n    // don't use _.each, because we can't break out of it.\n    var keys = _.keys(self._map);\n    for (var i = 0; i < keys.length; i++) {\n      var breakIfFalse = iterator.call(null, self._map[keys[i]],\n                                       self._idParse(keys[i]));\n      if (breakIfFalse === false)\n        return;\n    }\n  },\n  size: function () {\n    var self = this;\n    return _.size(self._map);\n  },\n  setDefault: function (id, def) {\n    var self = this;\n    var key = self._idStringify(id);\n    if (_.has(self._map, key))\n      return self._map[key];\n    self._map[key] = def;\n    return def;\n  },\n  // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n  clone: function () {\n    var self = this;\n    var clone = new IdMap(self._idStringify, self._idParse);\n    self.forEach(function (value, id) {\n      clone.set(id, EJSON.clone(value));\n    });\n    return clone;\n  }\n});\n\n\n////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['id-map'] = {}, {\n  IdMap: IdMap\n});\n\n})();\n\n//# sourceMappingURL=id-map.js.map\n"]},"hash":"1517f85f3567282e9717ac9f8fdd80c50c7bff47"}
