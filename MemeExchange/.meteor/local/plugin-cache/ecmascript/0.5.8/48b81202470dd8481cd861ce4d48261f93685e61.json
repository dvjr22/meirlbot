{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/reactive-dict.js","filenameRelative":"/bundle/programs/server/packages/reactive-dict.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/reactive-dict.js.map","sourceFileName":"/bundle/programs/server/packages/reactive-dict.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"reactive-dict"},"ignored":false,"code":"(function () {\n\n  /* Imports */\n  var Meteor = Package.meteor.Meteor;\n  var global = Package.meteor.global;\n  var meteorEnv = Package.meteor.meteorEnv;\n  var _ = Package.underscore._;\n  var Tracker = Package.tracker.Tracker;\n  var Deps = Package.tracker.Deps;\n  var EJSON = Package.ejson.EJSON;\n  var ECMAScript = Package.ecmascript.ECMAScript;\n  var meteorInstall = Package.modules.meteorInstall;\n  var Buffer = Package.modules.Buffer;\n  var process = Package.modules.process;\n  var _Symbol = Package['ecmascript-runtime'].Symbol;\n  var Map = Package['ecmascript-runtime'].Map;\n  var Set = Package['ecmascript-runtime'].Set;\n  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\n  var Promise = Package.promise.Promise;\n\n  /* Package-scope variables */\n  var ReactiveDict;\n\n  var require = meteorInstall({ \"node_modules\": { \"meteor\": { \"reactive-dict\": { \"reactive-dict.js\": [\"babel-runtime/helpers/typeof\", function (require, exports, module) {\n\n            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //                                                                                                                //\n            // packages/reactive-dict/reactive-dict.js                                                                        //\n            //                                                                                                                //\n            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //\n            var _typeof;module['import']('babel-runtime/helpers/typeof', { \"default\": function _default(v) {\n                _typeof = v;\n              } }); //\n            // XXX come up with a serialization method which canonicalizes object key                                         //\n            // order, which would allow us to use objects as values for equals.                                               //\n            var stringify = function stringify(value) {\n              // 3\n              if (value === undefined) return 'undefined'; // 4\n              return EJSON.stringify(value); // 6\n            }; // 7\n            var parse = function parse(serialized) {\n              // 8\n              if (serialized === undefined || serialized === 'undefined') return undefined; // 9\n              return EJSON.parse(serialized); // 11\n            }; // 12\n            //\n            var changed = function changed(v) {\n              // 14\n              v && v.changed(); // 15\n            }; // 16\n            //\n            // XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName                                               //\n            ReactiveDict = function (_ReactiveDict) {\n              // 19\n              function ReactiveDict(_x) {\n                // 19\n                return _ReactiveDict.apply(this, arguments); // 19\n              } // 19\n              //\n              ReactiveDict.toString = function () {\n                // 19\n                return _ReactiveDict.toString(); // 19\n              }; // 19\n              //\n              return ReactiveDict; // 19\n            }(function (dictName) {\n              // 19\n              // this.keys: key -> value                                                                                      //\n              if (dictName) {\n                // 21\n                if (typeof dictName === 'string') {\n                  // 22\n                  // the normal case, argument is a string name.                                                              //\n                  // _registerDictForMigrate will throw an error on duplicate name.                                           //\n                  ReactiveDict._registerDictForMigrate(dictName, this); // 25\n                  this.keys = ReactiveDict._loadMigratedDict(dictName) || {}; // 26\n                  this.name = dictName; // 27\n                } else if ((typeof dictName === 'undefined' ? 'undefined' : _typeof(dictName)) === 'object') {\n                    // 28\n                    // back-compat case: dictName is actually migrationData                                                     //\n                    this.keys = dictName; // 30\n                  } else {\n                      // 31\n                      throw new Error(\"Invalid ReactiveDict argument: \" + dictName); // 32\n                    } // 33\n              } else {\n                  // 34\n                  // no name given; no migration will be performed                                                              //\n                  this.keys = {}; // 36\n                } // 37\n              //\n              this.allDeps = new Tracker.Dependency(); // 39\n              this.keyDeps = {}; // key -> Dependency                                                                         // 40\n              this.keyValueDeps = {}; // key -> Dependency                                                                    // 41\n            }); // 42\n            //\n            _.extend(ReactiveDict.prototype, { // 44\n              // set() began as a key/value method, but we are now overloading it                                             //\n              // to take an object of key/value pairs, similar to backbone                                                    //\n              // http://backbonejs.org/#Model-set                                                                             //\n              //\n              set: function set(keyOrObject, value) {\n                // 49\n                var self = this; // 50\n                //\n                if ((typeof keyOrObject === 'undefined' ? 'undefined' : _typeof(keyOrObject)) === 'object' && value === undefined) {\n                  // Called as `dict.set({...})`                                                                              //\n                  self._setObject(keyOrObject); // 54\n                  return; // 55\n                } // 56\n                // the input isn't an object, so it must be a key                                                             //\n                // and we resume with the rest of the function                                                                //\n                var key = keyOrObject; // 59\n                //\n                value = stringify(value); // 61\n                //\n                var keyExisted = _.has(self.keys, key); // 63\n                var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined'; // 64\n                var isNewValue = value !== oldSerializedValue; // 65\n                //\n                self.keys[key] = value; // 67\n                //\n                if (isNewValue || !keyExisted) {\n                  // 69\n                  self.allDeps.changed(); // 70\n                } // 71\n                //\n                if (isNewValue) {\n                  // 73\n                  changed(self.keyDeps[key]); // 74\n                  if (self.keyValueDeps[key]) {\n                    // 75\n                    changed(self.keyValueDeps[key][oldSerializedValue]); // 76\n                    changed(self.keyValueDeps[key][value]); // 77\n                  } // 78\n                } // 79\n              }, // 80\n              //\n              setDefault: function setDefault(keyOrObject, value) {\n                // 82\n                var self = this; // 83\n                //\n                if ((typeof keyOrObject === 'undefined' ? 'undefined' : _typeof(keyOrObject)) === 'object' && value === undefined) {\n                  // Called as `dict.setDefault({...})`                                                                       //\n                  self._setDefaultObject(keyOrObject); // 87\n                  return; // 88\n                } // 89\n                // the input isn't an object, so it must be a key                                                             //\n                // and we resume with the rest of the function                                                                //\n                var key = keyOrObject; // 92\n                //\n                if (!_.has(self.keys, key)) {\n                  // 94\n                  self.set(key, value); // 95\n                } // 96\n              }, // 97\n              //\n              get: function get(key) {\n                // 99\n                var self = this; // 100\n                self._ensureKey(key); // 101\n                self.keyDeps[key].depend(); // 102\n                return parse(self.keys[key]); // 103\n              }, // 104\n              //\n              equals: function equals(key, value) {\n                // 106\n                var self = this; // 107\n                //\n                // Mongo.ObjectID is in the 'mongo' package                                                                   //\n                var ObjectID = null; // 110\n                if (Package.mongo) {\n                  // 111\n                  ObjectID = Package.mongo.Mongo.ObjectID; // 112\n                } // 113\n                //\n                // We don't allow objects (or arrays that might include objects) for                                          //\n                // .equals, because JSON.stringify doesn't canonicalize object key                                            //\n                // order. (We can make equals have the right return value by parsing the                                      //\n                // current value and using EJSON.equals, but we won't have a canonical                                        //\n                // element of keyValueDeps[key] to store the dependency.) You can still use                                   //\n                // \"EJSON.equals(reactiveDict.get(key), value)\".                                                              //\n                //                                                                                                            //\n                // XXX we could allow arrays as long as we recursively check that there                                       //\n                // are no objects                                                                                             //\n                if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n                  throw new Error(\"ReactiveDict.equals: value must be scalar\"); // 131\n                } // 132\n                var serializedValue = stringify(value); // 133\n                //\n                if (Tracker.active) {\n                  // 135\n                  self._ensureKey(key); // 136\n                  //\n                  if (!_.has(self.keyValueDeps[key], serializedValue)) self.keyValueDeps[key][serializedValue] = new Tracker.Dependency();\n                  //\n                  var isNew = self.keyValueDeps[key][serializedValue].depend(); // 141\n                  if (isNew) {\n                    // 142\n                    Tracker.onInvalidate(function () {\n                      // 143\n                      // clean up [key][serializedValue] if it's now empty, so we don't                                       //\n                      // use O(n) memory for n = values seen ever                                                             //\n                      if (!self.keyValueDeps[key][serializedValue].hasDependents()) delete self.keyValueDeps[key][serializedValue];\n                    }); // 148\n                  } // 149\n                } // 150\n                //\n                var oldValue = undefined; // 152\n                if (_.has(self.keys, key)) oldValue = parse(self.keys[key]); // 153\n                return EJSON.equals(oldValue, value); // 154\n              }, // 155\n              //\n              all: function all() {\n                // 157\n                this.allDeps.depend(); // 158\n                var ret = {}; // 159\n                _.each(this.keys, function (value, key) {\n                  // 160\n                  ret[key] = parse(value); // 161\n                }); // 162\n                return ret; // 163\n              }, // 164\n              //\n              clear: function clear() {\n                // 166\n                var self = this; // 167\n                //\n                var oldKeys = self.keys; // 169\n                self.keys = {}; // 170\n                //\n                self.allDeps.changed(); // 172\n                //\n                _.each(oldKeys, function (value, key) {\n                  // 174\n                  changed(self.keyDeps[key]); // 175\n                  if (self.keyValueDeps[key]) {\n                    // 176\n                    changed(self.keyValueDeps[key][value]); // 177\n                    changed(self.keyValueDeps[key]['undefined']); // 178\n                  } // 179\n                }); // 180\n              }, // 182\n              //\n              'delete': function _delete(key) {\n                // 184\n                var self = this; // 185\n                var didRemove = false; // 186\n                //\n                if (_.has(self.keys, key)) {\n                  // 188\n                  var oldValue = self.keys[key]; // 189\n                  delete self.keys[key]; // 190\n                  changed(self.keyDeps[key]); // 191\n                  if (self.keyValueDeps[key]) {\n                    // 192\n                    changed(self.keyValueDeps[key][oldValue]); // 193\n                    changed(self.keyValueDeps[key]['undefined']); // 194\n                  } // 195\n                  self.allDeps.changed(); // 196\n                  didRemove = true; // 197\n                } // 198\n                //\n                return didRemove; // 200\n              }, // 201\n              //\n              _setObject: function _setObject(object) {\n                // 203\n                var self = this; // 204\n                //\n                _.each(object, function (value, key) {\n                  // 206\n                  self.set(key, value); // 207\n                }); // 208\n              }, // 209\n              //\n              _setDefaultObject: function _setDefaultObject(object) {\n                // 211\n                var self = this; // 212\n                //\n                _.each(object, function (value, key) {\n                  // 214\n                  self.setDefault(key, value); // 215\n                }); // 216\n              }, // 217\n              //\n              _ensureKey: function _ensureKey(key) {\n                // 219\n                var self = this; // 220\n                if (!(key in self.keyDeps)) {\n                  // 221\n                  self.keyDeps[key] = new Tracker.Dependency(); // 222\n                  self.keyValueDeps[key] = {}; // 223\n                } // 224\n              }, // 225\n              //\n              // Get a JSON value that can be passed to the constructor to                                                    //\n              // create a new ReactiveDict with the same contents as this one                                                 //\n              _getMigrationData: function _getMigrationData() {\n                // 229\n                // XXX sanitize and make sure it's JSONible?                                                                  //\n                return this.keys; // 231\n              } // 232\n            }); // 44\n            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n          }], \"migration.js\": function migrationJs() {\n\n            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //                                                                                                                //\n            // packages/reactive-dict/migration.js                                                                            //\n            //                                                                                                                //\n            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //\n            ReactiveDict._migratedDictData = {}; // name -> data                                                              // 1\n            ReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                                                        // 2\n            //\n            ReactiveDict._loadMigratedDict = function (dictName) {\n              // 4\n              if (_.has(ReactiveDict._migratedDictData, dictName)) return ReactiveDict._migratedDictData[dictName]; // 5\n              //\n              return null; // 8\n            }; // 9\n            //\n            ReactiveDict._registerDictForMigrate = function (dictName, dict) {\n              // 11\n              if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n              //\n              ReactiveDict._dictsToMigrate[dictName] = dict; // 15\n            }; // 16\n            //\n            if (Meteor.isClient && Package.reload) {\n              // 18\n              // Put old migrated data into ReactiveDict._migratedDictData,                                                   //\n              // where it can be accessed by ReactiveDict._loadMigratedDict.                                                  //\n              var migrationData = Package.reload.Reload._migrationData('reactive-dict'); // 21\n              if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts; // 22\n              //\n              // On migration, assemble the data from all the dicts that have been                                            //\n              // registered.                                                                                                  //\n              Package.reload.Reload._onMigrate('reactive-dict', function () {\n                // 27\n                var dictsToMigrate = ReactiveDict._dictsToMigrate; // 28\n                var dataToMigrate = {}; // 29\n                //\n                for (var dictName in dictsToMigrate) {\n                  // 31\n                  dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData(); // 32\n                }return [true, { dicts: dataToMigrate }]; // 31\n              }); // 35\n            } // 36\n            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n          } } } } }, { \"extensions\": [\".js\", \".json\"] });\n  require(\"./node_modules/meteor/reactive-dict/reactive-dict.js\");\n  require(\"./node_modules/meteor/reactive-dict/migration.js\");\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  (function (pkg, symbols) {\n    for (var s in symbols) {\n      s in pkg || (pkg[s] = symbols[s]);\n    }\n  })(Package['reactive-dict'] = {}, {\n    ReactiveDict: ReactiveDict\n  });\n})();\n\n//# sourceMappingURL=reactive-dict.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/reactive-dict.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/reactive-dict.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar ReactiveDict;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"reactive-dict\":{\"reactive-dict.js\":[\"babel-runtime/helpers/typeof\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactive-dict/reactive-dict.js                                                                        //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nvar _typeof;module.import('babel-runtime/helpers/typeof',{\"default\":function(v){_typeof=v}});                     //\n// XXX come up with a serialization method which canonicalizes object key                                         //\n// order, which would allow us to use objects as values for equals.                                               //\nvar stringify = function stringify(value) {                                                                       // 3\n  if (value === undefined) return 'undefined';                                                                    // 4\n  return EJSON.stringify(value);                                                                                  // 6\n};                                                                                                                // 7\nvar parse = function parse(serialized) {                                                                          // 8\n  if (serialized === undefined || serialized === 'undefined') return undefined;                                   // 9\n  return EJSON.parse(serialized);                                                                                 // 11\n};                                                                                                                // 12\n                                                                                                                  //\nvar changed = function changed(v) {                                                                               // 14\n  v && v.changed();                                                                                               // 15\n};                                                                                                                // 16\n                                                                                                                  //\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName                                               //\nReactiveDict = function (_ReactiveDict) {                                                                         // 19\n  function ReactiveDict(_x) {                                                                                     // 19\n    return _ReactiveDict.apply(this, arguments);                                                                  // 19\n  }                                                                                                               // 19\n                                                                                                                  //\n  ReactiveDict.toString = function () {                                                                           // 19\n    return _ReactiveDict.toString();                                                                              // 19\n  };                                                                                                              // 19\n                                                                                                                  //\n  return ReactiveDict;                                                                                            // 19\n}(function (dictName) {                                                                                           // 19\n  // this.keys: key -> value                                                                                      //\n  if (dictName) {                                                                                                 // 21\n    if (typeof dictName === 'string') {                                                                           // 22\n      // the normal case, argument is a string name.                                                              //\n      // _registerDictForMigrate will throw an error on duplicate name.                                           //\n      ReactiveDict._registerDictForMigrate(dictName, this);                                                       // 25\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};                                                 // 26\n      this.name = dictName;                                                                                       // 27\n    } else if ((typeof dictName === 'undefined' ? 'undefined' : _typeof(dictName)) === 'object') {                // 28\n      // back-compat case: dictName is actually migrationData                                                     //\n      this.keys = dictName;                                                                                       // 30\n    } else {                                                                                                      // 31\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);                                              // 32\n    }                                                                                                             // 33\n  } else {                                                                                                        // 34\n    // no name given; no migration will be performed                                                              //\n    this.keys = {};                                                                                               // 36\n  }                                                                                                               // 37\n                                                                                                                  //\n  this.allDeps = new Tracker.Dependency();                                                                        // 39\n  this.keyDeps = {}; // key -> Dependency                                                                         // 40\n  this.keyValueDeps = {}; // key -> Dependency                                                                    // 41\n});                                                                                                               // 42\n                                                                                                                  //\n_.extend(ReactiveDict.prototype, {                                                                                // 44\n  // set() began as a key/value method, but we are now overloading it                                             //\n  // to take an object of key/value pairs, similar to backbone                                                    //\n  // http://backbonejs.org/#Model-set                                                                             //\n                                                                                                                  //\n  set: function set(keyOrObject, value) {                                                                         // 49\n    var self = this;                                                                                              // 50\n                                                                                                                  //\n    if ((typeof keyOrObject === 'undefined' ? 'undefined' : _typeof(keyOrObject)) === 'object' && value === undefined) {\n      // Called as `dict.set({...})`                                                                              //\n      self._setObject(keyOrObject);                                                                               // 54\n      return;                                                                                                     // 55\n    }                                                                                                             // 56\n    // the input isn't an object, so it must be a key                                                             //\n    // and we resume with the rest of the function                                                                //\n    var key = keyOrObject;                                                                                        // 59\n                                                                                                                  //\n    value = stringify(value);                                                                                     // 61\n                                                                                                                  //\n    var keyExisted = _.has(self.keys, key);                                                                       // 63\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';                                           // 64\n    var isNewValue = value !== oldSerializedValue;                                                                // 65\n                                                                                                                  //\n    self.keys[key] = value;                                                                                       // 67\n                                                                                                                  //\n    if (isNewValue || !keyExisted) {                                                                              // 69\n      self.allDeps.changed();                                                                                     // 70\n    }                                                                                                             // 71\n                                                                                                                  //\n    if (isNewValue) {                                                                                             // 73\n      changed(self.keyDeps[key]);                                                                                 // 74\n      if (self.keyValueDeps[key]) {                                                                               // 75\n        changed(self.keyValueDeps[key][oldSerializedValue]);                                                      // 76\n        changed(self.keyValueDeps[key][value]);                                                                   // 77\n      }                                                                                                           // 78\n    }                                                                                                             // 79\n  },                                                                                                              // 80\n                                                                                                                  //\n  setDefault: function setDefault(keyOrObject, value) {                                                           // 82\n    var self = this;                                                                                              // 83\n                                                                                                                  //\n    if ((typeof keyOrObject === 'undefined' ? 'undefined' : _typeof(keyOrObject)) === 'object' && value === undefined) {\n      // Called as `dict.setDefault({...})`                                                                       //\n      self._setDefaultObject(keyOrObject);                                                                        // 87\n      return;                                                                                                     // 88\n    }                                                                                                             // 89\n    // the input isn't an object, so it must be a key                                                             //\n    // and we resume with the rest of the function                                                                //\n    var key = keyOrObject;                                                                                        // 92\n                                                                                                                  //\n    if (!_.has(self.keys, key)) {                                                                                 // 94\n      self.set(key, value);                                                                                       // 95\n    }                                                                                                             // 96\n  },                                                                                                              // 97\n                                                                                                                  //\n  get: function get(key) {                                                                                        // 99\n    var self = this;                                                                                              // 100\n    self._ensureKey(key);                                                                                         // 101\n    self.keyDeps[key].depend();                                                                                   // 102\n    return parse(self.keys[key]);                                                                                 // 103\n  },                                                                                                              // 104\n                                                                                                                  //\n  equals: function equals(key, value) {                                                                           // 106\n    var self = this;                                                                                              // 107\n                                                                                                                  //\n    // Mongo.ObjectID is in the 'mongo' package                                                                   //\n    var ObjectID = null;                                                                                          // 110\n    if (Package.mongo) {                                                                                          // 111\n      ObjectID = Package.mongo.Mongo.ObjectID;                                                                    // 112\n    }                                                                                                             // 113\n                                                                                                                  //\n    // We don't allow objects (or arrays that might include objects) for                                          //\n    // .equals, because JSON.stringify doesn't canonicalize object key                                            //\n    // order. (We can make equals have the right return value by parsing the                                      //\n    // current value and using EJSON.equals, but we won't have a canonical                                        //\n    // element of keyValueDeps[key] to store the dependency.) You can still use                                   //\n    // \"EJSON.equals(reactiveDict.get(key), value)\".                                                              //\n    //                                                                                                            //\n    // XXX we could allow arrays as long as we recursively check that there                                       //\n    // are no objects                                                                                             //\n    if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");                                               // 131\n    }                                                                                                             // 132\n    var serializedValue = stringify(value);                                                                       // 133\n                                                                                                                  //\n    if (Tracker.active) {                                                                                         // 135\n      self._ensureKey(key);                                                                                       // 136\n                                                                                                                  //\n      if (!_.has(self.keyValueDeps[key], serializedValue)) self.keyValueDeps[key][serializedValue] = new Tracker.Dependency();\n                                                                                                                  //\n      var isNew = self.keyValueDeps[key][serializedValue].depend();                                               // 141\n      if (isNew) {                                                                                                // 142\n        Tracker.onInvalidate(function () {                                                                        // 143\n          // clean up [key][serializedValue] if it's now empty, so we don't                                       //\n          // use O(n) memory for n = values seen ever                                                             //\n          if (!self.keyValueDeps[key][serializedValue].hasDependents()) delete self.keyValueDeps[key][serializedValue];\n        });                                                                                                       // 148\n      }                                                                                                           // 149\n    }                                                                                                             // 150\n                                                                                                                  //\n    var oldValue = undefined;                                                                                     // 152\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);                                                  // 153\n    return EJSON.equals(oldValue, value);                                                                         // 154\n  },                                                                                                              // 155\n                                                                                                                  //\n  all: function all() {                                                                                           // 157\n    this.allDeps.depend();                                                                                        // 158\n    var ret = {};                                                                                                 // 159\n    _.each(this.keys, function (value, key) {                                                                     // 160\n      ret[key] = parse(value);                                                                                    // 161\n    });                                                                                                           // 162\n    return ret;                                                                                                   // 163\n  },                                                                                                              // 164\n                                                                                                                  //\n  clear: function clear() {                                                                                       // 166\n    var self = this;                                                                                              // 167\n                                                                                                                  //\n    var oldKeys = self.keys;                                                                                      // 169\n    self.keys = {};                                                                                               // 170\n                                                                                                                  //\n    self.allDeps.changed();                                                                                       // 172\n                                                                                                                  //\n    _.each(oldKeys, function (value, key) {                                                                       // 174\n      changed(self.keyDeps[key]);                                                                                 // 175\n      if (self.keyValueDeps[key]) {                                                                               // 176\n        changed(self.keyValueDeps[key][value]);                                                                   // 177\n        changed(self.keyValueDeps[key]['undefined']);                                                             // 178\n      }                                                                                                           // 179\n    });                                                                                                           // 180\n  },                                                                                                              // 182\n                                                                                                                  //\n  'delete': function _delete(key) {                                                                               // 184\n    var self = this;                                                                                              // 185\n    var didRemove = false;                                                                                        // 186\n                                                                                                                  //\n    if (_.has(self.keys, key)) {                                                                                  // 188\n      var oldValue = self.keys[key];                                                                              // 189\n      delete self.keys[key];                                                                                      // 190\n      changed(self.keyDeps[key]);                                                                                 // 191\n      if (self.keyValueDeps[key]) {                                                                               // 192\n        changed(self.keyValueDeps[key][oldValue]);                                                                // 193\n        changed(self.keyValueDeps[key]['undefined']);                                                             // 194\n      }                                                                                                           // 195\n      self.allDeps.changed();                                                                                     // 196\n      didRemove = true;                                                                                           // 197\n    }                                                                                                             // 198\n                                                                                                                  //\n    return didRemove;                                                                                             // 200\n  },                                                                                                              // 201\n                                                                                                                  //\n  _setObject: function _setObject(object) {                                                                       // 203\n    var self = this;                                                                                              // 204\n                                                                                                                  //\n    _.each(object, function (value, key) {                                                                        // 206\n      self.set(key, value);                                                                                       // 207\n    });                                                                                                           // 208\n  },                                                                                                              // 209\n                                                                                                                  //\n  _setDefaultObject: function _setDefaultObject(object) {                                                         // 211\n    var self = this;                                                                                              // 212\n                                                                                                                  //\n    _.each(object, function (value, key) {                                                                        // 214\n      self.setDefault(key, value);                                                                                // 215\n    });                                                                                                           // 216\n  },                                                                                                              // 217\n                                                                                                                  //\n  _ensureKey: function _ensureKey(key) {                                                                          // 219\n    var self = this;                                                                                              // 220\n    if (!(key in self.keyDeps)) {                                                                                 // 221\n      self.keyDeps[key] = new Tracker.Dependency();                                                               // 222\n      self.keyValueDeps[key] = {};                                                                                // 223\n    }                                                                                                             // 224\n  },                                                                                                              // 225\n                                                                                                                  //\n  // Get a JSON value that can be passed to the constructor to                                                    //\n  // create a new ReactiveDict with the same contents as this one                                                 //\n  _getMigrationData: function _getMigrationData() {                                                               // 229\n    // XXX sanitize and make sure it's JSONible?                                                                  //\n    return this.keys;                                                                                             // 231\n  }                                                                                                               // 232\n});                                                                                                               // 44\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"migration.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactive-dict/migration.js                                                                            //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nReactiveDict._migratedDictData = {}; // name -> data                                                              // 1\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                                                        // 2\n                                                                                                                  //\nReactiveDict._loadMigratedDict = function (dictName) {                                                            // 4\n  if (_.has(ReactiveDict._migratedDictData, dictName)) return ReactiveDict._migratedDictData[dictName];           // 5\n                                                                                                                  //\n  return null;                                                                                                    // 8\n};                                                                                                                // 9\n                                                                                                                  //\nReactiveDict._registerDictForMigrate = function (dictName, dict) {                                                // 11\n  if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n                                                                                                                  //\n  ReactiveDict._dictsToMigrate[dictName] = dict;                                                                  // 15\n};                                                                                                                // 16\n                                                                                                                  //\nif (Meteor.isClient && Package.reload) {                                                                          // 18\n  // Put old migrated data into ReactiveDict._migratedDictData,                                                   //\n  // where it can be accessed by ReactiveDict._loadMigratedDict.                                                  //\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');                                      // 21\n  if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts;                 // 22\n                                                                                                                  //\n  // On migration, assemble the data from all the dicts that have been                                            //\n  // registered.                                                                                                  //\n  Package.reload.Reload._onMigrate('reactive-dict', function () {                                                 // 27\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;                                                            // 28\n    var dataToMigrate = {};                                                                                       // 29\n                                                                                                                  //\n    for (var dictName in dictsToMigrate) {                                                                        // 31\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();                                     // 32\n    }return [true, { dicts: dataToMigrate }];                                                                     // 31\n  });                                                                                                             // 35\n}                                                                                                                 // 36\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/reactive-dict/reactive-dict.js\");\nrequire(\"./node_modules/meteor/reactive-dict/migration.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['reactive-dict'] = {}, {\n  ReactiveDict: ReactiveDict\n});\n\n})();\n\n//# sourceMappingURL=reactive-dict.js.map\n"]},"hash":"48b81202470dd8481cd861ce4d48261f93685e61"}
