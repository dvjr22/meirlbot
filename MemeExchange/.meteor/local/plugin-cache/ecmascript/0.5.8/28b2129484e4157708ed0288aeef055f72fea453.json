{"metadata":{"usedHelpers":["typeof"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/blaze.js","filenameRelative":"/bundle/programs/server/packages/blaze.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/blaze.js.map","sourceFileName":"/bundle/programs/server/packages/blaze.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"blaze"},"ignored":false,"code":"var _typeof;module.import('babel-runtime/helpers/typeof',{\"default\":function(v){_typeof=v}});\n(function () {\n\n  /* Imports */\n  var Meteor = Package.meteor.Meteor;\n  var global = Package.meteor.global;\n  var meteorEnv = Package.meteor.meteorEnv;\n  var Tracker = Package.tracker.Tracker;\n  var Deps = Package.tracker.Deps;\n  var check = Package.check.check;\n  var Match = Package.check.Match;\n  var _ = Package.underscore._;\n  var ObserveSequence = Package['observe-sequence'].ObserveSequence;\n  var ReactiveVar = Package['reactive-var'].ReactiveVar;\n  var HTML = Package.htmljs.HTML;\n\n  /* Package-scope variables */\n  var Blaze, UI, Handlebars;\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                     //\n    // packages/blaze/preamble.js                                                                                          //\n    //                                                                                                                     //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    /**\n     * @namespace Blaze\n     * @summary The namespace for all Blaze-related methods and classes.\n     */\n    Blaze = {};\n\n    // Utility to HTML-escape a string.  Included for legacy reasons.\n    Blaze._escape = function () {\n      var escape_map = {\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\",\n        '\"': \"&quot;\",\n        \"'\": \"&#x27;\",\n        \"`\": \"&#x60;\", /* IE allows backtick-delimited attributes?? */\n        \"&\": \"&amp;\"\n      };\n      var escape_one = function escape_one(c) {\n        return escape_map[c];\n      };\n\n      return function (x) {\n        return x.replace(/[&<>\"'`]/g, escape_one);\n      };\n    }();\n\n    Blaze._warn = function (msg) {\n      msg = 'Warning: ' + msg;\n\n      if (typeof console !== 'undefined' && console.warn) {\n        console.warn(msg);\n      }\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                     //\n    // packages/blaze/exceptions.js                                                                                        //\n    //                                                                                                                     //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    var debugFunc;\n\n    // We call into user code in many places, and it's nice to catch exceptions\n    // propagated from user code immediately so that the whole system doesn't just\n    // break.  Catching exceptions is easy; reporting them is hard.  This helper\n    // reports exceptions.\n    //\n    // Usage:\n    //\n    // ```\n    // try {\n    //   // ... someStuff ...\n    // } catch (e) {\n    //   reportUIException(e);\n    // }\n    // ```\n    //\n    // An optional second argument overrides the default message.\n\n    // Set this to `true` to cause `reportException` to throw\n    // the next exception rather than reporting it.  This is\n    // useful in unit tests that test error messages.\n    Blaze._throwNextException = false;\n\n    Blaze._reportException = function (e, msg) {\n      if (Blaze._throwNextException) {\n        Blaze._throwNextException = false;\n        throw e;\n      }\n\n      if (!debugFunc)\n        // adapted from Tracker\n        debugFunc = function debugFunc() {\n          return typeof Meteor !== \"undefined\" ? Meteor._debug : typeof console !== \"undefined\" && console.log ? console.log : function () {};\n        };\n\n      // In Chrome, `e.stack` is a multiline string that starts with the message\n      // and contains a stack trace.  Furthermore, `console.log` makes it clickable.\n      // `console.log` supplies the space between the two arguments.\n      debugFunc()(msg || 'Exception caught in template:', e.stack || e.message || e);\n    };\n\n    Blaze._wrapCatchingExceptions = function (f, where) {\n      if (typeof f !== 'function') return f;\n\n      return function () {\n        try {\n          return f.apply(this, arguments);\n        } catch (e) {\n          Blaze._reportException(e, 'Exception in ' + where + ':');\n        }\n      };\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                     //\n    // packages/blaze/view.js                                                                                              //\n    //                                                                                                                     //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    /// [new] Blaze.View([name], renderMethod)\n    ///\n    /// Blaze.View is the building block of reactive DOM.  Views have\n    /// the following features:\n    ///\n    /// * lifecycle callbacks - Views are created, rendered, and destroyed,\n    ///   and callbacks can be registered to fire when these things happen.\n    ///\n    /// * parent pointer - A View points to its parentView, which is the\n    ///   View that caused it to be rendered.  These pointers form a\n    ///   hierarchy or tree of Views.\n    ///\n    /// * render() method - A View's render() method specifies the DOM\n    ///   (or HTML) content of the View.  If the method establishes\n    ///   reactive dependencies, it may be re-run.\n    ///\n    /// * a DOMRange - If a View is rendered to DOM, its position and\n    ///   extent in the DOM are tracked using a DOMRange object.\n    ///\n    /// When a View is constructed by calling Blaze.View, the View is\n    /// not yet considered \"created.\"  It doesn't have a parentView yet,\n    /// and no logic has been run to initialize the View.  All real\n    /// work is deferred until at least creation time, when the onViewCreated\n    /// callbacks are fired, which happens when the View is \"used\" in\n    /// some way that requires it to be rendered.\n    ///\n    /// ...more lifecycle stuff\n    ///\n    /// `name` is an optional string tag identifying the View.  The only\n    /// time it's used is when looking in the View tree for a View of a\n    /// particular name; for example, data contexts are stored on Views\n    /// of name \"with\".  Names are also useful when debugging, so in\n    /// general it's good for functions that create Views to set the name.\n    /// Views associated with templates have names of the form \"Template.foo\".\n\n    /**\n     * @class\n     * @summary Constructor for a View, which represents a reactive region of DOM.\n     * @locus Client\n     * @param {String} [name] Optional.  A name for this type of View.  See [`view.name`](#view_name).\n     * @param {Function} renderFunction A function that returns [*renderable content*](#renderable_content).  In this function, `this` is bound to the View.\n     */\n    Blaze.View = function (name, render) {\n      if (!(this instanceof Blaze.View))\n        // called without `new`\n        return new Blaze.View(name, render);\n\n      if (typeof name === 'function') {\n        // omitted \"name\" argument\n        render = name;\n        name = '';\n      }\n      this.name = name;\n      this._render = render;\n\n      this._callbacks = {\n        created: null,\n        rendered: null,\n        destroyed: null\n      };\n\n      // Setting all properties here is good for readability,\n      // and also may help Chrome optimize the code by keeping\n      // the View object from changing shape too much.\n      this.isCreated = false;\n      this._isCreatedForExpansion = false;\n      this.isRendered = false;\n      this._isAttached = false;\n      this.isDestroyed = false;\n      this._isInRender = false;\n      this.parentView = null;\n      this._domrange = null;\n      // This flag is normally set to false except for the cases when view's parent\n      // was generated as part of expanding some syntactic sugar expressions or\n      // methods.\n      // Ex.: Blaze.renderWithData is an equivalent to creating a view with regular\n      // Blaze.render and wrapping it into {{#with data}}{{/with}} view. Since the\n      // users don't know anything about these generated parent views, Blaze needs\n      // this information to be available on views to make smarter decisions. For\n      // example: removing the generated parent view with the view on Blaze.remove.\n      this._hasGeneratedParent = false;\n      // Bindings accessible to children views (via view.lookup('name')) within the\n      // closest template view.\n      this._scopeBindings = {};\n\n      this.renderCount = 0;\n    };\n\n    Blaze.View.prototype._render = function () {\n      return null;\n    };\n\n    Blaze.View.prototype.onViewCreated = function (cb) {\n      this._callbacks.created = this._callbacks.created || [];\n      this._callbacks.created.push(cb);\n    };\n\n    Blaze.View.prototype._onViewRendered = function (cb) {\n      this._callbacks.rendered = this._callbacks.rendered || [];\n      this._callbacks.rendered.push(cb);\n    };\n\n    Blaze.View.prototype.onViewReady = function (cb) {\n      var self = this;\n      var fire = function fire() {\n        Tracker.afterFlush(function () {\n          if (!self.isDestroyed) {\n            Blaze._withCurrentView(self, function () {\n              cb.call(self);\n            });\n          }\n        });\n      };\n      self._onViewRendered(function onViewRendered() {\n        if (self.isDestroyed) return;\n        if (!self._domrange.attached) self._domrange.onAttached(fire);else fire();\n      });\n    };\n\n    Blaze.View.prototype.onViewDestroyed = function (cb) {\n      this._callbacks.destroyed = this._callbacks.destroyed || [];\n      this._callbacks.destroyed.push(cb);\n    };\n    Blaze.View.prototype.removeViewDestroyedListener = function (cb) {\n      var destroyed = this._callbacks.destroyed;\n      if (!destroyed) return;\n      var index = _.lastIndexOf(destroyed, cb);\n      if (index !== -1) {\n        // XXX You'd think the right thing to do would be splice, but _fireCallbacks\n        // gets sad if you remove callbacks while iterating over the list.  Should\n        // change this to use callback-hook or EventEmitter or something else that\n        // properly supports removal.\n        destroyed[index] = null;\n      }\n    };\n\n    /// View#autorun(func)\n    ///\n    /// Sets up a Tracker autorun that is \"scoped\" to this View in two\n    /// important ways: 1) Blaze.currentView is automatically set\n    /// on every re-run, and 2) the autorun is stopped when the\n    /// View is destroyed.  As with Tracker.autorun, the first run of\n    /// the function is immediate, and a Computation object that can\n    /// be used to stop the autorun is returned.\n    ///\n    /// View#autorun is meant to be called from View callbacks like\n    /// onViewCreated, or from outside the rendering process.  It may not\n    /// be called before the onViewCreated callbacks are fired (too early),\n    /// or from a render() method (too confusing).\n    ///\n    /// Typically, autoruns that update the state\n    /// of the View (as in Blaze.With) should be started from an onViewCreated\n    /// callback.  Autoruns that update the DOM should be started\n    /// from either onViewCreated (guarded against the absence of\n    /// view._domrange), or onViewReady.\n    Blaze.View.prototype.autorun = function (f, _inViewScope, displayName) {\n      var self = this;\n\n      // The restrictions on when View#autorun can be called are in order\n      // to avoid bad patterns, like creating a Blaze.View and immediately\n      // calling autorun on it.  A freshly created View is not ready to\n      // have logic run on it; it doesn't have a parentView, for example.\n      // It's when the View is materialized or expanded that the onViewCreated\n      // handlers are fired and the View starts up.\n      //\n      // Letting the render() method call `this.autorun()` is problematic\n      // because of re-render.  The best we can do is to stop the old\n      // autorun and start a new one for each render, but that's a pattern\n      // we try to avoid internally because it leads to helpers being\n      // called extra times, in the case where the autorun causes the\n      // view to re-render (and thus the autorun to be torn down and a\n      // new one established).\n      //\n      // We could lift these restrictions in various ways.  One interesting\n      // idea is to allow you to call `view.autorun` after instantiating\n      // `view`, and automatically wrap it in `view.onViewCreated`, deferring\n      // the autorun so that it starts at an appropriate time.  However,\n      // then we can't return the Computation object to the caller, because\n      // it doesn't exist yet.\n      if (!self.isCreated) {\n        throw new Error(\"View#autorun must be called from the created callback at the earliest\");\n      }\n      if (this._isInRender) {\n        throw new Error(\"Can't call View#autorun from inside render(); try calling it from the created or rendered callback\");\n      }\n      if (Tracker.active) {\n        throw new Error(\"Can't call View#autorun from a Tracker Computation; try calling it from the created or rendered callback\");\n      }\n\n      var templateInstanceFunc = Blaze.Template._currentTemplateInstanceFunc;\n\n      var func = function viewAutorun(c) {\n        return Blaze._withCurrentView(_inViewScope || self, function () {\n          return Blaze.Template._withTemplateInstanceFunc(templateInstanceFunc, function () {\n            return f.call(self, c);\n          });\n        });\n      };\n\n      // Give the autorun function a better name for debugging and profiling.\n      // The `displayName` property is not part of the spec but browsers like Chrome\n      // and Firefox prefer it in debuggers over the name function was declared by.\n      func.displayName = (self.name || 'anonymous') + ':' + (displayName || 'anonymous');\n      var comp = Tracker.autorun(func);\n\n      var stopComputation = function stopComputation() {\n        comp.stop();\n      };\n      self.onViewDestroyed(stopComputation);\n      comp.onStop(function () {\n        self.removeViewDestroyedListener(stopComputation);\n      });\n\n      return comp;\n    };\n\n    Blaze.View.prototype._errorIfShouldntCallSubscribe = function () {\n      var self = this;\n\n      if (!self.isCreated) {\n        throw new Error(\"View#subscribe must be called from the created callback at the earliest\");\n      }\n      if (self._isInRender) {\n        throw new Error(\"Can't call View#subscribe from inside render(); try calling it from the created or rendered callback\");\n      }\n      if (self.isDestroyed) {\n        throw new Error(\"Can't call View#subscribe from inside the destroyed callback, try calling it inside created or rendered.\");\n      }\n    };\n\n    /**\n     * Just like Blaze.View#autorun, but with Meteor.subscribe instead of\n     * Tracker.autorun. Stop the subscription when the view is destroyed.\n     * @return {SubscriptionHandle} A handle to the subscription so that you can\n     * see if it is ready, or stop it manually\n     */\n    Blaze.View.prototype.subscribe = function (args, options) {\n      var self = this;\n      options = options || {};\n\n      self._errorIfShouldntCallSubscribe();\n\n      var subHandle;\n      if (options.connection) {\n        subHandle = options.connection.subscribe.apply(options.connection, args);\n      } else {\n        subHandle = Meteor.subscribe.apply(Meteor, args);\n      }\n\n      self.onViewDestroyed(function () {\n        subHandle.stop();\n      });\n\n      return subHandle;\n    };\n\n    Blaze.View.prototype.firstNode = function () {\n      if (!this._isAttached) throw new Error(\"View must be attached before accessing its DOM\");\n\n      return this._domrange.firstNode();\n    };\n\n    Blaze.View.prototype.lastNode = function () {\n      if (!this._isAttached) throw new Error(\"View must be attached before accessing its DOM\");\n\n      return this._domrange.lastNode();\n    };\n\n    Blaze._fireCallbacks = function (view, which) {\n      Blaze._withCurrentView(view, function () {\n        Tracker.nonreactive(function fireCallbacks() {\n          var cbs = view._callbacks[which];\n          for (var i = 0, N = cbs && cbs.length; i < N; i++) {\n            cbs[i] && cbs[i].call(view);\n          }\n        });\n      });\n    };\n\n    Blaze._createView = function (view, parentView, forExpansion) {\n      if (view.isCreated) throw new Error(\"Can't render the same View twice\");\n\n      view.parentView = parentView || null;\n      view.isCreated = true;\n      if (forExpansion) view._isCreatedForExpansion = true;\n\n      Blaze._fireCallbacks(view, 'created');\n    };\n\n    var doFirstRender = function doFirstRender(view, initialContent) {\n      var domrange = new Blaze._DOMRange(initialContent);\n      view._domrange = domrange;\n      domrange.view = view;\n      view.isRendered = true;\n      Blaze._fireCallbacks(view, 'rendered');\n\n      var teardownHook = null;\n\n      domrange.onAttached(function attached(range, element) {\n        view._isAttached = true;\n\n        teardownHook = Blaze._DOMBackend.Teardown.onElementTeardown(element, function teardown() {\n          Blaze._destroyView(view, true /* _skipNodes */);\n        });\n      });\n\n      // tear down the teardown hook\n      view.onViewDestroyed(function () {\n        teardownHook && teardownHook.stop();\n        teardownHook = null;\n      });\n\n      return domrange;\n    };\n\n    // Take an uncreated View `view` and create and render it to DOM,\n    // setting up the autorun that updates the View.  Returns a new\n    // DOMRange, which has been associated with the View.\n    //\n    // The private arguments `_workStack` and `_intoArray` are passed in\n    // by Blaze._materializeDOM and are only present for recursive calls\n    // (when there is some other _materializeView on the stack).  If\n    // provided, then we avoid the mutual recursion of calling back into\n    // Blaze._materializeDOM so that deep View hierarchies don't blow the\n    // stack.  Instead, we push tasks onto workStack for the initial\n    // rendering and subsequent setup of the View, and they are done after\n    // we return.  When there is a _workStack, we do not return the new\n    // DOMRange, but instead push it into _intoArray from a _workStack\n    // task.\n    Blaze._materializeView = function (view, parentView, _workStack, _intoArray) {\n      Blaze._createView(view, parentView);\n\n      var domrange;\n      var lastHtmljs;\n      // We don't expect to be called in a Computation, but just in case,\n      // wrap in Tracker.nonreactive.\n      Tracker.nonreactive(function () {\n        view.autorun(function doRender(c) {\n          // `view.autorun` sets the current view.\n          view.renderCount++;\n          view._isInRender = true;\n          // Any dependencies that should invalidate this Computation come\n          // from this line:\n          var htmljs = view._render();\n          view._isInRender = false;\n\n          if (!c.firstRun) {\n            Tracker.nonreactive(function doMaterialize() {\n              // re-render\n              var rangesAndNodes = Blaze._materializeDOM(htmljs, [], view);\n              if (!Blaze._isContentEqual(lastHtmljs, htmljs)) {\n                domrange.setMembers(rangesAndNodes);\n                Blaze._fireCallbacks(view, 'rendered');\n              }\n            });\n          }\n          lastHtmljs = htmljs;\n\n          // Causes any nested views to stop immediately, not when we call\n          // `setMembers` the next time around the autorun.  Otherwise,\n          // helpers in the DOM tree to be replaced might be scheduled\n          // to re-run before we have a chance to stop them.\n          Tracker.onInvalidate(function () {\n            if (domrange) {\n              domrange.destroyMembers();\n            }\n          });\n        }, undefined, 'materialize');\n\n        // first render.  lastHtmljs is the first htmljs.\n        var initialContents;\n        if (!_workStack) {\n          initialContents = Blaze._materializeDOM(lastHtmljs, [], view);\n          domrange = doFirstRender(view, initialContents);\n          initialContents = null; // help GC because we close over this scope a lot\n        } else {\n            // We're being called from Blaze._materializeDOM, so to avoid\n            // recursion and save stack space, provide a description of the\n            // work to be done instead of doing it.  Tasks pushed onto\n            // _workStack will be done in LIFO order after we return.\n            // The work will still be done within a Tracker.nonreactive,\n            // because it will be done by some call to Blaze._materializeDOM\n            // (which is always called in a Tracker.nonreactive).\n            initialContents = [];\n            // push this function first so that it happens last\n            _workStack.push(function () {\n              domrange = doFirstRender(view, initialContents);\n              initialContents = null; // help GC because of all the closures here\n              _intoArray.push(domrange);\n            });\n            // now push the task that calculates initialContents\n            _workStack.push(_.bind(Blaze._materializeDOM, null, lastHtmljs, initialContents, view, _workStack));\n          }\n      });\n\n      if (!_workStack) {\n        return domrange;\n      } else {\n        return null;\n      }\n    };\n\n    // Expands a View to HTMLjs, calling `render` recursively on all\n    // Views and evaluating any dynamic attributes.  Calls the `created`\n    // callback, but not the `materialized` or `rendered` callbacks.\n    // Destroys the view immediately, unless called in a Tracker Computation,\n    // in which case the view will be destroyed when the Computation is\n    // invalidated.  If called in a Tracker Computation, the result is a\n    // reactive string; that is, the Computation will be invalidated\n    // if any changes are made to the view or subviews that might affect\n    // the HTML.\n    Blaze._expandView = function (view, parentView) {\n      Blaze._createView(view, parentView, true /*forExpansion*/);\n\n      view._isInRender = true;\n      var htmljs = Blaze._withCurrentView(view, function () {\n        return view._render();\n      });\n      view._isInRender = false;\n\n      var result = Blaze._expand(htmljs, view);\n\n      if (Tracker.active) {\n        Tracker.onInvalidate(function () {\n          Blaze._destroyView(view);\n        });\n      } else {\n        Blaze._destroyView(view);\n      }\n\n      return result;\n    };\n\n    // Options: `parentView`\n    Blaze._HTMLJSExpander = HTML.TransformingVisitor.extend();\n    Blaze._HTMLJSExpander.def({\n      visitObject: function visitObject(x) {\n        if (x instanceof Blaze.Template) x = x.constructView();\n        if (x instanceof Blaze.View) return Blaze._expandView(x, this.parentView);\n\n        // this will throw an error; other objects are not allowed!\n        return HTML.TransformingVisitor.prototype.visitObject.call(this, x);\n      },\n      visitAttributes: function visitAttributes(attrs) {\n        // expand dynamic attributes\n        if (typeof attrs === 'function') attrs = Blaze._withCurrentView(this.parentView, attrs);\n\n        // call super (e.g. for case where `attrs` is an array)\n        return HTML.TransformingVisitor.prototype.visitAttributes.call(this, attrs);\n      },\n      visitAttribute: function visitAttribute(name, value, tag) {\n        // expand attribute values that are functions.  Any attribute value\n        // that contains Views must be wrapped in a function.\n        if (typeof value === 'function') value = Blaze._withCurrentView(this.parentView, value);\n\n        return HTML.TransformingVisitor.prototype.visitAttribute.call(this, name, value, tag);\n      }\n    });\n\n    // Return Blaze.currentView, but only if it is being rendered\n    // (i.e. we are in its render() method).\n    var currentViewIfRendering = function currentViewIfRendering() {\n      var view = Blaze.currentView;\n      return view && view._isInRender ? view : null;\n    };\n\n    Blaze._expand = function (htmljs, parentView) {\n      parentView = parentView || currentViewIfRendering();\n      return new Blaze._HTMLJSExpander({ parentView: parentView }).visit(htmljs);\n    };\n\n    Blaze._expandAttributes = function (attrs, parentView) {\n      parentView = parentView || currentViewIfRendering();\n      return new Blaze._HTMLJSExpander({ parentView: parentView }).visitAttributes(attrs);\n    };\n\n    Blaze._destroyView = function (view, _skipNodes) {\n      if (view.isDestroyed) return;\n      view.isDestroyed = true;\n\n      Blaze._fireCallbacks(view, 'destroyed');\n\n      // Destroy views and elements recursively.  If _skipNodes,\n      // only recurse up to views, not elements, for the case where\n      // the backend (jQuery) is recursing over the elements already.\n\n      if (view._domrange) view._domrange.destroyMembers(_skipNodes);\n    };\n\n    Blaze._destroyNode = function (node) {\n      if (node.nodeType === 1) Blaze._DOMBackend.Teardown.tearDownElement(node);\n    };\n\n    // Are the HTMLjs entities `a` and `b` the same?  We could be\n    // more elaborate here but the point is to catch the most basic\n    // cases.\n    Blaze._isContentEqual = function (a, b) {\n      if (a instanceof HTML.Raw) {\n        return b instanceof HTML.Raw && a.value === b.value;\n      } else if (a == null) {\n        return b == null;\n      } else {\n        return a === b && (typeof a === 'number' || typeof a === 'boolean' || typeof a === 'string');\n      }\n    };\n\n    /**\n     * @summary The View corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.\n     * @locus Client\n     * @type {Blaze.View}\n     */\n    Blaze.currentView = null;\n\n    Blaze._withCurrentView = function (view, func) {\n      var oldView = Blaze.currentView;\n      try {\n        Blaze.currentView = view;\n        return func();\n      } finally {\n        Blaze.currentView = oldView;\n      }\n    };\n\n    // Blaze.render publicly takes a View or a Template.\n    // Privately, it takes any HTMLJS (extended with Views and Templates)\n    // except null or undefined, or a function that returns any extended\n    // HTMLJS.\n    var checkRenderContent = function checkRenderContent(content) {\n      if (content === null) throw new Error(\"Can't render null\");\n      if (typeof content === 'undefined') throw new Error(\"Can't render undefined\");\n\n      if (content instanceof Blaze.View || content instanceof Blaze.Template || typeof content === 'function') return;\n\n      try {\n        // Throw if content doesn't look like HTMLJS at the top level\n        // (i.e. verify that this is an HTML.Tag, or an array,\n        // or a primitive, etc.)\n        new HTML.Visitor().visit(content);\n      } catch (e) {\n        // Make error message suitable for public API\n        throw new Error(\"Expected Template or View\");\n      }\n    };\n\n    // For Blaze.render and Blaze.toHTML, take content and\n    // wrap it in a View, unless it's a single View or\n    // Template already.\n    var contentAsView = function contentAsView(content) {\n      checkRenderContent(content);\n\n      if (content instanceof Blaze.Template) {\n        return content.constructView();\n      } else if (content instanceof Blaze.View) {\n        return content;\n      } else {\n        var func = content;\n        if (typeof func !== 'function') {\n          func = function func() {\n            return content;\n          };\n        }\n        return Blaze.View('render', func);\n      }\n    };\n\n    // For Blaze.renderWithData and Blaze.toHTMLWithData, wrap content\n    // in a function, if necessary, so it can be a content arg to\n    // a Blaze.With.\n    var contentAsFunc = function contentAsFunc(content) {\n      checkRenderContent(content);\n\n      if (typeof content !== 'function') {\n        return function () {\n          return content;\n        };\n      } else {\n        return content;\n      }\n    };\n\n    /**\n     * @summary Renders a template or View to DOM nodes and inserts it into the DOM, returning a rendered [View](#blaze_view) which can be passed to [`Blaze.remove`](#blaze_remove).\n     * @locus Client\n     * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.  If a template, a View object is [constructed](#template_constructview).  If a View, it must be an unrendered View, which becomes a rendered View and is returned.\n     * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.\n     * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.\n     * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).\n     */\n    Blaze.render = function (content, parentElement, nextNode, parentView) {\n      if (!parentElement) {\n        Blaze._warn(\"Blaze.render without a parent element is deprecated. \" + \"You must specify where to insert the rendered content.\");\n      }\n\n      if (nextNode instanceof Blaze.View) {\n        // handle omitted nextNode\n        parentView = nextNode;\n        nextNode = null;\n      }\n\n      // parentElement must be a DOM node. in particular, can't be the\n      // result of a call to `$`. Can't check if `parentElement instanceof\n      // Node` since 'Node' is undefined in IE8.\n      if (parentElement && typeof parentElement.nodeType !== 'number') throw new Error(\"'parentElement' must be a DOM node\");\n      if (nextNode && typeof nextNode.nodeType !== 'number') // 'nextNode' is optional\n        throw new Error(\"'nextNode' must be a DOM node\");\n\n      parentView = parentView || currentViewIfRendering();\n\n      var view = contentAsView(content);\n      Blaze._materializeView(view, parentView);\n\n      if (parentElement) {\n        view._domrange.attach(parentElement, nextNode);\n      }\n\n      return view;\n    };\n\n    Blaze.insert = function (view, parentElement, nextNode) {\n      Blaze._warn(\"Blaze.insert has been deprecated.  Specify where to insert the \" + \"rendered content in the call to Blaze.render.\");\n\n      if (!(view && view._domrange instanceof Blaze._DOMRange)) throw new Error(\"Expected template rendered with Blaze.render\");\n\n      view._domrange.attach(parentElement, nextNode);\n    };\n\n    /**\n     * @summary Renders a template or View to DOM nodes with a data context.  Otherwise identical to `Blaze.render`.\n     * @locus Client\n     * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.\n     * @param {Object|Function} data The data context to use, or a function returning a data context.  If a function is provided, it will be reactively re-run.\n     * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.\n     * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.\n     * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).\n     */\n    Blaze.renderWithData = function (content, data, parentElement, nextNode, parentView) {\n      // We defer the handling of optional arguments to Blaze.render.  At this point,\n      // `nextNode` may actually be `parentView`.\n      return Blaze.render(Blaze._TemplateWith(data, contentAsFunc(content)), parentElement, nextNode, parentView);\n    };\n\n    /**\n     * @summary Removes a rendered View from the DOM, stopping all reactive updates and event listeners on it. Also destroys the Blaze.Template instance associated with the view.\n     * @locus Client\n     * @param {Blaze.View} renderedView The return value from `Blaze.render` or `Blaze.renderWithData`, or the `view` property of a Blaze.Template instance. Calling `Blaze.remove(Template.instance().view)` from within a template event handler will destroy the view as well as that template and trigger the template's `onDestroyed` handlers.\n     */\n    Blaze.remove = function (view) {\n      if (!(view && view._domrange instanceof Blaze._DOMRange)) throw new Error(\"Expected template rendered with Blaze.render\");\n\n      while (view) {\n        if (!view.isDestroyed) {\n          var range = view._domrange;\n          if (range.attached && !range.parentRange) range.detach();\n          range.destroy();\n        }\n\n        view = view._hasGeneratedParent && view.parentView;\n      }\n    };\n\n    /**\n     * @summary Renders a template or View to a string of HTML.\n     * @locus Client\n     * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.\n     */\n    Blaze.toHTML = function (content, parentView) {\n      parentView = parentView || currentViewIfRendering();\n\n      return HTML.toHTML(Blaze._expandView(contentAsView(content), parentView));\n    };\n\n    /**\n     * @summary Renders a template or View to HTML with a data context.  Otherwise identical to `Blaze.toHTML`.\n     * @locus Client\n     * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.\n     * @param {Object|Function} data The data context to use, or a function returning a data context.\n     */\n    Blaze.toHTMLWithData = function (content, data, parentView) {\n      parentView = parentView || currentViewIfRendering();\n\n      return HTML.toHTML(Blaze._expandView(Blaze._TemplateWith(data, contentAsFunc(content)), parentView));\n    };\n\n    Blaze._toText = function (htmljs, parentView, textMode) {\n      if (typeof htmljs === 'function') throw new Error(\"Blaze._toText doesn't take a function, just HTMLjs\");\n\n      if (parentView != null && !(parentView instanceof Blaze.View)) {\n        // omitted parentView argument\n        textMode = parentView;\n        parentView = null;\n      }\n      parentView = parentView || currentViewIfRendering();\n\n      if (!textMode) throw new Error(\"textMode required\");\n      if (!(textMode === HTML.TEXTMODE.STRING || textMode === HTML.TEXTMODE.RCDATA || textMode === HTML.TEXTMODE.ATTRIBUTE)) throw new Error(\"Unknown textMode: \" + textMode);\n\n      return HTML.toText(Blaze._expand(htmljs, parentView), textMode);\n    };\n\n    /**\n     * @summary Returns the current data context, or the data context that was used when rendering a particular DOM element or View from a Meteor template.\n     * @locus Client\n     * @param {DOMElement|Blaze.View} [elementOrView] Optional.  An element that was rendered by a Meteor, or a View.\n     */\n    Blaze.getData = function (elementOrView) {\n      var theWith;\n\n      if (!elementOrView) {\n        theWith = Blaze.getView('with');\n      } else if (elementOrView instanceof Blaze.View) {\n        var view = elementOrView;\n        theWith = view.name === 'with' ? view : Blaze.getView(view, 'with');\n      } else if (typeof elementOrView.nodeType === 'number') {\n        if (elementOrView.nodeType !== 1) throw new Error(\"Expected DOM element\");\n        theWith = Blaze.getView(elementOrView, 'with');\n      } else {\n        throw new Error(\"Expected DOM element or View\");\n      }\n\n      return theWith ? theWith.dataVar.get() : null;\n    };\n\n    // For back-compat\n    Blaze.getElementData = function (element) {\n      Blaze._warn(\"Blaze.getElementData has been deprecated.  Use \" + \"Blaze.getData(element) instead.\");\n\n      if (element.nodeType !== 1) throw new Error(\"Expected DOM element\");\n\n      return Blaze.getData(element);\n    };\n\n    // Both arguments are optional.\n\n    /**\n     * @summary Gets either the current View, or the View enclosing the given DOM element.\n     * @locus Client\n     * @param {DOMElement} [element] Optional.  If specified, the View enclosing `element` is returned.\n     */\n    Blaze.getView = function (elementOrView, _viewName) {\n      var viewName = _viewName;\n\n      if (typeof elementOrView === 'string') {\n        // omitted elementOrView; viewName present\n        viewName = elementOrView;\n        elementOrView = null;\n      }\n\n      // We could eventually shorten the code by folding the logic\n      // from the other methods into this method.\n      if (!elementOrView) {\n        return Blaze._getCurrentView(viewName);\n      } else if (elementOrView instanceof Blaze.View) {\n        return Blaze._getParentView(elementOrView, viewName);\n      } else if (typeof elementOrView.nodeType === 'number') {\n        return Blaze._getElementView(elementOrView, viewName);\n      } else {\n        throw new Error(\"Expected DOM element or View\");\n      }\n    };\n\n    // Gets the current view or its nearest ancestor of name\n    // `name`.\n    Blaze._getCurrentView = function (name) {\n      var view = Blaze.currentView;\n      // Better to fail in cases where it doesn't make sense\n      // to use Blaze._getCurrentView().  There will be a current\n      // view anywhere it does.  You can check Blaze.currentView\n      // if you want to know whether there is one or not.\n      if (!view) throw new Error(\"There is no current view\");\n\n      if (name) {\n        while (view && view.name !== name) {\n          view = view.parentView;\n        }return view || null;\n      } else {\n        // Blaze._getCurrentView() with no arguments just returns\n        // Blaze.currentView.\n        return view;\n      }\n    };\n\n    Blaze._getParentView = function (view, name) {\n      var v = view.parentView;\n\n      if (name) {\n        while (v && v.name !== name) {\n          v = v.parentView;\n        }\n      }\n\n      return v || null;\n    };\n\n    Blaze._getElementView = function (elem, name) {\n      var range = Blaze._DOMRange.forElement(elem);\n      var view = null;\n      while (range && !view) {\n        view = range.view || null;\n        if (!view) {\n          if (range.parentRange) range = range.parentRange;else range = Blaze._DOMRange.forElement(range.parentElement);\n        }\n      }\n\n      if (name) {\n        while (view && view.name !== name) {\n          view = view.parentView;\n        }return view || null;\n      } else {\n        return view;\n      }\n    };\n\n    Blaze._addEventMap = function (view, eventMap, thisInHandler) {\n      thisInHandler = thisInHandler || null;\n      var handles = [];\n\n      if (!view._domrange) throw new Error(\"View must have a DOMRange\");\n\n      view._domrange.onAttached(function attached_eventMaps(range, element) {\n        _.each(eventMap, function (handler, spec) {\n          var clauses = spec.split(/,\\s+/);\n          // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']\n          _.each(clauses, function (clause) {\n            var parts = clause.split(/\\s+/);\n            if (parts.length === 0) return;\n\n            var newEvents = parts.shift();\n            var selector = parts.join(' ');\n            handles.push(Blaze._EventSupport.listen(element, newEvents, selector, function (evt) {\n              if (!range.containsElement(evt.currentTarget)) return null;\n              var handlerThis = thisInHandler || this;\n              var handlerArgs = arguments;\n              return Blaze._withCurrentView(view, function () {\n                return handler.apply(handlerThis, handlerArgs);\n              });\n            }, range, function (r) {\n              return r.parentRange;\n            }));\n          });\n        });\n      });\n\n      view.onViewDestroyed(function () {\n        _.each(handles, function (h) {\n          h.stop();\n        });\n        handles.length = 0;\n      });\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                     //\n    // packages/blaze/builtins.js                                                                                          //\n    //                                                                                                                     //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    Blaze._calculateCondition = function (cond) {\n      if (cond instanceof Array && cond.length === 0) cond = false;\n      return !!cond;\n    };\n\n    /**\n     * @summary Constructs a View that renders content with a data context.\n     * @locus Client\n     * @param {Object|Function} data An object to use as the data context, or a function returning such an object.  If a function is provided, it will be reactively re-run.\n     * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).\n     */\n    Blaze.With = function (data, contentFunc) {\n      var view = Blaze.View('with', contentFunc);\n\n      view.dataVar = new ReactiveVar();\n\n      view.onViewCreated(function () {\n        if (typeof data === 'function') {\n          // `data` is a reactive function\n          view.autorun(function () {\n            view.dataVar.set(data());\n          }, view.parentView, 'setData');\n        } else {\n          view.dataVar.set(data);\n        }\n      });\n\n      return view;\n    };\n\n    /**\n     * Attaches bindings to the instantiated view.\n     * @param {Object} bindings A dictionary of bindings, each binding name\n     * corresponds to a value or a function that will be reactively re-run.\n     * @param {View} view The target.\n     */\n    Blaze._attachBindingsToView = function (bindings, view) {\n      view.onViewCreated(function () {\n        _.each(bindings, function (binding, name) {\n          view._scopeBindings[name] = new ReactiveVar();\n          if (typeof binding === 'function') {\n            view.autorun(function () {\n              view._scopeBindings[name].set(binding());\n            }, view.parentView);\n          } else {\n            view._scopeBindings[name].set(binding);\n          }\n        });\n      });\n    };\n\n    /**\n     * @summary Constructs a View setting the local lexical scope in the block.\n     * @param {Function} bindings Dictionary mapping names of bindings to\n     * values or computations to reactively re-run.\n     * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).\n     */\n    Blaze.Let = function (bindings, contentFunc) {\n      var view = Blaze.View('let', contentFunc);\n      Blaze._attachBindingsToView(bindings, view);\n\n      return view;\n    };\n\n    /**\n     * @summary Constructs a View that renders content conditionally.\n     * @locus Client\n     * @param {Function} conditionFunc A function to reactively re-run.  Whether the result is truthy or falsy determines whether `contentFunc` or `elseFunc` is shown.  An empty array is considered falsy.\n     * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).\n     * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#renderable_content).  If no `elseFunc` is supplied, no content is shown in the \"else\" case.\n     */\n    Blaze.If = function (conditionFunc, contentFunc, elseFunc, _not) {\n      var conditionVar = new ReactiveVar();\n\n      var view = Blaze.View(_not ? 'unless' : 'if', function () {\n        return conditionVar.get() ? contentFunc() : elseFunc ? elseFunc() : null;\n      });\n      view.__conditionVar = conditionVar;\n      view.onViewCreated(function () {\n        this.autorun(function () {\n          var cond = Blaze._calculateCondition(conditionFunc());\n          conditionVar.set(_not ? !cond : cond);\n        }, this.parentView, 'condition');\n      });\n\n      return view;\n    };\n\n    /**\n     * @summary An inverted [`Blaze.If`](#blaze_if).\n     * @locus Client\n     * @param {Function} conditionFunc A function to reactively re-run.  If the result is falsy, `contentFunc` is shown, otherwise `elseFunc` is shown.  An empty array is considered falsy.\n     * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).\n     * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#renderable_content).  If no `elseFunc` is supplied, no content is shown in the \"else\" case.\n     */\n    Blaze.Unless = function (conditionFunc, contentFunc, elseFunc) {\n      return Blaze.If(conditionFunc, contentFunc, elseFunc, true /*_not*/);\n    };\n\n    /**\n     * @summary Constructs a View that renders `contentFunc` for each item in a sequence.\n     * @locus Client\n     * @param {Function} argFunc A function to reactively re-run. The function can\n     * return one of two options:\n     *\n     * 1. An object with two fields: '_variable' and '_sequence'. Each iterates over\n     *   '_sequence', it may be a Cursor, an array, null, or undefined. Inside the\n     *   Each body you will be able to get the current item from the sequence using\n     *   the name specified in the '_variable' field.\n     *\n     * 2. Just a sequence (Cursor, array, null, or undefined) not wrapped into an\n     *   object. Inside the Each body, the current item will be set as the data\n     *   context.\n     * @param {Function} contentFunc A Function that returns  [*renderable\n     * content*](#renderable_content).\n     * @param {Function} [elseFunc] A Function that returns [*renderable\n     * content*](#renderable_content) to display in the case when there are no items\n     * in the sequence.\n     */\n    Blaze.Each = function (argFunc, contentFunc, elseFunc) {\n      var eachView = Blaze.View('each', function () {\n        var subviews = this.initialSubviews;\n        this.initialSubviews = null;\n        if (this._isCreatedForExpansion) {\n          this.expandedValueDep = new Tracker.Dependency();\n          this.expandedValueDep.depend();\n        }\n        return subviews;\n      });\n      eachView.initialSubviews = [];\n      eachView.numItems = 0;\n      eachView.inElseMode = false;\n      eachView.stopHandle = null;\n      eachView.contentFunc = contentFunc;\n      eachView.elseFunc = elseFunc;\n      eachView.argVar = new ReactiveVar();\n      eachView.variableName = null;\n\n      // update the @index value in the scope of all subviews in the range\n      var updateIndices = function updateIndices(from, to) {\n        if (to === undefined) {\n          to = eachView.numItems - 1;\n        }\n\n        for (var i = from; i <= to; i++) {\n          var view = eachView._domrange.members[i].view;\n          view._scopeBindings['@index'].set(i);\n        }\n      };\n\n      eachView.onViewCreated(function () {\n        // We evaluate argFunc in an autorun to make sure\n        // Blaze.currentView is always set when it runs (rather than\n        // passing argFunc straight to ObserveSequence).\n        eachView.autorun(function () {\n          // argFunc can return either a sequence as is or a wrapper object with a\n          // _sequence and _variable fields set.\n          var arg = argFunc();\n          if (_.isObject(arg) && _.has(arg, '_sequence')) {\n            eachView.variableName = arg._variable || null;\n            arg = arg._sequence;\n          }\n\n          eachView.argVar.set(arg);\n        }, eachView.parentView, 'collection');\n\n        eachView.stopHandle = ObserveSequence.observe(function () {\n          return eachView.argVar.get();\n        }, {\n          addedAt: function addedAt(id, item, index) {\n            Tracker.nonreactive(function () {\n              var newItemView;\n              if (eachView.variableName) {\n                // new-style #each (as in {{#each item in items}})\n                // doesn't create a new data context\n                newItemView = Blaze.View('item', eachView.contentFunc);\n              } else {\n                newItemView = Blaze.With(item, eachView.contentFunc);\n              }\n\n              eachView.numItems++;\n\n              var bindings = {};\n              bindings['@index'] = index;\n              if (eachView.variableName) {\n                bindings[eachView.variableName] = item;\n              }\n              Blaze._attachBindingsToView(bindings, newItemView);\n\n              if (eachView.expandedValueDep) {\n                eachView.expandedValueDep.changed();\n              } else if (eachView._domrange) {\n                if (eachView.inElseMode) {\n                  eachView._domrange.removeMember(0);\n                  eachView.inElseMode = false;\n                }\n\n                var range = Blaze._materializeView(newItemView, eachView);\n                eachView._domrange.addMember(range, index);\n                updateIndices(index);\n              } else {\n                eachView.initialSubviews.splice(index, 0, newItemView);\n              }\n            });\n          },\n          removedAt: function removedAt(id, item, index) {\n            Tracker.nonreactive(function () {\n              eachView.numItems--;\n              if (eachView.expandedValueDep) {\n                eachView.expandedValueDep.changed();\n              } else if (eachView._domrange) {\n                eachView._domrange.removeMember(index);\n                updateIndices(index);\n                if (eachView.elseFunc && eachView.numItems === 0) {\n                  eachView.inElseMode = true;\n                  eachView._domrange.addMember(Blaze._materializeView(Blaze.View('each_else', eachView.elseFunc), eachView), 0);\n                }\n              } else {\n                eachView.initialSubviews.splice(index, 1);\n              }\n            });\n          },\n          changedAt: function changedAt(id, newItem, oldItem, index) {\n            Tracker.nonreactive(function () {\n              if (eachView.expandedValueDep) {\n                eachView.expandedValueDep.changed();\n              } else {\n                var itemView;\n                if (eachView._domrange) {\n                  itemView = eachView._domrange.getMember(index).view;\n                } else {\n                  itemView = eachView.initialSubviews[index];\n                }\n                if (eachView.variableName) {\n                  itemView._scopeBindings[eachView.variableName].set(newItem);\n                } else {\n                  itemView.dataVar.set(newItem);\n                }\n              }\n            });\n          },\n          movedTo: function movedTo(id, item, fromIndex, toIndex) {\n            Tracker.nonreactive(function () {\n              if (eachView.expandedValueDep) {\n                eachView.expandedValueDep.changed();\n              } else if (eachView._domrange) {\n                eachView._domrange.moveMember(fromIndex, toIndex);\n                updateIndices(Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex));\n              } else {\n                var subviews = eachView.initialSubviews;\n                var itemView = subviews[fromIndex];\n                subviews.splice(fromIndex, 1);\n                subviews.splice(toIndex, 0, itemView);\n              }\n            });\n          }\n        });\n\n        if (eachView.elseFunc && eachView.numItems === 0) {\n          eachView.inElseMode = true;\n          eachView.initialSubviews[0] = Blaze.View('each_else', eachView.elseFunc);\n        }\n      });\n\n      eachView.onViewDestroyed(function () {\n        if (eachView.stopHandle) eachView.stopHandle.stop();\n      });\n\n      return eachView;\n    };\n\n    Blaze._TemplateWith = function (arg, contentFunc) {\n      var w;\n\n      var argFunc = arg;\n      if (typeof arg !== 'function') {\n        argFunc = function argFunc() {\n          return arg;\n        };\n      }\n\n      // This is a little messy.  When we compile `{{> Template.contentBlock}}`, we\n      // wrap it in Blaze._InOuterTemplateScope in order to skip the intermediate\n      // parent Views in the current template.  However, when there's an argument\n      // (`{{> Template.contentBlock arg}}`), the argument needs to be evaluated\n      // in the original scope.  There's no good order to nest\n      // Blaze._InOuterTemplateScope and Spacebars.TemplateWith to achieve this,\n      // so we wrap argFunc to run it in the \"original parentView\" of the\n      // Blaze._InOuterTemplateScope.\n      //\n      // To make this better, reconsider _InOuterTemplateScope as a primitive.\n      // Longer term, evaluate expressions in the proper lexical scope.\n      var wrappedArgFunc = function wrappedArgFunc() {\n        var viewToEvaluateArg = null;\n        if (w.parentView && w.parentView.name === 'InOuterTemplateScope') {\n          viewToEvaluateArg = w.parentView.originalParentView;\n        }\n        if (viewToEvaluateArg) {\n          return Blaze._withCurrentView(viewToEvaluateArg, argFunc);\n        } else {\n          return argFunc();\n        }\n      };\n\n      var wrappedContentFunc = function wrappedContentFunc() {\n        var content = contentFunc.call(this);\n\n        // Since we are generating the Blaze._TemplateWith view for the\n        // user, set the flag on the child view.  If `content` is a template,\n        // construct the View so that we can set the flag.\n        if (content instanceof Blaze.Template) {\n          content = content.constructView();\n        }\n        if (content instanceof Blaze.View) {\n          content._hasGeneratedParent = true;\n        }\n\n        return content;\n      };\n\n      w = Blaze.With(wrappedArgFunc, wrappedContentFunc);\n      w.__isTemplateWith = true;\n      return w;\n    };\n\n    Blaze._InOuterTemplateScope = function (templateView, contentFunc) {\n      var view = Blaze.View('InOuterTemplateScope', contentFunc);\n      var parentView = templateView.parentView;\n\n      // Hack so that if you call `{{> foo bar}}` and it expands into\n      // `{{#with bar}}{{> foo}}{{/with}}`, and then `foo` is a template\n      // that inserts `{{> Template.contentBlock}}`, the data context for\n      // `Template.contentBlock` is not `bar` but the one enclosing that.\n      if (parentView.__isTemplateWith) parentView = parentView.parentView;\n\n      view.onViewCreated(function () {\n        this.originalParentView = this.parentView;\n        this.parentView = parentView;\n        this.__childDoesntStartNewLexicalScope = true;\n      });\n      return view;\n    };\n\n    // XXX COMPAT WITH 0.9.0\n    Blaze.InOuterTemplateScope = Blaze._InOuterTemplateScope;\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                     //\n    // packages/blaze/lookup.js                                                                                            //\n    //                                                                                                                     //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    Blaze._globalHelpers = {};\n\n    // Documented as Template.registerHelper.\n    // This definition also provides back-compat for `UI.registerHelper`.\n    Blaze.registerHelper = function (name, func) {\n      Blaze._globalHelpers[name] = func;\n    };\n\n    // Also documented as Template.deregisterHelper\n    Blaze.deregisterHelper = function (name) {\n      delete Blaze._globalHelpers[name];\n    };\n\n    var bindIfIsFunction = function bindIfIsFunction(x, target) {\n      if (typeof x !== 'function') return x;\n      return _.bind(x, target);\n    };\n\n    // If `x` is a function, binds the value of `this` for that function\n    // to the current data context.\n    var bindDataContext = function bindDataContext(x) {\n      if (typeof x === 'function') {\n        return function () {\n          var data = Blaze.getData();\n          if (data == null) data = {};\n          return x.apply(data, arguments);\n        };\n      }\n      return x;\n    };\n\n    Blaze._OLDSTYLE_HELPER = {};\n\n    Blaze._getTemplateHelper = function (template, name, tmplInstanceFunc) {\n      // XXX COMPAT WITH 0.9.3\n      var isKnownOldStyleHelper = false;\n\n      if (template.__helpers.has(name)) {\n        var helper = template.__helpers.get(name);\n        if (helper === Blaze._OLDSTYLE_HELPER) {\n          isKnownOldStyleHelper = true;\n        } else if (helper != null) {\n          return wrapHelper(bindDataContext(helper), tmplInstanceFunc);\n        } else {\n          return null;\n        }\n      }\n\n      // old-style helper\n      if (name in template) {\n        // Only warn once per helper\n        if (!isKnownOldStyleHelper) {\n          template.__helpers.set(name, Blaze._OLDSTYLE_HELPER);\n          if (!template._NOWARN_OLDSTYLE_HELPERS) {\n            Blaze._warn('Assigning helper with `' + template.viewName + '.' + name + ' = ...` is deprecated.  Use `' + template.viewName + '.helpers(...)` instead.');\n          }\n        }\n        if (template[name] != null) {\n          return wrapHelper(bindDataContext(template[name]), tmplInstanceFunc);\n        }\n      }\n\n      return null;\n    };\n\n    var wrapHelper = function wrapHelper(f, templateFunc) {\n      if (typeof f !== \"function\") {\n        return f;\n      }\n\n      return function () {\n        var self = this;\n        var args = arguments;\n\n        return Blaze.Template._withTemplateInstanceFunc(templateFunc, function () {\n          return Blaze._wrapCatchingExceptions(f, 'template helper').apply(self, args);\n        });\n      };\n    };\n\n    Blaze._lexicalBindingLookup = function (view, name) {\n      var currentView = view;\n      var blockHelpersStack = [];\n\n      // walk up the views stopping at a Spacebars.include or Template view that\n      // doesn't have an InOuterTemplateScope view as a parent\n      do {\n        // skip block helpers views\n        // if we found the binding on the scope, return it\n        if (_.has(currentView._scopeBindings, name)) {\n          var bindingReactiveVar = currentView._scopeBindings[name];\n          return function () {\n            return bindingReactiveVar.get();\n          };\n        }\n      } while (!(currentView.__startsNewLexicalScope && !(currentView.parentView && currentView.parentView.__childDoesntStartNewLexicalScope)) && (currentView = currentView.parentView));\n\n      return null;\n    };\n\n    // templateInstance argument is provided to be available for possible\n    // alternative implementations of this function by 3rd party packages.\n    Blaze._getTemplate = function (name, templateInstance) {\n      if (name in Blaze.Template && Blaze.Template[name] instanceof Blaze.Template) {\n        return Blaze.Template[name];\n      }\n      return null;\n    };\n\n    Blaze._getGlobalHelper = function (name, templateInstance) {\n      if (Blaze._globalHelpers[name] != null) {\n        return wrapHelper(bindDataContext(Blaze._globalHelpers[name]), templateInstance);\n      }\n      return null;\n    };\n\n    // Looks up a name, like \"foo\" or \"..\", as a helper of the\n    // current template; the name of a template; a global helper;\n    // or a property of the data context.  Called on the View of\n    // a template (i.e. a View with a `.template` property,\n    // where the helpers are).  Used for the first name in a\n    // \"path\" in a template tag, like \"foo\" in `{{foo.bar}}` or\n    // \"..\" in `{{frobulate ../blah}}`.\n    //\n    // Returns a function, a non-function value, or null.  If\n    // a function is found, it is bound appropriately.\n    //\n    // NOTE: This function must not establish any reactive\n    // dependencies itself.  If there is any reactivity in the\n    // value, lookup should return a function.\n    Blaze.View.prototype.lookup = function (name, _options) {\n      var template = this.template;\n      var lookupTemplate = _options && _options.template;\n      var helper;\n      var binding;\n      var boundTmplInstance;\n      var foundTemplate;\n\n      if (this.templateInstance) {\n        boundTmplInstance = _.bind(this.templateInstance, this);\n      }\n\n      // 0. looking up the parent data context with the special \"../\" syntax\n      if (/^\\./.test(name)) {\n        // starts with a dot. must be a series of dots which maps to an\n        // ancestor of the appropriate height.\n        if (!/^(\\.)+$/.test(name)) throw new Error(\"id starting with dot must be a series of dots\");\n\n        return Blaze._parentData(name.length - 1, true /*_functionWrapped*/);\n      }\n\n      // 1. look up a helper on the current template\n      if (template && (helper = Blaze._getTemplateHelper(template, name, boundTmplInstance)) != null) {\n        return helper;\n      }\n\n      // 2. look up a binding by traversing the lexical view hierarchy inside the\n      // current template\n      if (template && (binding = Blaze._lexicalBindingLookup(Blaze.currentView, name)) != null) {\n        return binding;\n      }\n\n      // 3. look up a template by name\n      if (lookupTemplate && (foundTemplate = Blaze._getTemplate(name, boundTmplInstance)) != null) {\n        return foundTemplate;\n      }\n\n      // 4. look up a global helper\n      if ((helper = Blaze._getGlobalHelper(name, boundTmplInstance)) != null) {\n        return helper;\n      }\n\n      // 5. look up in a data context\n      return function () {\n        var isCalledAsFunction = arguments.length > 0;\n        var data = Blaze.getData();\n        var x = data && data[name];\n        if (!x) {\n          if (lookupTemplate) {\n            throw new Error(\"No such template: \" + name);\n          } else if (isCalledAsFunction) {\n            throw new Error(\"No such function: \" + name);\n          } else if (name.charAt(0) === '@' && (x === null || x === undefined)) {\n            // Throw an error if the user tries to use a `@directive`\n            // that doesn't exist.  We don't implement all directives\n            // from Handlebars, so there's a potential for confusion\n            // if we fail silently.  On the other hand, we want to\n            // throw late in case some app or package wants to provide\n            // a missing directive.\n            throw new Error(\"Unsupported directive: \" + name);\n          }\n        }\n        if (!data) {\n          return null;\n        }\n        if (typeof x !== 'function') {\n          if (isCalledAsFunction) {\n            throw new Error(\"Can't call non-function: \" + x);\n          }\n          return x;\n        }\n        return x.apply(data, arguments);\n      };\n    };\n\n    // Implement Spacebars' {{../..}}.\n    // @param height {Number} The number of '..'s\n    Blaze._parentData = function (height, _functionWrapped) {\n      // If height is null or undefined, we default to 1, the first parent.\n      if (height == null) {\n        height = 1;\n      }\n      var theWith = Blaze.getView('with');\n      for (var i = 0; i < height && theWith; i++) {\n        theWith = Blaze.getView(theWith, 'with');\n      }\n\n      if (!theWith) return null;\n      if (_functionWrapped) return function () {\n        return theWith.dataVar.get();\n      };\n      return theWith.dataVar.get();\n    };\n\n    Blaze.View.prototype.lookupTemplate = function (name) {\n      return this.lookup(name, { template: true });\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                     //\n    // packages/blaze/template.js                                                                                          //\n    //                                                                                                                     //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // [new] Blaze.Template([viewName], renderFunction)\n    //\n    // `Blaze.Template` is the class of templates, like `Template.foo` in\n    // Meteor, which is `instanceof Template`.\n    //\n    // `viewKind` is a string that looks like \"Template.foo\" for templates\n    // defined by the compiler.\n\n    /**\n     * @class\n     * @summary Constructor for a Template, which is used to construct Views with particular name and content.\n     * @locus Client\n     * @param {String} [viewName] Optional.  A name for Views constructed by this Template.  See [`view.name`](#view_name).\n     * @param {Function} renderFunction A function that returns [*renderable content*](#renderable_content).  This function is used as the `renderFunction` for Views constructed by this Template.\n     */\n    Blaze.Template = function (viewName, renderFunction) {\n      if (!(this instanceof Blaze.Template))\n        // called without `new`\n        return new Blaze.Template(viewName, renderFunction);\n\n      if (typeof viewName === 'function') {\n        // omitted \"viewName\" argument\n        renderFunction = viewName;\n        viewName = '';\n      }\n      if (typeof viewName !== 'string') throw new Error(\"viewName must be a String (or omitted)\");\n      if (typeof renderFunction !== 'function') throw new Error(\"renderFunction must be a function\");\n\n      this.viewName = viewName;\n      this.renderFunction = renderFunction;\n\n      this.__helpers = new HelperMap();\n      this.__eventMaps = [];\n\n      this._callbacks = {\n        created: [],\n        rendered: [],\n        destroyed: []\n      };\n    };\n    var Template = Blaze.Template;\n\n    var HelperMap = function HelperMap() {};\n    HelperMap.prototype.get = function (name) {\n      return this[' ' + name];\n    };\n    HelperMap.prototype.set = function (name, helper) {\n      this[' ' + name] = helper;\n    };\n    HelperMap.prototype.has = function (name) {\n      return ' ' + name in this;\n    };\n\n    /**\n     * @summary Returns true if `value` is a template object like `Template.myTemplate`.\n     * @locus Client\n     * @param {Any} value The value to test.\n     */\n    Blaze.isTemplate = function (t) {\n      return t instanceof Blaze.Template;\n    };\n\n    /**\n     * @name  onCreated\n     * @instance\n     * @memberOf Template\n     * @summary Register a function to be called when an instance of this template is created.\n     * @param {Function} callback A function to be added as a callback.\n     * @locus Client\n     * @importFromPackage templating\n     */\n    Template.prototype.onCreated = function (cb) {\n      this._callbacks.created.push(cb);\n    };\n\n    /**\n     * @name  onRendered\n     * @instance\n     * @memberOf Template\n     * @summary Register a function to be called when an instance of this template is inserted into the DOM.\n     * @param {Function} callback A function to be added as a callback.\n     * @locus Client\n     * @importFromPackage templating\n     */\n    Template.prototype.onRendered = function (cb) {\n      this._callbacks.rendered.push(cb);\n    };\n\n    /**\n     * @name  onDestroyed\n     * @instance\n     * @memberOf Template\n     * @summary Register a function to be called when an instance of this template is removed from the DOM and destroyed.\n     * @param {Function} callback A function to be added as a callback.\n     * @locus Client\n     * @importFromPackage templating\n     */\n    Template.prototype.onDestroyed = function (cb) {\n      this._callbacks.destroyed.push(cb);\n    };\n\n    Template.prototype._getCallbacks = function (which) {\n      var self = this;\n      var callbacks = self[which] ? [self[which]] : [];\n      // Fire all callbacks added with the new API (Template.onRendered())\n      // as well as the old-style callback (e.g. Template.rendered) for\n      // backwards-compatibility.\n      callbacks = callbacks.concat(self._callbacks[which]);\n      return callbacks;\n    };\n\n    var fireCallbacks = function fireCallbacks(callbacks, template) {\n      Template._withTemplateInstanceFunc(function () {\n        return template;\n      }, function () {\n        for (var i = 0, N = callbacks.length; i < N; i++) {\n          callbacks[i].call(template);\n        }\n      });\n    };\n\n    Template.prototype.constructView = function (contentFunc, elseFunc) {\n      var self = this;\n      var view = Blaze.View(self.viewName, self.renderFunction);\n      view.template = self;\n\n      view.templateContentBlock = contentFunc ? new Template('(contentBlock)', contentFunc) : null;\n      view.templateElseBlock = elseFunc ? new Template('(elseBlock)', elseFunc) : null;\n\n      if (self.__eventMaps || _typeof(self.events) === 'object') {\n        view._onViewRendered(function () {\n          if (view.renderCount !== 1) return;\n\n          if (!self.__eventMaps.length && _typeof(self.events) === \"object\") {\n            // Provide limited back-compat support for `.events = {...}`\n            // syntax.  Pass `template.events` to the original `.events(...)`\n            // function.  This code must run only once per template, in\n            // order to not bind the handlers more than once, which is\n            // ensured by the fact that we only do this when `__eventMaps`\n            // is falsy, and we cause it to be set now.\n            Template.prototype.events.call(self, self.events);\n          }\n\n          _.each(self.__eventMaps, function (m) {\n            Blaze._addEventMap(view, m, view);\n          });\n        });\n      }\n\n      view._templateInstance = new Blaze.TemplateInstance(view);\n      view.templateInstance = function () {\n        // Update data, firstNode, and lastNode, and return the TemplateInstance\n        // object.\n        var inst = view._templateInstance;\n\n        /**\n         * @instance\n         * @memberOf Blaze.TemplateInstance\n         * @name  data\n         * @summary The data context of this instance's latest invocation.\n         * @locus Client\n         */\n        inst.data = Blaze.getData(view);\n\n        if (view._domrange && !view.isDestroyed) {\n          inst.firstNode = view._domrange.firstNode();\n          inst.lastNode = view._domrange.lastNode();\n        } else {\n          // on 'created' or 'destroyed' callbacks we don't have a DomRange\n          inst.firstNode = null;\n          inst.lastNode = null;\n        }\n\n        return inst;\n      };\n\n      /**\n       * @name  created\n       * @instance\n       * @memberOf Template\n       * @summary Provide a callback when an instance of a template is created.\n       * @locus Client\n       * @deprecated in 1.1\n       */\n      // To avoid situations when new callbacks are added in between view\n      // instantiation and event being fired, decide on all callbacks to fire\n      // immediately and then fire them on the event.\n      var createdCallbacks = self._getCallbacks('created');\n      view.onViewCreated(function () {\n        fireCallbacks(createdCallbacks, view.templateInstance());\n      });\n\n      /**\n       * @name  rendered\n       * @instance\n       * @memberOf Template\n       * @summary Provide a callback when an instance of a template is rendered.\n       * @locus Client\n       * @deprecated in 1.1\n       */\n      var renderedCallbacks = self._getCallbacks('rendered');\n      view.onViewReady(function () {\n        fireCallbacks(renderedCallbacks, view.templateInstance());\n      });\n\n      /**\n       * @name  destroyed\n       * @instance\n       * @memberOf Template\n       * @summary Provide a callback when an instance of a template is destroyed.\n       * @locus Client\n       * @deprecated in 1.1\n       */\n      var destroyedCallbacks = self._getCallbacks('destroyed');\n      view.onViewDestroyed(function () {\n        fireCallbacks(destroyedCallbacks, view.templateInstance());\n      });\n\n      return view;\n    };\n\n    /**\n     * @class\n     * @summary The class for template instances\n     * @param {Blaze.View} view\n     * @instanceName template\n     */\n    Blaze.TemplateInstance = function (view) {\n      if (!(this instanceof Blaze.TemplateInstance))\n        // called without `new`\n        return new Blaze.TemplateInstance(view);\n\n      if (!(view instanceof Blaze.View)) throw new Error(\"View required\");\n\n      view._templateInstance = this;\n\n      /**\n       * @name view\n       * @memberOf Blaze.TemplateInstance\n       * @instance\n       * @summary The [View](#blaze_view) object for this invocation of the template.\n       * @locus Client\n       * @type {Blaze.View}\n       */\n      this.view = view;\n      this.data = null;\n\n      /**\n       * @name firstNode\n       * @memberOf Blaze.TemplateInstance\n       * @instance\n       * @summary The first top-level DOM node in this template instance.\n       * @locus Client\n       * @type {DOMNode}\n       */\n      this.firstNode = null;\n\n      /**\n       * @name lastNode\n       * @memberOf Blaze.TemplateInstance\n       * @instance\n       * @summary The last top-level DOM node in this template instance.\n       * @locus Client\n       * @type {DOMNode}\n       */\n      this.lastNode = null;\n\n      // This dependency is used to identify state transitions in\n      // _subscriptionHandles which could cause the result of\n      // TemplateInstance#subscriptionsReady to change. Basically this is triggered\n      // whenever a new subscription handle is added or when a subscription handle\n      // is removed and they are not ready.\n      this._allSubsReadyDep = new Tracker.Dependency();\n      this._allSubsReady = false;\n\n      this._subscriptionHandles = {};\n    };\n\n    /**\n     * @summary Find all elements matching `selector` in this template instance, and return them as a JQuery object.\n     * @locus Client\n     * @param {String} selector The CSS selector to match, scoped to the template contents.\n     * @returns {DOMNode[]}\n     */\n    Blaze.TemplateInstance.prototype.$ = function (selector) {\n      var view = this.view;\n      if (!view._domrange) throw new Error(\"Can't use $ on template instance with no DOM\");\n      return view._domrange.$(selector);\n    };\n\n    /**\n     * @summary Find all elements matching `selector` in this template instance.\n     * @locus Client\n     * @param {String} selector The CSS selector to match, scoped to the template contents.\n     * @returns {DOMElement[]}\n     */\n    Blaze.TemplateInstance.prototype.findAll = function (selector) {\n      return Array.prototype.slice.call(this.$(selector));\n    };\n\n    /**\n     * @summary Find one element matching `selector` in this template instance.\n     * @locus Client\n     * @param {String} selector The CSS selector to match, scoped to the template contents.\n     * @returns {DOMElement}\n     */\n    Blaze.TemplateInstance.prototype.find = function (selector) {\n      var result = this.$(selector);\n      return result[0] || null;\n    };\n\n    /**\n     * @summary A version of [Tracker.autorun](#tracker_autorun) that is stopped when the template is destroyed.\n     * @locus Client\n     * @param {Function} runFunc The function to run. It receives one argument: a Tracker.Computation object.\n     */\n    Blaze.TemplateInstance.prototype.autorun = function (f) {\n      return this.view.autorun(f);\n    };\n\n    /**\n     * @summary A version of [Meteor.subscribe](#meteor_subscribe) that is stopped\n     * when the template is destroyed.\n     * @return {SubscriptionHandle} The subscription handle to the newly made\n     * subscription. Call `handle.stop()` to manually stop the subscription, or\n     * `handle.ready()` to find out if this particular subscription has loaded all\n     * of its inital data.\n     * @locus Client\n     * @param {String} name Name of the subscription.  Matches the name of the\n     * server's `publish()` call.\n     * @param {Any} [arg1,arg2...] Optional arguments passed to publisher function\n     * on server.\n     * @param {Function|Object} [options] If a function is passed instead of an\n     * object, it is interpreted as an `onReady` callback.\n     * @param {Function} [options.onReady] Passed to [`Meteor.subscribe`](#meteor_subscribe).\n     * @param {Function} [options.onStop] Passed to [`Meteor.subscribe`](#meteor_subscribe).\n     * @param {DDP.Connection} [options.connection] The connection on which to make the\n     * subscription.\n     */\n    Blaze.TemplateInstance.prototype.subscribe = function () /* arguments */{\n      var self = this;\n\n      var subHandles = self._subscriptionHandles;\n      var args = _.toArray(arguments);\n\n      // Duplicate logic from Meteor.subscribe\n      var options = {};\n      if (args.length) {\n        var lastParam = _.last(args);\n\n        // Match pattern to check if the last arg is an options argument\n        var lastParamOptionsPattern = {\n          onReady: Match.Optional(Function),\n          // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use\n          // onStop with an error callback instead.\n          onError: Match.Optional(Function),\n          onStop: Match.Optional(Function),\n          connection: Match.Optional(Match.Any)\n        };\n\n        if (_.isFunction(lastParam)) {\n          options.onReady = args.pop();\n        } else if (lastParam && !_.isEmpty(lastParam) && Match.test(lastParam, lastParamOptionsPattern)) {\n          options = args.pop();\n        }\n      }\n\n      var subHandle;\n      var oldStopped = options.onStop;\n      options.onStop = function (error) {\n        // When the subscription is stopped, remove it from the set of tracked\n        // subscriptions to avoid this list growing without bound\n        delete subHandles[subHandle.subscriptionId];\n\n        // Removing a subscription can only change the result of subscriptionsReady\n        // if we are not ready (that subscription could be the one blocking us being\n        // ready).\n        if (!self._allSubsReady) {\n          self._allSubsReadyDep.changed();\n        }\n\n        if (oldStopped) {\n          oldStopped(error);\n        }\n      };\n\n      var connection = options.connection;\n      var callbacks = _.pick(options, [\"onReady\", \"onError\", \"onStop\"]);\n\n      // The callbacks are passed as the last item in the arguments array passed to\n      // View#subscribe\n      args.push(callbacks);\n\n      // View#subscribe takes the connection as one of the options in the last\n      // argument\n      subHandle = self.view.subscribe.call(self.view, args, {\n        connection: connection\n      });\n\n      if (!_.has(subHandles, subHandle.subscriptionId)) {\n        subHandles[subHandle.subscriptionId] = subHandle;\n\n        // Adding a new subscription will always cause us to transition from ready\n        // to not ready, but if we are already not ready then this can't make us\n        // ready.\n        if (self._allSubsReady) {\n          self._allSubsReadyDep.changed();\n        }\n      }\n\n      return subHandle;\n    };\n\n    /**\n     * @summary A reactive function that returns true when all of the subscriptions\n     * called with [this.subscribe](#TemplateInstance-subscribe) are ready.\n     * @return {Boolean} True if all subscriptions on this template instance are\n     * ready.\n     */\n    Blaze.TemplateInstance.prototype.subscriptionsReady = function () {\n      this._allSubsReadyDep.depend();\n\n      this._allSubsReady = _.all(this._subscriptionHandles, function (handle) {\n        return handle.ready();\n      });\n\n      return this._allSubsReady;\n    };\n\n    /**\n     * @summary Specify template helpers available to this template.\n     * @locus Client\n     * @param {Object} helpers Dictionary of helper functions by name.\n     * @importFromPackage templating\n     */\n    Template.prototype.helpers = function (dict) {\n      if (!_.isObject(dict)) {\n        throw new Error(\"Helpers dictionary has to be an object\");\n      }\n\n      for (var k in dict) {\n        this.__helpers.set(k, dict[k]);\n      }\n    };\n\n    // Kind of like Blaze.currentView but for the template instance.\n    // This is a function, not a value -- so that not all helpers\n    // are implicitly dependent on the current template instance's `data` property,\n    // which would make them dependenct on the data context of the template\n    // inclusion.\n    Template._currentTemplateInstanceFunc = null;\n\n    Template._withTemplateInstanceFunc = function (templateInstanceFunc, func) {\n      if (typeof func !== 'function') throw new Error(\"Expected function, got: \" + func);\n      var oldTmplInstanceFunc = Template._currentTemplateInstanceFunc;\n      try {\n        Template._currentTemplateInstanceFunc = templateInstanceFunc;\n        return func();\n      } finally {\n        Template._currentTemplateInstanceFunc = oldTmplInstanceFunc;\n      }\n    };\n\n    /**\n     * @summary Specify event handlers for this template.\n     * @locus Client\n     * @param {EventMap} eventMap Event handlers to associate with this template.\n     * @importFromPackage templating\n     */\n    Template.prototype.events = function (eventMap) {\n      if (!_.isObject(eventMap)) {\n        throw new Error(\"Event map has to be an object\");\n      }\n\n      var template = this;\n      var eventMap2 = {};\n      for (var k in eventMap) {\n        eventMap2[k] = function (k, v) {\n          return function (event /*, ...*/) {\n            var view = this; // passed by EventAugmenter\n            var data = Blaze.getData(event.currentTarget);\n            if (data == null) data = {};\n            var args = Array.prototype.slice.call(arguments);\n            var tmplInstanceFunc = _.bind(view.templateInstance, view);\n            args.splice(1, 0, tmplInstanceFunc());\n\n            return Template._withTemplateInstanceFunc(tmplInstanceFunc, function () {\n              return v.apply(data, args);\n            });\n          };\n        }(k, eventMap[k]);\n      }\n\n      template.__eventMaps.push(eventMap2);\n    };\n\n    /**\n     * @function\n     * @name instance\n     * @memberOf Template\n     * @summary The [template instance](#template_inst) corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.\n     * @locus Client\n     * @returns {Blaze.TemplateInstance}\n     * @importFromPackage templating\n     */\n    Template.instance = function () {\n      return Template._currentTemplateInstanceFunc && Template._currentTemplateInstanceFunc();\n    };\n\n    // Note: Template.currentData() is documented to take zero arguments,\n    // while Blaze.getData takes up to one.\n\n    /**\n     * @summary\n     *\n     * - Inside an `onCreated`, `onRendered`, or `onDestroyed` callback, returns\n     * the data context of the template.\n     * - Inside an event handler, returns the data context of the template on which\n     * this event handler was defined.\n     * - Inside a helper, returns the data context of the DOM node where the helper\n     * was used.\n     *\n     * Establishes a reactive dependency on the result.\n     * @locus Client\n     * @function\n     * @importFromPackage templating\n     */\n    Template.currentData = Blaze.getData;\n\n    /**\n     * @summary Accesses other data contexts that enclose the current data context.\n     * @locus Client\n     * @function\n     * @param {Integer} [numLevels] The number of levels beyond the current data context to look. Defaults to 1.\n     * @importFromPackage templating\n     */\n    Template.parentData = Blaze._parentData;\n\n    /**\n     * @summary Defines a [helper function](#template_helpers) which can be used from all templates.\n     * @locus Client\n     * @function\n     * @param {String} name The name of the helper function you are defining.\n     * @param {Function} function The helper function itself.\n     * @importFromPackage templating\n     */\n    Template.registerHelper = Blaze.registerHelper;\n\n    /**\n     * @summary Removes a global [helper function](#template_helpers).\n     * @locus Client\n     * @function\n     * @param {String} name The name of the helper function you are defining.\n     * @importFromPackage templating\n     */\n    Template.deregisterHelper = Blaze.deregisterHelper;\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                     //\n    // packages/blaze/backcompat.js                                                                                        //\n    //                                                                                                                     //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    UI = Blaze;\n\n    Blaze.ReactiveVar = ReactiveVar;\n    UI._templateInstance = Blaze.Template.instance;\n\n    Handlebars = {};\n    Handlebars.registerHelper = Blaze.registerHelper;\n\n    Handlebars._escape = Blaze._escape;\n\n    // Return these from {{...}} helpers to achieve the same as returning\n    // strings from {{{...}}} helpers\n    Handlebars.SafeString = function (string) {\n      this.string = string;\n    };\n    Handlebars.SafeString.prototype.toString = function () {\n      return this.string.toString();\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  (function (pkg, symbols) {\n    for (var s in symbols) {\n      s in pkg || (pkg[s] = symbols[s]);\n    }\n  })(Package.blaze = {}, {\n    Blaze: Blaze,\n    UI: UI,\n    Handlebars: Handlebars\n  });\n})();\n\n//# sourceMappingURL=blaze.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/blaze.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/blaze.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar ObserveSequence = Package['observe-sequence'].ObserveSequence;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Blaze, UI, Handlebars;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/blaze/preamble.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * @namespace Blaze\n * @summary The namespace for all Blaze-related methods and classes.\n */\nBlaze = {};\n\n// Utility to HTML-escape a string.  Included for legacy reasons.\nBlaze._escape = (function() {\n  var escape_map = {\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#x27;\",\n    \"`\": \"&#x60;\", /* IE allows backtick-delimited attributes?? */\n    \"&\": \"&amp;\"\n  };\n  var escape_one = function(c) {\n    return escape_map[c];\n  };\n\n  return function (x) {\n    return x.replace(/[&<>\"'`]/g, escape_one);\n  };\n})();\n\nBlaze._warn = function (msg) {\n  msg = 'Warning: ' + msg;\n\n  if ((typeof console !== 'undefined') && console.warn) {\n    console.warn(msg);\n  }\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/blaze/exceptions.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar debugFunc;\n\n// We call into user code in many places, and it's nice to catch exceptions\n// propagated from user code immediately so that the whole system doesn't just\n// break.  Catching exceptions is easy; reporting them is hard.  This helper\n// reports exceptions.\n//\n// Usage:\n//\n// ```\n// try {\n//   // ... someStuff ...\n// } catch (e) {\n//   reportUIException(e);\n// }\n// ```\n//\n// An optional second argument overrides the default message.\n\n// Set this to `true` to cause `reportException` to throw\n// the next exception rather than reporting it.  This is\n// useful in unit tests that test error messages.\nBlaze._throwNextException = false;\n\nBlaze._reportException = function (e, msg) {\n  if (Blaze._throwNextException) {\n    Blaze._throwNextException = false;\n    throw e;\n  }\n\n  if (! debugFunc)\n    // adapted from Tracker\n    debugFunc = function () {\n      return (typeof Meteor !== \"undefined\" ? Meteor._debug :\n              ((typeof console !== \"undefined\") && console.log ? console.log :\n               function () {}));\n    };\n\n  // In Chrome, `e.stack` is a multiline string that starts with the message\n  // and contains a stack trace.  Furthermore, `console.log` makes it clickable.\n  // `console.log` supplies the space between the two arguments.\n  debugFunc()(msg || 'Exception caught in template:', e.stack || e.message || e);\n};\n\nBlaze._wrapCatchingExceptions = function (f, where) {\n  if (typeof f !== 'function')\n    return f;\n\n  return function () {\n    try {\n      return f.apply(this, arguments);\n    } catch (e) {\n      Blaze._reportException(e, 'Exception in ' + where + ':');\n    }\n  };\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/blaze/view.js                                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/// [new] Blaze.View([name], renderMethod)\n///\n/// Blaze.View is the building block of reactive DOM.  Views have\n/// the following features:\n///\n/// * lifecycle callbacks - Views are created, rendered, and destroyed,\n///   and callbacks can be registered to fire when these things happen.\n///\n/// * parent pointer - A View points to its parentView, which is the\n///   View that caused it to be rendered.  These pointers form a\n///   hierarchy or tree of Views.\n///\n/// * render() method - A View's render() method specifies the DOM\n///   (or HTML) content of the View.  If the method establishes\n///   reactive dependencies, it may be re-run.\n///\n/// * a DOMRange - If a View is rendered to DOM, its position and\n///   extent in the DOM are tracked using a DOMRange object.\n///\n/// When a View is constructed by calling Blaze.View, the View is\n/// not yet considered \"created.\"  It doesn't have a parentView yet,\n/// and no logic has been run to initialize the View.  All real\n/// work is deferred until at least creation time, when the onViewCreated\n/// callbacks are fired, which happens when the View is \"used\" in\n/// some way that requires it to be rendered.\n///\n/// ...more lifecycle stuff\n///\n/// `name` is an optional string tag identifying the View.  The only\n/// time it's used is when looking in the View tree for a View of a\n/// particular name; for example, data contexts are stored on Views\n/// of name \"with\".  Names are also useful when debugging, so in\n/// general it's good for functions that create Views to set the name.\n/// Views associated with templates have names of the form \"Template.foo\".\n\n/**\n * @class\n * @summary Constructor for a View, which represents a reactive region of DOM.\n * @locus Client\n * @param {String} [name] Optional.  A name for this type of View.  See [`view.name`](#view_name).\n * @param {Function} renderFunction A function that returns [*renderable content*](#renderable_content).  In this function, `this` is bound to the View.\n */\nBlaze.View = function (name, render) {\n  if (! (this instanceof Blaze.View))\n    // called without `new`\n    return new Blaze.View(name, render);\n\n  if (typeof name === 'function') {\n    // omitted \"name\" argument\n    render = name;\n    name = '';\n  }\n  this.name = name;\n  this._render = render;\n\n  this._callbacks = {\n    created: null,\n    rendered: null,\n    destroyed: null\n  };\n\n  // Setting all properties here is good for readability,\n  // and also may help Chrome optimize the code by keeping\n  // the View object from changing shape too much.\n  this.isCreated = false;\n  this._isCreatedForExpansion = false;\n  this.isRendered = false;\n  this._isAttached = false;\n  this.isDestroyed = false;\n  this._isInRender = false;\n  this.parentView = null;\n  this._domrange = null;\n  // This flag is normally set to false except for the cases when view's parent\n  // was generated as part of expanding some syntactic sugar expressions or\n  // methods.\n  // Ex.: Blaze.renderWithData is an equivalent to creating a view with regular\n  // Blaze.render and wrapping it into {{#with data}}{{/with}} view. Since the\n  // users don't know anything about these generated parent views, Blaze needs\n  // this information to be available on views to make smarter decisions. For\n  // example: removing the generated parent view with the view on Blaze.remove.\n  this._hasGeneratedParent = false;\n  // Bindings accessible to children views (via view.lookup('name')) within the\n  // closest template view.\n  this._scopeBindings = {};\n\n  this.renderCount = 0;\n};\n\nBlaze.View.prototype._render = function () { return null; };\n\nBlaze.View.prototype.onViewCreated = function (cb) {\n  this._callbacks.created = this._callbacks.created || [];\n  this._callbacks.created.push(cb);\n};\n\nBlaze.View.prototype._onViewRendered = function (cb) {\n  this._callbacks.rendered = this._callbacks.rendered || [];\n  this._callbacks.rendered.push(cb);\n};\n\nBlaze.View.prototype.onViewReady = function (cb) {\n  var self = this;\n  var fire = function () {\n    Tracker.afterFlush(function () {\n      if (! self.isDestroyed) {\n        Blaze._withCurrentView(self, function () {\n          cb.call(self);\n        });\n      }\n    });\n  };\n  self._onViewRendered(function onViewRendered() {\n    if (self.isDestroyed)\n      return;\n    if (! self._domrange.attached)\n      self._domrange.onAttached(fire);\n    else\n      fire();\n  });\n};\n\nBlaze.View.prototype.onViewDestroyed = function (cb) {\n  this._callbacks.destroyed = this._callbacks.destroyed || [];\n  this._callbacks.destroyed.push(cb);\n};\nBlaze.View.prototype.removeViewDestroyedListener = function (cb) {\n  var destroyed = this._callbacks.destroyed;\n  if (! destroyed)\n    return;\n  var index = _.lastIndexOf(destroyed, cb);\n  if (index !== -1) {\n    // XXX You'd think the right thing to do would be splice, but _fireCallbacks\n    // gets sad if you remove callbacks while iterating over the list.  Should\n    // change this to use callback-hook or EventEmitter or something else that\n    // properly supports removal.\n    destroyed[index] = null;\n  }\n};\n\n/// View#autorun(func)\n///\n/// Sets up a Tracker autorun that is \"scoped\" to this View in two\n/// important ways: 1) Blaze.currentView is automatically set\n/// on every re-run, and 2) the autorun is stopped when the\n/// View is destroyed.  As with Tracker.autorun, the first run of\n/// the function is immediate, and a Computation object that can\n/// be used to stop the autorun is returned.\n///\n/// View#autorun is meant to be called from View callbacks like\n/// onViewCreated, or from outside the rendering process.  It may not\n/// be called before the onViewCreated callbacks are fired (too early),\n/// or from a render() method (too confusing).\n///\n/// Typically, autoruns that update the state\n/// of the View (as in Blaze.With) should be started from an onViewCreated\n/// callback.  Autoruns that update the DOM should be started\n/// from either onViewCreated (guarded against the absence of\n/// view._domrange), or onViewReady.\nBlaze.View.prototype.autorun = function (f, _inViewScope, displayName) {\n  var self = this;\n\n  // The restrictions on when View#autorun can be called are in order\n  // to avoid bad patterns, like creating a Blaze.View and immediately\n  // calling autorun on it.  A freshly created View is not ready to\n  // have logic run on it; it doesn't have a parentView, for example.\n  // It's when the View is materialized or expanded that the onViewCreated\n  // handlers are fired and the View starts up.\n  //\n  // Letting the render() method call `this.autorun()` is problematic\n  // because of re-render.  The best we can do is to stop the old\n  // autorun and start a new one for each render, but that's a pattern\n  // we try to avoid internally because it leads to helpers being\n  // called extra times, in the case where the autorun causes the\n  // view to re-render (and thus the autorun to be torn down and a\n  // new one established).\n  //\n  // We could lift these restrictions in various ways.  One interesting\n  // idea is to allow you to call `view.autorun` after instantiating\n  // `view`, and automatically wrap it in `view.onViewCreated`, deferring\n  // the autorun so that it starts at an appropriate time.  However,\n  // then we can't return the Computation object to the caller, because\n  // it doesn't exist yet.\n  if (! self.isCreated) {\n    throw new Error(\"View#autorun must be called from the created callback at the earliest\");\n  }\n  if (this._isInRender) {\n    throw new Error(\"Can't call View#autorun from inside render(); try calling it from the created or rendered callback\");\n  }\n  if (Tracker.active) {\n    throw new Error(\"Can't call View#autorun from a Tracker Computation; try calling it from the created or rendered callback\");\n  }\n\n  var templateInstanceFunc = Blaze.Template._currentTemplateInstanceFunc;\n\n  var func = function viewAutorun(c) {\n    return Blaze._withCurrentView(_inViewScope || self, function () {\n      return Blaze.Template._withTemplateInstanceFunc(\n        templateInstanceFunc, function () {\n          return f.call(self, c);\n        });\n    });\n  };\n\n  // Give the autorun function a better name for debugging and profiling.\n  // The `displayName` property is not part of the spec but browsers like Chrome\n  // and Firefox prefer it in debuggers over the name function was declared by.\n  func.displayName =\n    (self.name || 'anonymous') + ':' + (displayName || 'anonymous');\n  var comp = Tracker.autorun(func);\n\n  var stopComputation = function () { comp.stop(); };\n  self.onViewDestroyed(stopComputation);\n  comp.onStop(function () {\n    self.removeViewDestroyedListener(stopComputation);\n  });\n\n  return comp;\n};\n\nBlaze.View.prototype._errorIfShouldntCallSubscribe = function () {\n  var self = this;\n\n  if (! self.isCreated) {\n    throw new Error(\"View#subscribe must be called from the created callback at the earliest\");\n  }\n  if (self._isInRender) {\n    throw new Error(\"Can't call View#subscribe from inside render(); try calling it from the created or rendered callback\");\n  }\n  if (self.isDestroyed) {\n    throw new Error(\"Can't call View#subscribe from inside the destroyed callback, try calling it inside created or rendered.\");\n  }\n};\n\n/**\n * Just like Blaze.View#autorun, but with Meteor.subscribe instead of\n * Tracker.autorun. Stop the subscription when the view is destroyed.\n * @return {SubscriptionHandle} A handle to the subscription so that you can\n * see if it is ready, or stop it manually\n */\nBlaze.View.prototype.subscribe = function (args, options) {\n  var self = this;\n  options = options || {};\n\n  self._errorIfShouldntCallSubscribe();\n\n  var subHandle;\n  if (options.connection) {\n    subHandle = options.connection.subscribe.apply(options.connection, args);\n  } else {\n    subHandle = Meteor.subscribe.apply(Meteor, args);\n  }\n\n  self.onViewDestroyed(function () {\n    subHandle.stop();\n  });\n\n  return subHandle;\n};\n\nBlaze.View.prototype.firstNode = function () {\n  if (! this._isAttached)\n    throw new Error(\"View must be attached before accessing its DOM\");\n\n  return this._domrange.firstNode();\n};\n\nBlaze.View.prototype.lastNode = function () {\n  if (! this._isAttached)\n    throw new Error(\"View must be attached before accessing its DOM\");\n\n  return this._domrange.lastNode();\n};\n\nBlaze._fireCallbacks = function (view, which) {\n  Blaze._withCurrentView(view, function () {\n    Tracker.nonreactive(function fireCallbacks() {\n      var cbs = view._callbacks[which];\n      for (var i = 0, N = (cbs && cbs.length); i < N; i++)\n        cbs[i] && cbs[i].call(view);\n    });\n  });\n};\n\nBlaze._createView = function (view, parentView, forExpansion) {\n  if (view.isCreated)\n    throw new Error(\"Can't render the same View twice\");\n\n  view.parentView = (parentView || null);\n  view.isCreated = true;\n  if (forExpansion)\n    view._isCreatedForExpansion = true;\n\n  Blaze._fireCallbacks(view, 'created');\n};\n\nvar doFirstRender = function (view, initialContent) {\n  var domrange = new Blaze._DOMRange(initialContent);\n  view._domrange = domrange;\n  domrange.view = view;\n  view.isRendered = true;\n  Blaze._fireCallbacks(view, 'rendered');\n\n  var teardownHook = null;\n\n  domrange.onAttached(function attached(range, element) {\n    view._isAttached = true;\n\n    teardownHook = Blaze._DOMBackend.Teardown.onElementTeardown(\n      element, function teardown() {\n        Blaze._destroyView(view, true /* _skipNodes */);\n      });\n  });\n\n  // tear down the teardown hook\n  view.onViewDestroyed(function () {\n    teardownHook && teardownHook.stop();\n    teardownHook = null;\n  });\n\n  return domrange;\n};\n\n// Take an uncreated View `view` and create and render it to DOM,\n// setting up the autorun that updates the View.  Returns a new\n// DOMRange, which has been associated with the View.\n//\n// The private arguments `_workStack` and `_intoArray` are passed in\n// by Blaze._materializeDOM and are only present for recursive calls\n// (when there is some other _materializeView on the stack).  If\n// provided, then we avoid the mutual recursion of calling back into\n// Blaze._materializeDOM so that deep View hierarchies don't blow the\n// stack.  Instead, we push tasks onto workStack for the initial\n// rendering and subsequent setup of the View, and they are done after\n// we return.  When there is a _workStack, we do not return the new\n// DOMRange, but instead push it into _intoArray from a _workStack\n// task.\nBlaze._materializeView = function (view, parentView, _workStack, _intoArray) {\n  Blaze._createView(view, parentView);\n\n  var domrange;\n  var lastHtmljs;\n  // We don't expect to be called in a Computation, but just in case,\n  // wrap in Tracker.nonreactive.\n  Tracker.nonreactive(function () {\n    view.autorun(function doRender(c) {\n      // `view.autorun` sets the current view.\n      view.renderCount++;\n      view._isInRender = true;\n      // Any dependencies that should invalidate this Computation come\n      // from this line:\n      var htmljs = view._render();\n      view._isInRender = false;\n\n      if (! c.firstRun) {\n        Tracker.nonreactive(function doMaterialize() {\n          // re-render\n          var rangesAndNodes = Blaze._materializeDOM(htmljs, [], view);\n          if (! Blaze._isContentEqual(lastHtmljs, htmljs)) {\n            domrange.setMembers(rangesAndNodes);\n            Blaze._fireCallbacks(view, 'rendered');\n          }\n        });\n      }\n      lastHtmljs = htmljs;\n\n      // Causes any nested views to stop immediately, not when we call\n      // `setMembers` the next time around the autorun.  Otherwise,\n      // helpers in the DOM tree to be replaced might be scheduled\n      // to re-run before we have a chance to stop them.\n      Tracker.onInvalidate(function () {\n        if (domrange) {\n          domrange.destroyMembers();\n        }\n      });\n    }, undefined, 'materialize');\n\n    // first render.  lastHtmljs is the first htmljs.\n    var initialContents;\n    if (! _workStack) {\n      initialContents = Blaze._materializeDOM(lastHtmljs, [], view);\n      domrange = doFirstRender(view, initialContents);\n      initialContents = null; // help GC because we close over this scope a lot\n    } else {\n      // We're being called from Blaze._materializeDOM, so to avoid\n      // recursion and save stack space, provide a description of the\n      // work to be done instead of doing it.  Tasks pushed onto\n      // _workStack will be done in LIFO order after we return.\n      // The work will still be done within a Tracker.nonreactive,\n      // because it will be done by some call to Blaze._materializeDOM\n      // (which is always called in a Tracker.nonreactive).\n      initialContents = [];\n      // push this function first so that it happens last\n      _workStack.push(function () {\n        domrange = doFirstRender(view, initialContents);\n        initialContents = null; // help GC because of all the closures here\n        _intoArray.push(domrange);\n      });\n      // now push the task that calculates initialContents\n      _workStack.push(_.bind(Blaze._materializeDOM, null,\n                             lastHtmljs, initialContents, view, _workStack));\n    }\n  });\n\n  if (! _workStack) {\n    return domrange;\n  } else {\n    return null;\n  }\n};\n\n// Expands a View to HTMLjs, calling `render` recursively on all\n// Views and evaluating any dynamic attributes.  Calls the `created`\n// callback, but not the `materialized` or `rendered` callbacks.\n// Destroys the view immediately, unless called in a Tracker Computation,\n// in which case the view will be destroyed when the Computation is\n// invalidated.  If called in a Tracker Computation, the result is a\n// reactive string; that is, the Computation will be invalidated\n// if any changes are made to the view or subviews that might affect\n// the HTML.\nBlaze._expandView = function (view, parentView) {\n  Blaze._createView(view, parentView, true /*forExpansion*/);\n\n  view._isInRender = true;\n  var htmljs = Blaze._withCurrentView(view, function () {\n    return view._render();\n  });\n  view._isInRender = false;\n\n  var result = Blaze._expand(htmljs, view);\n\n  if (Tracker.active) {\n    Tracker.onInvalidate(function () {\n      Blaze._destroyView(view);\n    });\n  } else {\n    Blaze._destroyView(view);\n  }\n\n  return result;\n};\n\n// Options: `parentView`\nBlaze._HTMLJSExpander = HTML.TransformingVisitor.extend();\nBlaze._HTMLJSExpander.def({\n  visitObject: function (x) {\n    if (x instanceof Blaze.Template)\n      x = x.constructView();\n    if (x instanceof Blaze.View)\n      return Blaze._expandView(x, this.parentView);\n\n    // this will throw an error; other objects are not allowed!\n    return HTML.TransformingVisitor.prototype.visitObject.call(this, x);\n  },\n  visitAttributes: function (attrs) {\n    // expand dynamic attributes\n    if (typeof attrs === 'function')\n      attrs = Blaze._withCurrentView(this.parentView, attrs);\n\n    // call super (e.g. for case where `attrs` is an array)\n    return HTML.TransformingVisitor.prototype.visitAttributes.call(this, attrs);\n  },\n  visitAttribute: function (name, value, tag) {\n    // expand attribute values that are functions.  Any attribute value\n    // that contains Views must be wrapped in a function.\n    if (typeof value === 'function')\n      value = Blaze._withCurrentView(this.parentView, value);\n\n    return HTML.TransformingVisitor.prototype.visitAttribute.call(\n      this, name, value, tag);\n  }\n});\n\n// Return Blaze.currentView, but only if it is being rendered\n// (i.e. we are in its render() method).\nvar currentViewIfRendering = function () {\n  var view = Blaze.currentView;\n  return (view && view._isInRender) ? view : null;\n};\n\nBlaze._expand = function (htmljs, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return (new Blaze._HTMLJSExpander(\n    {parentView: parentView})).visit(htmljs);\n};\n\nBlaze._expandAttributes = function (attrs, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return (new Blaze._HTMLJSExpander(\n    {parentView: parentView})).visitAttributes(attrs);\n};\n\nBlaze._destroyView = function (view, _skipNodes) {\n  if (view.isDestroyed)\n    return;\n  view.isDestroyed = true;\n\n  Blaze._fireCallbacks(view, 'destroyed');\n\n  // Destroy views and elements recursively.  If _skipNodes,\n  // only recurse up to views, not elements, for the case where\n  // the backend (jQuery) is recursing over the elements already.\n\n  if (view._domrange)\n    view._domrange.destroyMembers(_skipNodes);\n};\n\nBlaze._destroyNode = function (node) {\n  if (node.nodeType === 1)\n    Blaze._DOMBackend.Teardown.tearDownElement(node);\n};\n\n// Are the HTMLjs entities `a` and `b` the same?  We could be\n// more elaborate here but the point is to catch the most basic\n// cases.\nBlaze._isContentEqual = function (a, b) {\n  if (a instanceof HTML.Raw) {\n    return (b instanceof HTML.Raw) && (a.value === b.value);\n  } else if (a == null) {\n    return (b == null);\n  } else {\n    return (a === b) &&\n      ((typeof a === 'number') || (typeof a === 'boolean') ||\n       (typeof a === 'string'));\n  }\n};\n\n/**\n * @summary The View corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.\n * @locus Client\n * @type {Blaze.View}\n */\nBlaze.currentView = null;\n\nBlaze._withCurrentView = function (view, func) {\n  var oldView = Blaze.currentView;\n  try {\n    Blaze.currentView = view;\n    return func();\n  } finally {\n    Blaze.currentView = oldView;\n  }\n};\n\n// Blaze.render publicly takes a View or a Template.\n// Privately, it takes any HTMLJS (extended with Views and Templates)\n// except null or undefined, or a function that returns any extended\n// HTMLJS.\nvar checkRenderContent = function (content) {\n  if (content === null)\n    throw new Error(\"Can't render null\");\n  if (typeof content === 'undefined')\n    throw new Error(\"Can't render undefined\");\n\n  if ((content instanceof Blaze.View) ||\n      (content instanceof Blaze.Template) ||\n      (typeof content === 'function'))\n    return;\n\n  try {\n    // Throw if content doesn't look like HTMLJS at the top level\n    // (i.e. verify that this is an HTML.Tag, or an array,\n    // or a primitive, etc.)\n    (new HTML.Visitor).visit(content);\n  } catch (e) {\n    // Make error message suitable for public API\n    throw new Error(\"Expected Template or View\");\n  }\n};\n\n// For Blaze.render and Blaze.toHTML, take content and\n// wrap it in a View, unless it's a single View or\n// Template already.\nvar contentAsView = function (content) {\n  checkRenderContent(content);\n\n  if (content instanceof Blaze.Template) {\n    return content.constructView();\n  } else if (content instanceof Blaze.View) {\n    return content;\n  } else {\n    var func = content;\n    if (typeof func !== 'function') {\n      func = function () {\n        return content;\n      };\n    }\n    return Blaze.View('render', func);\n  }\n};\n\n// For Blaze.renderWithData and Blaze.toHTMLWithData, wrap content\n// in a function, if necessary, so it can be a content arg to\n// a Blaze.With.\nvar contentAsFunc = function (content) {\n  checkRenderContent(content);\n\n  if (typeof content !== 'function') {\n    return function () {\n      return content;\n    };\n  } else {\n    return content;\n  }\n};\n\n/**\n * @summary Renders a template or View to DOM nodes and inserts it into the DOM, returning a rendered [View](#blaze_view) which can be passed to [`Blaze.remove`](#blaze_remove).\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.  If a template, a View object is [constructed](#template_constructview).  If a View, it must be an unrendered View, which becomes a rendered View and is returned.\n * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.\n * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.\n * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).\n */\nBlaze.render = function (content, parentElement, nextNode, parentView) {\n  if (! parentElement) {\n    Blaze._warn(\"Blaze.render without a parent element is deprecated. \" +\n                \"You must specify where to insert the rendered content.\");\n  }\n\n  if (nextNode instanceof Blaze.View) {\n    // handle omitted nextNode\n    parentView = nextNode;\n    nextNode = null;\n  }\n\n  // parentElement must be a DOM node. in particular, can't be the\n  // result of a call to `$`. Can't check if `parentElement instanceof\n  // Node` since 'Node' is undefined in IE8.\n  if (parentElement && typeof parentElement.nodeType !== 'number')\n    throw new Error(\"'parentElement' must be a DOM node\");\n  if (nextNode && typeof nextNode.nodeType !== 'number') // 'nextNode' is optional\n    throw new Error(\"'nextNode' must be a DOM node\");\n\n  parentView = parentView || currentViewIfRendering();\n\n  var view = contentAsView(content);\n  Blaze._materializeView(view, parentView);\n\n  if (parentElement) {\n    view._domrange.attach(parentElement, nextNode);\n  }\n\n  return view;\n};\n\nBlaze.insert = function (view, parentElement, nextNode) {\n  Blaze._warn(\"Blaze.insert has been deprecated.  Specify where to insert the \" +\n              \"rendered content in the call to Blaze.render.\");\n\n  if (! (view && (view._domrange instanceof Blaze._DOMRange)))\n    throw new Error(\"Expected template rendered with Blaze.render\");\n\n  view._domrange.attach(parentElement, nextNode);\n};\n\n/**\n * @summary Renders a template or View to DOM nodes with a data context.  Otherwise identical to `Blaze.render`.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.\n * @param {Object|Function} data The data context to use, or a function returning a data context.  If a function is provided, it will be reactively re-run.\n * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.\n * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.\n * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).\n */\nBlaze.renderWithData = function (content, data, parentElement, nextNode, parentView) {\n  // We defer the handling of optional arguments to Blaze.render.  At this point,\n  // `nextNode` may actually be `parentView`.\n  return Blaze.render(Blaze._TemplateWith(data, contentAsFunc(content)),\n                          parentElement, nextNode, parentView);\n};\n\n/**\n * @summary Removes a rendered View from the DOM, stopping all reactive updates and event listeners on it. Also destroys the Blaze.Template instance associated with the view.\n * @locus Client\n * @param {Blaze.View} renderedView The return value from `Blaze.render` or `Blaze.renderWithData`, or the `view` property of a Blaze.Template instance. Calling `Blaze.remove(Template.instance().view)` from within a template event handler will destroy the view as well as that template and trigger the template's `onDestroyed` handlers.\n */\nBlaze.remove = function (view) {\n  if (! (view && (view._domrange instanceof Blaze._DOMRange)))\n    throw new Error(\"Expected template rendered with Blaze.render\");\n\n  while (view) {\n    if (! view.isDestroyed) {\n      var range = view._domrange;\n      if (range.attached && ! range.parentRange)\n        range.detach();\n      range.destroy();\n    }\n\n    view = view._hasGeneratedParent && view.parentView;\n  }\n};\n\n/**\n * @summary Renders a template or View to a string of HTML.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.\n */\nBlaze.toHTML = function (content, parentView) {\n  parentView = parentView || currentViewIfRendering();\n\n  return HTML.toHTML(Blaze._expandView(contentAsView(content), parentView));\n};\n\n/**\n * @summary Renders a template or View to HTML with a data context.  Otherwise identical to `Blaze.toHTML`.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.\n * @param {Object|Function} data The data context to use, or a function returning a data context.\n */\nBlaze.toHTMLWithData = function (content, data, parentView) {\n  parentView = parentView || currentViewIfRendering();\n\n  return HTML.toHTML(Blaze._expandView(Blaze._TemplateWith(\n    data, contentAsFunc(content)), parentView));\n};\n\nBlaze._toText = function (htmljs, parentView, textMode) {\n  if (typeof htmljs === 'function')\n    throw new Error(\"Blaze._toText doesn't take a function, just HTMLjs\");\n\n  if ((parentView != null) && ! (parentView instanceof Blaze.View)) {\n    // omitted parentView argument\n    textMode = parentView;\n    parentView = null;\n  }\n  parentView = parentView || currentViewIfRendering();\n\n  if (! textMode)\n    throw new Error(\"textMode required\");\n  if (! (textMode === HTML.TEXTMODE.STRING ||\n         textMode === HTML.TEXTMODE.RCDATA ||\n         textMode === HTML.TEXTMODE.ATTRIBUTE))\n    throw new Error(\"Unknown textMode: \" + textMode);\n\n  return HTML.toText(Blaze._expand(htmljs, parentView), textMode);\n};\n\n/**\n * @summary Returns the current data context, or the data context that was used when rendering a particular DOM element or View from a Meteor template.\n * @locus Client\n * @param {DOMElement|Blaze.View} [elementOrView] Optional.  An element that was rendered by a Meteor, or a View.\n */\nBlaze.getData = function (elementOrView) {\n  var theWith;\n\n  if (! elementOrView) {\n    theWith = Blaze.getView('with');\n  } else if (elementOrView instanceof Blaze.View) {\n    var view = elementOrView;\n    theWith = (view.name === 'with' ? view :\n               Blaze.getView(view, 'with'));\n  } else if (typeof elementOrView.nodeType === 'number') {\n    if (elementOrView.nodeType !== 1)\n      throw new Error(\"Expected DOM element\");\n    theWith = Blaze.getView(elementOrView, 'with');\n  } else {\n    throw new Error(\"Expected DOM element or View\");\n  }\n\n  return theWith ? theWith.dataVar.get() : null;\n};\n\n// For back-compat\nBlaze.getElementData = function (element) {\n  Blaze._warn(\"Blaze.getElementData has been deprecated.  Use \" +\n              \"Blaze.getData(element) instead.\");\n\n  if (element.nodeType !== 1)\n    throw new Error(\"Expected DOM element\");\n\n  return Blaze.getData(element);\n};\n\n// Both arguments are optional.\n\n/**\n * @summary Gets either the current View, or the View enclosing the given DOM element.\n * @locus Client\n * @param {DOMElement} [element] Optional.  If specified, the View enclosing `element` is returned.\n */\nBlaze.getView = function (elementOrView, _viewName) {\n  var viewName = _viewName;\n\n  if ((typeof elementOrView) === 'string') {\n    // omitted elementOrView; viewName present\n    viewName = elementOrView;\n    elementOrView = null;\n  }\n\n  // We could eventually shorten the code by folding the logic\n  // from the other methods into this method.\n  if (! elementOrView) {\n    return Blaze._getCurrentView(viewName);\n  } else if (elementOrView instanceof Blaze.View) {\n    return Blaze._getParentView(elementOrView, viewName);\n  } else if (typeof elementOrView.nodeType === 'number') {\n    return Blaze._getElementView(elementOrView, viewName);\n  } else {\n    throw new Error(\"Expected DOM element or View\");\n  }\n};\n\n// Gets the current view or its nearest ancestor of name\n// `name`.\nBlaze._getCurrentView = function (name) {\n  var view = Blaze.currentView;\n  // Better to fail in cases where it doesn't make sense\n  // to use Blaze._getCurrentView().  There will be a current\n  // view anywhere it does.  You can check Blaze.currentView\n  // if you want to know whether there is one or not.\n  if (! view)\n    throw new Error(\"There is no current view\");\n\n  if (name) {\n    while (view && view.name !== name)\n      view = view.parentView;\n    return view || null;\n  } else {\n    // Blaze._getCurrentView() with no arguments just returns\n    // Blaze.currentView.\n    return view;\n  }\n};\n\nBlaze._getParentView = function (view, name) {\n  var v = view.parentView;\n\n  if (name) {\n    while (v && v.name !== name)\n      v = v.parentView;\n  }\n\n  return v || null;\n};\n\nBlaze._getElementView = function (elem, name) {\n  var range = Blaze._DOMRange.forElement(elem);\n  var view = null;\n  while (range && ! view) {\n    view = (range.view || null);\n    if (! view) {\n      if (range.parentRange)\n        range = range.parentRange;\n      else\n        range = Blaze._DOMRange.forElement(range.parentElement);\n    }\n  }\n\n  if (name) {\n    while (view && view.name !== name)\n      view = view.parentView;\n    return view || null;\n  } else {\n    return view;\n  }\n};\n\nBlaze._addEventMap = function (view, eventMap, thisInHandler) {\n  thisInHandler = (thisInHandler || null);\n  var handles = [];\n\n  if (! view._domrange)\n    throw new Error(\"View must have a DOMRange\");\n\n  view._domrange.onAttached(function attached_eventMaps(range, element) {\n    _.each(eventMap, function (handler, spec) {\n      var clauses = spec.split(/,\\s+/);\n      // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']\n      _.each(clauses, function (clause) {\n        var parts = clause.split(/\\s+/);\n        if (parts.length === 0)\n          return;\n\n        var newEvents = parts.shift();\n        var selector = parts.join(' ');\n        handles.push(Blaze._EventSupport.listen(\n          element, newEvents, selector,\n          function (evt) {\n            if (! range.containsElement(evt.currentTarget))\n              return null;\n            var handlerThis = thisInHandler || this;\n            var handlerArgs = arguments;\n            return Blaze._withCurrentView(view, function () {\n              return handler.apply(handlerThis, handlerArgs);\n            });\n          },\n          range, function (r) {\n            return r.parentRange;\n          }));\n      });\n    });\n  });\n\n  view.onViewDestroyed(function () {\n    _.each(handles, function (h) {\n      h.stop();\n    });\n    handles.length = 0;\n  });\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/blaze/builtins.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nBlaze._calculateCondition = function (cond) {\n  if (cond instanceof Array && cond.length === 0)\n    cond = false;\n  return !! cond;\n};\n\n/**\n * @summary Constructs a View that renders content with a data context.\n * @locus Client\n * @param {Object|Function} data An object to use as the data context, or a function returning such an object.  If a function is provided, it will be reactively re-run.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).\n */\nBlaze.With = function (data, contentFunc) {\n  var view = Blaze.View('with', contentFunc);\n\n  view.dataVar = new ReactiveVar;\n\n  view.onViewCreated(function () {\n    if (typeof data === 'function') {\n      // `data` is a reactive function\n      view.autorun(function () {\n        view.dataVar.set(data());\n      }, view.parentView, 'setData');\n    } else {\n      view.dataVar.set(data);\n    }\n  });\n\n  return view;\n};\n\n/**\n * Attaches bindings to the instantiated view.\n * @param {Object} bindings A dictionary of bindings, each binding name\n * corresponds to a value or a function that will be reactively re-run.\n * @param {View} view The target.\n */\nBlaze._attachBindingsToView = function (bindings, view) {\n  view.onViewCreated(function () {\n    _.each(bindings, function (binding, name) {\n      view._scopeBindings[name] = new ReactiveVar;\n      if (typeof binding === 'function') {\n        view.autorun(function () {\n          view._scopeBindings[name].set(binding());\n        }, view.parentView);\n      } else {\n        view._scopeBindings[name].set(binding);\n      }\n    });\n  });\n};\n\n/**\n * @summary Constructs a View setting the local lexical scope in the block.\n * @param {Function} bindings Dictionary mapping names of bindings to\n * values or computations to reactively re-run.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).\n */\nBlaze.Let = function (bindings, contentFunc) {\n  var view = Blaze.View('let', contentFunc);\n  Blaze._attachBindingsToView(bindings, view);\n\n  return view;\n};\n\n/**\n * @summary Constructs a View that renders content conditionally.\n * @locus Client\n * @param {Function} conditionFunc A function to reactively re-run.  Whether the result is truthy or falsy determines whether `contentFunc` or `elseFunc` is shown.  An empty array is considered falsy.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).\n * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#renderable_content).  If no `elseFunc` is supplied, no content is shown in the \"else\" case.\n */\nBlaze.If = function (conditionFunc, contentFunc, elseFunc, _not) {\n  var conditionVar = new ReactiveVar;\n\n  var view = Blaze.View(_not ? 'unless' : 'if', function () {\n    return conditionVar.get() ? contentFunc() :\n      (elseFunc ? elseFunc() : null);\n  });\n  view.__conditionVar = conditionVar;\n  view.onViewCreated(function () {\n    this.autorun(function () {\n      var cond = Blaze._calculateCondition(conditionFunc());\n      conditionVar.set(_not ? (! cond) : cond);\n    }, this.parentView, 'condition');\n  });\n\n  return view;\n};\n\n/**\n * @summary An inverted [`Blaze.If`](#blaze_if).\n * @locus Client\n * @param {Function} conditionFunc A function to reactively re-run.  If the result is falsy, `contentFunc` is shown, otherwise `elseFunc` is shown.  An empty array is considered falsy.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).\n * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#renderable_content).  If no `elseFunc` is supplied, no content is shown in the \"else\" case.\n */\nBlaze.Unless = function (conditionFunc, contentFunc, elseFunc) {\n  return Blaze.If(conditionFunc, contentFunc, elseFunc, true /*_not*/);\n};\n\n/**\n * @summary Constructs a View that renders `contentFunc` for each item in a sequence.\n * @locus Client\n * @param {Function} argFunc A function to reactively re-run. The function can\n * return one of two options:\n *\n * 1. An object with two fields: '_variable' and '_sequence'. Each iterates over\n *   '_sequence', it may be a Cursor, an array, null, or undefined. Inside the\n *   Each body you will be able to get the current item from the sequence using\n *   the name specified in the '_variable' field.\n *\n * 2. Just a sequence (Cursor, array, null, or undefined) not wrapped into an\n *   object. Inside the Each body, the current item will be set as the data\n *   context.\n * @param {Function} contentFunc A Function that returns  [*renderable\n * content*](#renderable_content).\n * @param {Function} [elseFunc] A Function that returns [*renderable\n * content*](#renderable_content) to display in the case when there are no items\n * in the sequence.\n */\nBlaze.Each = function (argFunc, contentFunc, elseFunc) {\n  var eachView = Blaze.View('each', function () {\n    var subviews = this.initialSubviews;\n    this.initialSubviews = null;\n    if (this._isCreatedForExpansion) {\n      this.expandedValueDep = new Tracker.Dependency;\n      this.expandedValueDep.depend();\n    }\n    return subviews;\n  });\n  eachView.initialSubviews = [];\n  eachView.numItems = 0;\n  eachView.inElseMode = false;\n  eachView.stopHandle = null;\n  eachView.contentFunc = contentFunc;\n  eachView.elseFunc = elseFunc;\n  eachView.argVar = new ReactiveVar;\n  eachView.variableName = null;\n\n  // update the @index value in the scope of all subviews in the range\n  var updateIndices = function (from, to) {\n    if (to === undefined) {\n      to = eachView.numItems - 1;\n    }\n\n    for (var i = from; i <= to; i++) {\n      var view = eachView._domrange.members[i].view;\n      view._scopeBindings['@index'].set(i);\n    }\n  };\n\n  eachView.onViewCreated(function () {\n    // We evaluate argFunc in an autorun to make sure\n    // Blaze.currentView is always set when it runs (rather than\n    // passing argFunc straight to ObserveSequence).\n    eachView.autorun(function () {\n      // argFunc can return either a sequence as is or a wrapper object with a\n      // _sequence and _variable fields set.\n      var arg = argFunc();\n      if (_.isObject(arg) && _.has(arg, '_sequence')) {\n        eachView.variableName = arg._variable || null;\n        arg = arg._sequence;\n      }\n\n      eachView.argVar.set(arg);\n    }, eachView.parentView, 'collection');\n\n    eachView.stopHandle = ObserveSequence.observe(function () {\n      return eachView.argVar.get();\n    }, {\n      addedAt: function (id, item, index) {\n        Tracker.nonreactive(function () {\n          var newItemView;\n          if (eachView.variableName) {\n            // new-style #each (as in {{#each item in items}})\n            // doesn't create a new data context\n            newItemView = Blaze.View('item', eachView.contentFunc);\n          } else {\n            newItemView = Blaze.With(item, eachView.contentFunc);\n          }\n\n          eachView.numItems++;\n\n          var bindings = {};\n          bindings['@index'] = index;\n          if (eachView.variableName) {\n            bindings[eachView.variableName] = item;\n          }\n          Blaze._attachBindingsToView(bindings, newItemView);\n\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            if (eachView.inElseMode) {\n              eachView._domrange.removeMember(0);\n              eachView.inElseMode = false;\n            }\n\n            var range = Blaze._materializeView(newItemView, eachView);\n            eachView._domrange.addMember(range, index);\n            updateIndices(index);\n          } else {\n            eachView.initialSubviews.splice(index, 0, newItemView);\n          }\n        });\n      },\n      removedAt: function (id, item, index) {\n        Tracker.nonreactive(function () {\n          eachView.numItems--;\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            eachView._domrange.removeMember(index);\n            updateIndices(index);\n            if (eachView.elseFunc && eachView.numItems === 0) {\n              eachView.inElseMode = true;\n              eachView._domrange.addMember(\n                Blaze._materializeView(\n                  Blaze.View('each_else',eachView.elseFunc),\n                  eachView), 0);\n            }\n          } else {\n            eachView.initialSubviews.splice(index, 1);\n          }\n        });\n      },\n      changedAt: function (id, newItem, oldItem, index) {\n        Tracker.nonreactive(function () {\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else {\n            var itemView;\n            if (eachView._domrange) {\n              itemView = eachView._domrange.getMember(index).view;\n            } else {\n              itemView = eachView.initialSubviews[index];\n            }\n            if (eachView.variableName) {\n              itemView._scopeBindings[eachView.variableName].set(newItem);\n            } else {\n              itemView.dataVar.set(newItem);\n            }\n          }\n        });\n      },\n      movedTo: function (id, item, fromIndex, toIndex) {\n        Tracker.nonreactive(function () {\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            eachView._domrange.moveMember(fromIndex, toIndex);\n            updateIndices(\n              Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex));\n          } else {\n            var subviews = eachView.initialSubviews;\n            var itemView = subviews[fromIndex];\n            subviews.splice(fromIndex, 1);\n            subviews.splice(toIndex, 0, itemView);\n          }\n        });\n      }\n    });\n\n    if (eachView.elseFunc && eachView.numItems === 0) {\n      eachView.inElseMode = true;\n      eachView.initialSubviews[0] =\n        Blaze.View('each_else', eachView.elseFunc);\n    }\n  });\n\n  eachView.onViewDestroyed(function () {\n    if (eachView.stopHandle)\n      eachView.stopHandle.stop();\n  });\n\n  return eachView;\n};\n\nBlaze._TemplateWith = function (arg, contentFunc) {\n  var w;\n\n  var argFunc = arg;\n  if (typeof arg !== 'function') {\n    argFunc = function () {\n      return arg;\n    };\n  }\n\n  // This is a little messy.  When we compile `{{> Template.contentBlock}}`, we\n  // wrap it in Blaze._InOuterTemplateScope in order to skip the intermediate\n  // parent Views in the current template.  However, when there's an argument\n  // (`{{> Template.contentBlock arg}}`), the argument needs to be evaluated\n  // in the original scope.  There's no good order to nest\n  // Blaze._InOuterTemplateScope and Spacebars.TemplateWith to achieve this,\n  // so we wrap argFunc to run it in the \"original parentView\" of the\n  // Blaze._InOuterTemplateScope.\n  //\n  // To make this better, reconsider _InOuterTemplateScope as a primitive.\n  // Longer term, evaluate expressions in the proper lexical scope.\n  var wrappedArgFunc = function () {\n    var viewToEvaluateArg = null;\n    if (w.parentView && w.parentView.name === 'InOuterTemplateScope') {\n      viewToEvaluateArg = w.parentView.originalParentView;\n    }\n    if (viewToEvaluateArg) {\n      return Blaze._withCurrentView(viewToEvaluateArg, argFunc);\n    } else {\n      return argFunc();\n    }\n  };\n\n  var wrappedContentFunc = function () {\n    var content = contentFunc.call(this);\n\n    // Since we are generating the Blaze._TemplateWith view for the\n    // user, set the flag on the child view.  If `content` is a template,\n    // construct the View so that we can set the flag.\n    if (content instanceof Blaze.Template) {\n      content = content.constructView();\n    }\n    if (content instanceof Blaze.View) {\n      content._hasGeneratedParent = true;\n    }\n\n    return content;\n  };\n\n  w = Blaze.With(wrappedArgFunc, wrappedContentFunc);\n  w.__isTemplateWith = true;\n  return w;\n};\n\nBlaze._InOuterTemplateScope = function (templateView, contentFunc) {\n  var view = Blaze.View('InOuterTemplateScope', contentFunc);\n  var parentView = templateView.parentView;\n\n  // Hack so that if you call `{{> foo bar}}` and it expands into\n  // `{{#with bar}}{{> foo}}{{/with}}`, and then `foo` is a template\n  // that inserts `{{> Template.contentBlock}}`, the data context for\n  // `Template.contentBlock` is not `bar` but the one enclosing that.\n  if (parentView.__isTemplateWith)\n    parentView = parentView.parentView;\n\n  view.onViewCreated(function () {\n    this.originalParentView = this.parentView;\n    this.parentView = parentView;\n    this.__childDoesntStartNewLexicalScope = true;\n  });\n  return view;\n};\n\n// XXX COMPAT WITH 0.9.0\nBlaze.InOuterTemplateScope = Blaze._InOuterTemplateScope;\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/blaze/lookup.js                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nBlaze._globalHelpers = {};\n\n// Documented as Template.registerHelper.\n// This definition also provides back-compat for `UI.registerHelper`.\nBlaze.registerHelper = function (name, func) {\n  Blaze._globalHelpers[name] = func;\n};\n\n// Also documented as Template.deregisterHelper\nBlaze.deregisterHelper = function(name) {\n  delete Blaze._globalHelpers[name];\n}\n\nvar bindIfIsFunction = function (x, target) {\n  if (typeof x !== 'function')\n    return x;\n  return _.bind(x, target);\n};\n\n// If `x` is a function, binds the value of `this` for that function\n// to the current data context.\nvar bindDataContext = function (x) {\n  if (typeof x === 'function') {\n    return function () {\n      var data = Blaze.getData();\n      if (data == null)\n        data = {};\n      return x.apply(data, arguments);\n    };\n  }\n  return x;\n};\n\nBlaze._OLDSTYLE_HELPER = {};\n\nBlaze._getTemplateHelper = function (template, name, tmplInstanceFunc) {\n  // XXX COMPAT WITH 0.9.3\n  var isKnownOldStyleHelper = false;\n\n  if (template.__helpers.has(name)) {\n    var helper = template.__helpers.get(name);\n    if (helper === Blaze._OLDSTYLE_HELPER) {\n      isKnownOldStyleHelper = true;\n    } else if (helper != null) {\n      return wrapHelper(bindDataContext(helper), tmplInstanceFunc);\n    } else {\n      return null;\n    }\n  }\n\n  // old-style helper\n  if (name in template) {\n    // Only warn once per helper\n    if (! isKnownOldStyleHelper) {\n      template.__helpers.set(name, Blaze._OLDSTYLE_HELPER);\n      if (! template._NOWARN_OLDSTYLE_HELPERS) {\n        Blaze._warn('Assigning helper with `' + template.viewName + '.' +\n                    name + ' = ...` is deprecated.  Use `' + template.viewName +\n                    '.helpers(...)` instead.');\n      }\n    }\n    if (template[name] != null) {\n      return wrapHelper(bindDataContext(template[name]), tmplInstanceFunc);\n    }\n  }\n\n  return null;\n};\n\nvar wrapHelper = function (f, templateFunc) {\n  if (typeof f !== \"function\") {\n    return f;\n  }\n\n  return function () {\n    var self = this;\n    var args = arguments;\n\n    return Blaze.Template._withTemplateInstanceFunc(templateFunc, function () {\n      return Blaze._wrapCatchingExceptions(f, 'template helper').apply(self, args);\n    });\n  };\n};\n\nBlaze._lexicalBindingLookup = function (view, name) {\n  var currentView = view;\n  var blockHelpersStack = [];\n\n  // walk up the views stopping at a Spacebars.include or Template view that\n  // doesn't have an InOuterTemplateScope view as a parent\n  do {\n    // skip block helpers views\n    // if we found the binding on the scope, return it\n    if (_.has(currentView._scopeBindings, name)) {\n      var bindingReactiveVar = currentView._scopeBindings[name];\n      return function () {\n        return bindingReactiveVar.get();\n      };\n    }\n  } while (! (currentView.__startsNewLexicalScope &&\n              ! (currentView.parentView &&\n                 currentView.parentView.__childDoesntStartNewLexicalScope))\n           && (currentView = currentView.parentView));\n\n  return null;\n};\n\n// templateInstance argument is provided to be available for possible\n// alternative implementations of this function by 3rd party packages.\nBlaze._getTemplate = function (name, templateInstance) {\n  if ((name in Blaze.Template) && (Blaze.Template[name] instanceof Blaze.Template)) {\n    return Blaze.Template[name];\n  }\n  return null;\n};\n\nBlaze._getGlobalHelper = function (name, templateInstance) {\n  if (Blaze._globalHelpers[name] != null) {\n    return wrapHelper(bindDataContext(Blaze._globalHelpers[name]), templateInstance);\n  }\n  return null;\n};\n\n// Looks up a name, like \"foo\" or \"..\", as a helper of the\n// current template; the name of a template; a global helper;\n// or a property of the data context.  Called on the View of\n// a template (i.e. a View with a `.template` property,\n// where the helpers are).  Used for the first name in a\n// \"path\" in a template tag, like \"foo\" in `{{foo.bar}}` or\n// \"..\" in `{{frobulate ../blah}}`.\n//\n// Returns a function, a non-function value, or null.  If\n// a function is found, it is bound appropriately.\n//\n// NOTE: This function must not establish any reactive\n// dependencies itself.  If there is any reactivity in the\n// value, lookup should return a function.\nBlaze.View.prototype.lookup = function (name, _options) {\n  var template = this.template;\n  var lookupTemplate = _options && _options.template;\n  var helper;\n  var binding;\n  var boundTmplInstance;\n  var foundTemplate;\n\n  if (this.templateInstance) {\n    boundTmplInstance = _.bind(this.templateInstance, this);\n  }\n\n  // 0. looking up the parent data context with the special \"../\" syntax\n  if (/^\\./.test(name)) {\n    // starts with a dot. must be a series of dots which maps to an\n    // ancestor of the appropriate height.\n    if (!/^(\\.)+$/.test(name))\n      throw new Error(\"id starting with dot must be a series of dots\");\n\n    return Blaze._parentData(name.length - 1, true /*_functionWrapped*/);\n\n  }\n\n  // 1. look up a helper on the current template\n  if (template && ((helper = Blaze._getTemplateHelper(template, name, boundTmplInstance)) != null)) {\n    return helper;\n  }\n\n  // 2. look up a binding by traversing the lexical view hierarchy inside the\n  // current template\n  if (template && (binding = Blaze._lexicalBindingLookup(Blaze.currentView, name)) != null) {\n    return binding;\n  }\n\n  // 3. look up a template by name\n  if (lookupTemplate && ((foundTemplate = Blaze._getTemplate(name, boundTmplInstance)) != null)) {\n    return foundTemplate;\n  }\n\n  // 4. look up a global helper\n  if ((helper = Blaze._getGlobalHelper(name, boundTmplInstance)) != null) {\n    return helper;\n  }\n\n  // 5. look up in a data context\n  return function () {\n    var isCalledAsFunction = (arguments.length > 0);\n    var data = Blaze.getData();\n    var x = data && data[name];\n    if (! x) {\n      if (lookupTemplate) {\n        throw new Error(\"No such template: \" + name);\n      } else if (isCalledAsFunction) {\n        throw new Error(\"No such function: \" + name);\n      } else if (name.charAt(0) === '@' && ((x === null) ||\n                                            (x === undefined))) {\n        // Throw an error if the user tries to use a `@directive`\n        // that doesn't exist.  We don't implement all directives\n        // from Handlebars, so there's a potential for confusion\n        // if we fail silently.  On the other hand, we want to\n        // throw late in case some app or package wants to provide\n        // a missing directive.\n        throw new Error(\"Unsupported directive: \" + name);\n      }\n    }\n    if (! data) {\n      return null;\n    }\n    if (typeof x !== 'function') {\n      if (isCalledAsFunction) {\n        throw new Error(\"Can't call non-function: \" + x);\n      }\n      return x;\n    }\n    return x.apply(data, arguments);\n  };\n};\n\n// Implement Spacebars' {{../..}}.\n// @param height {Number} The number of '..'s\nBlaze._parentData = function (height, _functionWrapped) {\n  // If height is null or undefined, we default to 1, the first parent.\n  if (height == null) {\n    height = 1;\n  }\n  var theWith = Blaze.getView('with');\n  for (var i = 0; (i < height) && theWith; i++) {\n    theWith = Blaze.getView(theWith, 'with');\n  }\n\n  if (! theWith)\n    return null;\n  if (_functionWrapped)\n    return function () { return theWith.dataVar.get(); };\n  return theWith.dataVar.get();\n};\n\n\nBlaze.View.prototype.lookupTemplate = function (name) {\n  return this.lookup(name, {template:true});\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/blaze/template.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// [new] Blaze.Template([viewName], renderFunction)\n//\n// `Blaze.Template` is the class of templates, like `Template.foo` in\n// Meteor, which is `instanceof Template`.\n//\n// `viewKind` is a string that looks like \"Template.foo\" for templates\n// defined by the compiler.\n\n/**\n * @class\n * @summary Constructor for a Template, which is used to construct Views with particular name and content.\n * @locus Client\n * @param {String} [viewName] Optional.  A name for Views constructed by this Template.  See [`view.name`](#view_name).\n * @param {Function} renderFunction A function that returns [*renderable content*](#renderable_content).  This function is used as the `renderFunction` for Views constructed by this Template.\n */\nBlaze.Template = function (viewName, renderFunction) {\n  if (! (this instanceof Blaze.Template))\n    // called without `new`\n    return new Blaze.Template(viewName, renderFunction);\n\n  if (typeof viewName === 'function') {\n    // omitted \"viewName\" argument\n    renderFunction = viewName;\n    viewName = '';\n  }\n  if (typeof viewName !== 'string')\n    throw new Error(\"viewName must be a String (or omitted)\");\n  if (typeof renderFunction !== 'function')\n    throw new Error(\"renderFunction must be a function\");\n\n  this.viewName = viewName;\n  this.renderFunction = renderFunction;\n\n  this.__helpers = new HelperMap;\n  this.__eventMaps = [];\n\n  this._callbacks = {\n    created: [],\n    rendered: [],\n    destroyed: []\n  };\n};\nvar Template = Blaze.Template;\n\nvar HelperMap = function () {};\nHelperMap.prototype.get = function (name) {\n  return this[' '+name];\n};\nHelperMap.prototype.set = function (name, helper) {\n  this[' '+name] = helper;\n};\nHelperMap.prototype.has = function (name) {\n  return (' '+name) in this;\n};\n\n/**\n * @summary Returns true if `value` is a template object like `Template.myTemplate`.\n * @locus Client\n * @param {Any} value The value to test.\n */\nBlaze.isTemplate = function (t) {\n  return (t instanceof Blaze.Template);\n};\n\n/**\n * @name  onCreated\n * @instance\n * @memberOf Template\n * @summary Register a function to be called when an instance of this template is created.\n * @param {Function} callback A function to be added as a callback.\n * @locus Client\n * @importFromPackage templating\n */\nTemplate.prototype.onCreated = function (cb) {\n  this._callbacks.created.push(cb);\n};\n\n/**\n * @name  onRendered\n * @instance\n * @memberOf Template\n * @summary Register a function to be called when an instance of this template is inserted into the DOM.\n * @param {Function} callback A function to be added as a callback.\n * @locus Client\n * @importFromPackage templating\n */\nTemplate.prototype.onRendered = function (cb) {\n  this._callbacks.rendered.push(cb);\n};\n\n/**\n * @name  onDestroyed\n * @instance\n * @memberOf Template\n * @summary Register a function to be called when an instance of this template is removed from the DOM and destroyed.\n * @param {Function} callback A function to be added as a callback.\n * @locus Client\n * @importFromPackage templating\n */\nTemplate.prototype.onDestroyed = function (cb) {\n  this._callbacks.destroyed.push(cb);\n};\n\nTemplate.prototype._getCallbacks = function (which) {\n  var self = this;\n  var callbacks = self[which] ? [self[which]] : [];\n  // Fire all callbacks added with the new API (Template.onRendered())\n  // as well as the old-style callback (e.g. Template.rendered) for\n  // backwards-compatibility.\n  callbacks = callbacks.concat(self._callbacks[which]);\n  return callbacks;\n};\n\nvar fireCallbacks = function (callbacks, template) {\n  Template._withTemplateInstanceFunc(\n    function () { return template; },\n    function () {\n      for (var i = 0, N = callbacks.length; i < N; i++) {\n        callbacks[i].call(template);\n      }\n    });\n};\n\nTemplate.prototype.constructView = function (contentFunc, elseFunc) {\n  var self = this;\n  var view = Blaze.View(self.viewName, self.renderFunction);\n  view.template = self;\n\n  view.templateContentBlock = (\n    contentFunc ? new Template('(contentBlock)', contentFunc) : null);\n  view.templateElseBlock = (\n    elseFunc ? new Template('(elseBlock)', elseFunc) : null);\n\n  if (self.__eventMaps || typeof self.events === 'object') {\n    view._onViewRendered(function () {\n      if (view.renderCount !== 1)\n        return;\n\n      if (! self.__eventMaps.length && typeof self.events === \"object\") {\n        // Provide limited back-compat support for `.events = {...}`\n        // syntax.  Pass `template.events` to the original `.events(...)`\n        // function.  This code must run only once per template, in\n        // order to not bind the handlers more than once, which is\n        // ensured by the fact that we only do this when `__eventMaps`\n        // is falsy, and we cause it to be set now.\n        Template.prototype.events.call(self, self.events);\n      }\n\n      _.each(self.__eventMaps, function (m) {\n        Blaze._addEventMap(view, m, view);\n      });\n    });\n  }\n\n  view._templateInstance = new Blaze.TemplateInstance(view);\n  view.templateInstance = function () {\n    // Update data, firstNode, and lastNode, and return the TemplateInstance\n    // object.\n    var inst = view._templateInstance;\n\n    /**\n     * @instance\n     * @memberOf Blaze.TemplateInstance\n     * @name  data\n     * @summary The data context of this instance's latest invocation.\n     * @locus Client\n     */\n    inst.data = Blaze.getData(view);\n\n    if (view._domrange && !view.isDestroyed) {\n      inst.firstNode = view._domrange.firstNode();\n      inst.lastNode = view._domrange.lastNode();\n    } else {\n      // on 'created' or 'destroyed' callbacks we don't have a DomRange\n      inst.firstNode = null;\n      inst.lastNode = null;\n    }\n\n    return inst;\n  };\n\n  /**\n   * @name  created\n   * @instance\n   * @memberOf Template\n   * @summary Provide a callback when an instance of a template is created.\n   * @locus Client\n   * @deprecated in 1.1\n   */\n  // To avoid situations when new callbacks are added in between view\n  // instantiation and event being fired, decide on all callbacks to fire\n  // immediately and then fire them on the event.\n  var createdCallbacks = self._getCallbacks('created');\n  view.onViewCreated(function () {\n    fireCallbacks(createdCallbacks, view.templateInstance());\n  });\n\n  /**\n   * @name  rendered\n   * @instance\n   * @memberOf Template\n   * @summary Provide a callback when an instance of a template is rendered.\n   * @locus Client\n   * @deprecated in 1.1\n   */\n  var renderedCallbacks = self._getCallbacks('rendered');\n  view.onViewReady(function () {\n    fireCallbacks(renderedCallbacks, view.templateInstance());\n  });\n\n  /**\n   * @name  destroyed\n   * @instance\n   * @memberOf Template\n   * @summary Provide a callback when an instance of a template is destroyed.\n   * @locus Client\n   * @deprecated in 1.1\n   */\n  var destroyedCallbacks = self._getCallbacks('destroyed');\n  view.onViewDestroyed(function () {\n    fireCallbacks(destroyedCallbacks, view.templateInstance());\n  });\n\n  return view;\n};\n\n/**\n * @class\n * @summary The class for template instances\n * @param {Blaze.View} view\n * @instanceName template\n */\nBlaze.TemplateInstance = function (view) {\n  if (! (this instanceof Blaze.TemplateInstance))\n    // called without `new`\n    return new Blaze.TemplateInstance(view);\n\n  if (! (view instanceof Blaze.View))\n    throw new Error(\"View required\");\n\n  view._templateInstance = this;\n\n  /**\n   * @name view\n   * @memberOf Blaze.TemplateInstance\n   * @instance\n   * @summary The [View](#blaze_view) object for this invocation of the template.\n   * @locus Client\n   * @type {Blaze.View}\n   */\n  this.view = view;\n  this.data = null;\n\n  /**\n   * @name firstNode\n   * @memberOf Blaze.TemplateInstance\n   * @instance\n   * @summary The first top-level DOM node in this template instance.\n   * @locus Client\n   * @type {DOMNode}\n   */\n  this.firstNode = null;\n\n  /**\n   * @name lastNode\n   * @memberOf Blaze.TemplateInstance\n   * @instance\n   * @summary The last top-level DOM node in this template instance.\n   * @locus Client\n   * @type {DOMNode}\n   */\n  this.lastNode = null;\n\n  // This dependency is used to identify state transitions in\n  // _subscriptionHandles which could cause the result of\n  // TemplateInstance#subscriptionsReady to change. Basically this is triggered\n  // whenever a new subscription handle is added or when a subscription handle\n  // is removed and they are not ready.\n  this._allSubsReadyDep = new Tracker.Dependency();\n  this._allSubsReady = false;\n\n  this._subscriptionHandles = {};\n};\n\n/**\n * @summary Find all elements matching `selector` in this template instance, and return them as a JQuery object.\n * @locus Client\n * @param {String} selector The CSS selector to match, scoped to the template contents.\n * @returns {DOMNode[]}\n */\nBlaze.TemplateInstance.prototype.$ = function (selector) {\n  var view = this.view;\n  if (! view._domrange)\n    throw new Error(\"Can't use $ on template instance with no DOM\");\n  return view._domrange.$(selector);\n};\n\n/**\n * @summary Find all elements matching `selector` in this template instance.\n * @locus Client\n * @param {String} selector The CSS selector to match, scoped to the template contents.\n * @returns {DOMElement[]}\n */\nBlaze.TemplateInstance.prototype.findAll = function (selector) {\n  return Array.prototype.slice.call(this.$(selector));\n};\n\n/**\n * @summary Find one element matching `selector` in this template instance.\n * @locus Client\n * @param {String} selector The CSS selector to match, scoped to the template contents.\n * @returns {DOMElement}\n */\nBlaze.TemplateInstance.prototype.find = function (selector) {\n  var result = this.$(selector);\n  return result[0] || null;\n};\n\n/**\n * @summary A version of [Tracker.autorun](#tracker_autorun) that is stopped when the template is destroyed.\n * @locus Client\n * @param {Function} runFunc The function to run. It receives one argument: a Tracker.Computation object.\n */\nBlaze.TemplateInstance.prototype.autorun = function (f) {\n  return this.view.autorun(f);\n};\n\n/**\n * @summary A version of [Meteor.subscribe](#meteor_subscribe) that is stopped\n * when the template is destroyed.\n * @return {SubscriptionHandle} The subscription handle to the newly made\n * subscription. Call `handle.stop()` to manually stop the subscription, or\n * `handle.ready()` to find out if this particular subscription has loaded all\n * of its inital data.\n * @locus Client\n * @param {String} name Name of the subscription.  Matches the name of the\n * server's `publish()` call.\n * @param {Any} [arg1,arg2...] Optional arguments passed to publisher function\n * on server.\n * @param {Function|Object} [options] If a function is passed instead of an\n * object, it is interpreted as an `onReady` callback.\n * @param {Function} [options.onReady] Passed to [`Meteor.subscribe`](#meteor_subscribe).\n * @param {Function} [options.onStop] Passed to [`Meteor.subscribe`](#meteor_subscribe).\n * @param {DDP.Connection} [options.connection] The connection on which to make the\n * subscription.\n */\nBlaze.TemplateInstance.prototype.subscribe = function (/* arguments */) {\n  var self = this;\n\n  var subHandles = self._subscriptionHandles;\n  var args = _.toArray(arguments);\n\n  // Duplicate logic from Meteor.subscribe\n  var options = {};\n  if (args.length) {\n    var lastParam = _.last(args);\n\n    // Match pattern to check if the last arg is an options argument\n    var lastParamOptionsPattern = {\n      onReady: Match.Optional(Function),\n      // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use\n      // onStop with an error callback instead.\n      onError: Match.Optional(Function),\n      onStop: Match.Optional(Function),\n      connection: Match.Optional(Match.Any)\n    };\n\n    if (_.isFunction(lastParam)) {\n      options.onReady = args.pop();\n    } else if (lastParam && ! _.isEmpty(lastParam) && Match.test(lastParam, lastParamOptionsPattern)) {\n      options = args.pop();\n    }\n  }\n\n  var subHandle;\n  var oldStopped = options.onStop;\n  options.onStop = function (error) {\n    // When the subscription is stopped, remove it from the set of tracked\n    // subscriptions to avoid this list growing without bound\n    delete subHandles[subHandle.subscriptionId];\n\n    // Removing a subscription can only change the result of subscriptionsReady\n    // if we are not ready (that subscription could be the one blocking us being\n    // ready).\n    if (! self._allSubsReady) {\n      self._allSubsReadyDep.changed();\n    }\n\n    if (oldStopped) {\n      oldStopped(error);\n    }\n  };\n\n  var connection = options.connection;\n  var callbacks = _.pick(options, [\"onReady\", \"onError\", \"onStop\"]);\n\n  // The callbacks are passed as the last item in the arguments array passed to\n  // View#subscribe\n  args.push(callbacks);\n\n  // View#subscribe takes the connection as one of the options in the last\n  // argument\n  subHandle = self.view.subscribe.call(self.view, args, {\n    connection: connection\n  });\n\n  if (! _.has(subHandles, subHandle.subscriptionId)) {\n    subHandles[subHandle.subscriptionId] = subHandle;\n\n    // Adding a new subscription will always cause us to transition from ready\n    // to not ready, but if we are already not ready then this can't make us\n    // ready.\n    if (self._allSubsReady) {\n      self._allSubsReadyDep.changed();\n    }\n  }\n\n  return subHandle;\n};\n\n/**\n * @summary A reactive function that returns true when all of the subscriptions\n * called with [this.subscribe](#TemplateInstance-subscribe) are ready.\n * @return {Boolean} True if all subscriptions on this template instance are\n * ready.\n */\nBlaze.TemplateInstance.prototype.subscriptionsReady = function () {\n  this._allSubsReadyDep.depend();\n\n  this._allSubsReady = _.all(this._subscriptionHandles, function (handle) {\n    return handle.ready();\n  });\n\n  return this._allSubsReady;\n};\n\n/**\n * @summary Specify template helpers available to this template.\n * @locus Client\n * @param {Object} helpers Dictionary of helper functions by name.\n * @importFromPackage templating\n */\nTemplate.prototype.helpers = function (dict) {\n  if (! _.isObject(dict)) {\n    throw new Error(\"Helpers dictionary has to be an object\");\n  }\n\n  for (var k in dict)\n    this.__helpers.set(k, dict[k]);\n};\n\n// Kind of like Blaze.currentView but for the template instance.\n// This is a function, not a value -- so that not all helpers\n// are implicitly dependent on the current template instance's `data` property,\n// which would make them dependenct on the data context of the template\n// inclusion.\nTemplate._currentTemplateInstanceFunc = null;\n\nTemplate._withTemplateInstanceFunc = function (templateInstanceFunc, func) {\n  if (typeof func !== 'function')\n    throw new Error(\"Expected function, got: \" + func);\n  var oldTmplInstanceFunc = Template._currentTemplateInstanceFunc;\n  try {\n    Template._currentTemplateInstanceFunc = templateInstanceFunc;\n    return func();\n  } finally {\n    Template._currentTemplateInstanceFunc = oldTmplInstanceFunc;\n  }\n};\n\n/**\n * @summary Specify event handlers for this template.\n * @locus Client\n * @param {EventMap} eventMap Event handlers to associate with this template.\n * @importFromPackage templating\n */\nTemplate.prototype.events = function (eventMap) {\n  if (! _.isObject(eventMap)) {\n    throw new Error(\"Event map has to be an object\");\n  }\n\n  var template = this;\n  var eventMap2 = {};\n  for (var k in eventMap) {\n    eventMap2[k] = (function (k, v) {\n      return function (event/*, ...*/) {\n        var view = this; // passed by EventAugmenter\n        var data = Blaze.getData(event.currentTarget);\n        if (data == null)\n          data = {};\n        var args = Array.prototype.slice.call(arguments);\n        var tmplInstanceFunc = _.bind(view.templateInstance, view);\n        args.splice(1, 0, tmplInstanceFunc());\n\n        return Template._withTemplateInstanceFunc(tmplInstanceFunc, function () {\n          return v.apply(data, args);\n        });\n      };\n    })(k, eventMap[k]);\n  }\n\n  template.__eventMaps.push(eventMap2);\n};\n\n/**\n * @function\n * @name instance\n * @memberOf Template\n * @summary The [template instance](#template_inst) corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.\n * @locus Client\n * @returns {Blaze.TemplateInstance}\n * @importFromPackage templating\n */\nTemplate.instance = function () {\n  return Template._currentTemplateInstanceFunc\n    && Template._currentTemplateInstanceFunc();\n};\n\n// Note: Template.currentData() is documented to take zero arguments,\n// while Blaze.getData takes up to one.\n\n/**\n * @summary\n *\n * - Inside an `onCreated`, `onRendered`, or `onDestroyed` callback, returns\n * the data context of the template.\n * - Inside an event handler, returns the data context of the template on which\n * this event handler was defined.\n * - Inside a helper, returns the data context of the DOM node where the helper\n * was used.\n *\n * Establishes a reactive dependency on the result.\n * @locus Client\n * @function\n * @importFromPackage templating\n */\nTemplate.currentData = Blaze.getData;\n\n/**\n * @summary Accesses other data contexts that enclose the current data context.\n * @locus Client\n * @function\n * @param {Integer} [numLevels] The number of levels beyond the current data context to look. Defaults to 1.\n * @importFromPackage templating\n */\nTemplate.parentData = Blaze._parentData;\n\n/**\n * @summary Defines a [helper function](#template_helpers) which can be used from all templates.\n * @locus Client\n * @function\n * @param {String} name The name of the helper function you are defining.\n * @param {Function} function The helper function itself.\n * @importFromPackage templating\n */\nTemplate.registerHelper = Blaze.registerHelper;\n\n/**\n * @summary Removes a global [helper function](#template_helpers).\n * @locus Client\n * @function\n * @param {String} name The name of the helper function you are defining.\n * @importFromPackage templating\n */\nTemplate.deregisterHelper = Blaze.deregisterHelper;\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/blaze/backcompat.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nUI = Blaze;\n\nBlaze.ReactiveVar = ReactiveVar;\nUI._templateInstance = Blaze.Template.instance;\n\nHandlebars = {};\nHandlebars.registerHelper = Blaze.registerHelper;\n\nHandlebars._escape = Blaze._escape;\n\n// Return these from {{...}} helpers to achieve the same as returning\n// strings from {{{...}}} helpers\nHandlebars.SafeString = function(string) {\n  this.string = string;\n};\nHandlebars.SafeString.prototype.toString = function() {\n  return this.string.toString();\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.blaze = {}, {\n  Blaze: Blaze,\n  UI: UI,\n  Handlebars: Handlebars\n});\n\n})();\n\n//# sourceMappingURL=blaze.js.map\n"]},"hash":"28b2129484e4157708ed0288aeef055f72fea453"}
