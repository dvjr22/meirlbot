{"metadata":{"usedHelpers":["typeof"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/mini-files.js","filenameRelative":"/bundle/programs/server/mini-files.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/mini-files.js.map","sourceFileName":"/bundle/programs/server/mini-files.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"mini-files"},"ignored":false,"code":"var _typeof;module.import(\"babel-runtime/helpers/typeof\",{\"default\":function(v){_typeof=v}});\nvar _ = require(\"underscore\");\nvar os = require(\"os\");\nvar path = require(\"path\");\nvar assert = require(\"assert\");\n\n// All of these functions are attached to files.js for the tool;\n// they live here because we need them in boot.js as well to avoid duplicating\n// a lot of the code.\n//\n// Note that this file does NOT contain any of the \"perform I/O maybe\n// synchronously\" functions from files.js; this is intentional, because we want\n// to make it very hard to accidentally use fs.*Sync functions in the app server\n// after bootup (since they block all concurrency!)\nvar files = module.exports;\n\nvar toPosixPath = function toPosixPath(p, partialPath) {\n  // Sometimes, you can have a path like \\Users\\IEUser on windows, and this\n  // actually means you want C:\\Users\\IEUser\n  if (p[0] === \"\\\\\" && !partialPath) {\n    p = process.env.SystemDrive + p;\n  }\n\n  p = p.replace(/\\\\/g, '/');\n  if (p[1] === ':' && !partialPath) {\n    // transform \"C:/bla/bla\" to \"/c/bla/bla\"\n    p = '/' + p[0] + p.slice(2);\n  }\n\n  return p;\n};\n\nvar toDosPath = function toDosPath(p, partialPath) {\n  if (p[0] === '/' && !partialPath) {\n    if (!/^\\/[A-Za-z](\\/|$)/.test(p)) throw new Error(\"Surprising path: \" + p);\n    // transform a previously windows path back\n    // \"/C/something\" to \"c:/something\"\n    p = p[1] + \":\" + p.slice(2);\n  }\n\n  p = p.replace(/\\//g, '\\\\');\n  return p;\n};\n\nvar convertToOSPath = function convertToOSPath(standardPath, partialPath) {\n  if (process.platform === \"win32\") {\n    return toDosPath(standardPath, partialPath);\n  }\n\n  return standardPath;\n};\n\nvar convertToStandardPath = function convertToStandardPath(osPath, partialPath) {\n  if (process.platform === \"win32\") {\n    return toPosixPath(osPath, partialPath);\n  }\n\n  return osPath;\n};\n\nvar convertToOSLineEndings = function convertToOSLineEndings(fileContents) {\n  return fileContents.replace(/\\n/g, os.EOL);\n};\n\nvar convertToStandardLineEndings = function convertToStandardLineEndings(fileContents) {\n  // Convert all kinds of end-of-line chars to linuxy \"\\n\".\n  return fileContents.replace(new RegExp(\"\\r\\n\", \"g\"), \"\\n\").replace(new RegExp(\"\\r\", \"g\"), \"\\n\");\n};\n\n// wrappings for path functions that always run as they were on unix (using\n// forward slashes)\nvar wrapPathFunction = function wrapPathFunction(name, partialPaths) {\n  var f = path[name];\n  assert.strictEqual(typeof f === \"undefined\" ? \"undefined\" : _typeof(f), \"function\");\n\n  return function () /* args */{\n    if (process.platform === 'win32') {\n      var args = _.toArray(arguments);\n      args = _.map(args, function (p, i) {\n        // if partialPaths is turned on (for path.join mostly)\n        // forget about conversion of absolute paths for Windows\n        return toDosPath(p, partialPaths);\n      });\n\n      var result = f.apply(path, args);\n      if (typeof result === \"string\") {\n        result = toPosixPath(result, partialPaths);\n      }\n\n      return result;\n    }\n\n    return f.apply(path, arguments);\n  };\n};\n\nfiles.pathJoin = wrapPathFunction(\"join\", true);\nfiles.pathNormalize = wrapPathFunction(\"normalize\");\nfiles.pathRelative = wrapPathFunction(\"relative\");\nfiles.pathResolve = wrapPathFunction(\"resolve\");\nfiles.pathDirname = wrapPathFunction(\"dirname\");\nfiles.pathBasename = wrapPathFunction(\"basename\");\nfiles.pathExtname = wrapPathFunction(\"extname\");\n// The path.isAbsolute function is implemented in Node v4.\nfiles.pathIsAbsolute = wrapPathFunction(\"isAbsolute\");\nfiles.pathSep = '/';\nfiles.pathDelimiter = ':';\nfiles.pathOsDelimiter = path.delimiter;\n\nfiles.convertToStandardPath = convertToStandardPath;\nfiles.convertToOSPath = convertToOSPath;\nfiles.convertToWindowsPath = toDosPath;\nfiles.convertToPosixPath = toPosixPath;\n\nfiles.convertToStandardLineEndings = convertToStandardLineEndings;\nfiles.convertToOSLineEndings = convertToOSLineEndings;","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/mini-files.js"],"names":[],"mappings":";AAAA,IAAI,IAAI,QAAQ,YAAR,CAAR;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;;;;;;;;;AAUA,IAAI,QAAQ,OAAO,OAAnB;;AAEA,IAAI,cAAc,SAAd,WAAc,CAAU,CAAV,EAAa,WAAb,EAA0B;;;AAG1C,MAAI,EAAE,CAAF,MAAS,IAAT,IAAkB,CAAE,WAAxB,EAAsC;AACpC,QAAI,QAAQ,GAAR,CAAY,WAAZ,GAA0B,CAA9B;AACD;;AAED,MAAI,EAAE,OAAF,CAAU,KAAV,EAAiB,GAAjB,CAAJ;AACA,MAAI,EAAE,CAAF,MAAS,GAAT,IAAgB,CAAE,WAAtB,EAAmC;;AAEjC,QAAI,MAAM,EAAE,CAAF,CAAN,GAAa,EAAE,KAAF,CAAQ,CAAR,CAAjB;AACD;;AAED,SAAO,CAAP;AACD,CAdD;;AAgBA,IAAI,YAAY,SAAZ,SAAY,CAAU,CAAV,EAAa,WAAb,EAA0B;AACxC,MAAI,EAAE,CAAF,MAAS,GAAT,IAAgB,CAAE,WAAtB,EAAmC;AACjC,QAAI,CAAE,oBAAoB,IAApB,CAAyB,CAAzB,CAAN,EACE,MAAM,IAAI,KAAJ,CAAU,sBAAsB,CAAhC,CAAN;;;AAGF,QAAI,EAAE,CAAF,IAAO,GAAP,GAAa,EAAE,KAAF,CAAQ,CAAR,CAAjB;AACD;;AAED,MAAI,EAAE,OAAF,CAAU,KAAV,EAAiB,IAAjB,CAAJ;AACA,SAAO,CAAP;AACD,CAXD;;AAcA,IAAI,kBAAkB,SAAlB,eAAkB,CAAU,YAAV,EAAwB,WAAxB,EAAqC;AACzD,MAAI,QAAQ,QAAR,KAAqB,OAAzB,EAAkC;AAChC,WAAO,UAAU,YAAV,EAAwB,WAAxB,CAAP;AACD;;AAED,SAAO,YAAP;AACD,CAND;;AAQA,IAAI,wBAAwB,SAAxB,qBAAwB,CAAU,MAAV,EAAkB,WAAlB,EAA+B;AACzD,MAAI,QAAQ,QAAR,KAAqB,OAAzB,EAAkC;AAChC,WAAO,YAAY,MAAZ,EAAoB,WAApB,CAAP;AACD;;AAED,SAAO,MAAP;AACD,CAND;;AAQA,IAAI,yBAAyB,SAAzB,sBAAyB,CAAU,YAAV,EAAwB;AACnD,SAAO,aAAa,OAAb,CAAqB,KAArB,EAA4B,GAAG,GAA/B,CAAP;AACD,CAFD;;AAIA,IAAI,+BAA+B,SAA/B,4BAA+B,CAAU,YAAV,EAAwB;;AAEzD,SAAO,aAAa,OAAb,CAAqB,IAAI,MAAJ,CAAW,MAAX,EAAmB,GAAnB,CAArB,EAA8C,IAA9C,EACa,OADb,CACqB,IAAI,MAAJ,CAAW,IAAX,EAAiB,GAAjB,CADrB,EAC4C,IAD5C,CAAP;AAED,CAJD;;;;AASA,IAAI,mBAAmB,SAAnB,gBAAmB,CAAU,IAAV,EAAgB,YAAhB,EAA8B;AACnD,MAAI,IAAI,KAAK,IAAL,CAAR;AACA,SAAO,WAAP,QAA0B,CAA1B,yCAA0B,CAA1B,GAA6B,UAA7B;;AAEA,SAAO,Y,UAAsB;AAC3B,QAAI,QAAQ,QAAR,KAAqB,OAAzB,EAAkC;AAChC,UAAI,OAAO,EAAE,OAAF,CAAU,SAAV,CAAX;AACA,aAAO,EAAE,GAAF,CAAM,IAAN,EAAY,UAAU,CAAV,EAAa,CAAb,EAAgB;;;AAGjC,eAAO,UAAU,CAAV,EAAa,YAAb,CAAP;AACD,OAJM,CAAP;;AAMA,UAAI,SAAS,EAAE,KAAF,CAAQ,IAAR,EAAc,IAAd,CAAb;AACA,UAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,iBAAS,YAAY,MAAZ,EAAoB,YAApB,CAAT;AACD;;AAED,aAAO,MAAP;AACD;;AAED,WAAO,EAAE,KAAF,CAAQ,IAAR,EAAc,SAAd,CAAP;AACD,GAlBD;AAmBD,CAvBD;;AAyBA,MAAM,QAAN,GAAiB,iBAAiB,MAAjB,EAAyB,IAAzB,CAAjB;AACA,MAAM,aAAN,GAAsB,iBAAiB,WAAjB,CAAtB;AACA,MAAM,YAAN,GAAqB,iBAAiB,UAAjB,CAArB;AACA,MAAM,WAAN,GAAoB,iBAAiB,SAAjB,CAApB;AACA,MAAM,WAAN,GAAoB,iBAAiB,SAAjB,CAApB;AACA,MAAM,YAAN,GAAqB,iBAAiB,UAAjB,CAArB;AACA,MAAM,WAAN,GAAoB,iBAAiB,SAAjB,CAApB;;AAEA,MAAM,cAAN,GAAuB,iBAAiB,YAAjB,CAAvB;AACA,MAAM,OAAN,GAAgB,GAAhB;AACA,MAAM,aAAN,GAAsB,GAAtB;AACA,MAAM,eAAN,GAAwB,KAAK,SAA7B;;AAEA,MAAM,qBAAN,GAA8B,qBAA9B;AACA,MAAM,eAAN,GAAwB,eAAxB;AACA,MAAM,oBAAN,GAA6B,SAA7B;AACA,MAAM,kBAAN,GAA2B,WAA3B;;AAEA,MAAM,4BAAN,GAAqC,4BAArC;AACA,MAAM,sBAAN,GAA+B,sBAA/B","file":"/bundle/programs/server/mini-files.js.map","sourcesContent":["var _ = require(\"underscore\");\nvar os = require(\"os\");\nvar path = require(\"path\");\nvar assert = require(\"assert\");\n\n// All of these functions are attached to files.js for the tool;\n// they live here because we need them in boot.js as well to avoid duplicating\n// a lot of the code.\n//\n// Note that this file does NOT contain any of the \"perform I/O maybe\n// synchronously\" functions from files.js; this is intentional, because we want\n// to make it very hard to accidentally use fs.*Sync functions in the app server\n// after bootup (since they block all concurrency!)\nvar files = module.exports;\n\nvar toPosixPath = function (p, partialPath) {\n  // Sometimes, you can have a path like \\Users\\IEUser on windows, and this\n  // actually means you want C:\\Users\\IEUser\n  if (p[0] === \"\\\\\" && (! partialPath)) {\n    p = process.env.SystemDrive + p;\n  }\n\n  p = p.replace(/\\\\/g, '/');\n  if (p[1] === ':' && ! partialPath) {\n    // transform \"C:/bla/bla\" to \"/c/bla/bla\"\n    p = '/' + p[0] + p.slice(2);\n  }\n\n  return p;\n};\n\nvar toDosPath = function (p, partialPath) {\n  if (p[0] === '/' && ! partialPath) {\n    if (! /^\\/[A-Za-z](\\/|$)/.test(p))\n      throw new Error(\"Surprising path: \" + p);\n    // transform a previously windows path back\n    // \"/C/something\" to \"c:/something\"\n    p = p[1] + \":\" + p.slice(2);\n  }\n\n  p = p.replace(/\\//g, '\\\\');\n  return p;\n};\n\n\nvar convertToOSPath = function (standardPath, partialPath) {\n  if (process.platform === \"win32\") {\n    return toDosPath(standardPath, partialPath);\n  }\n\n  return standardPath;\n};\n\nvar convertToStandardPath = function (osPath, partialPath) {\n  if (process.platform === \"win32\") {\n    return toPosixPath(osPath, partialPath);\n  }\n\n  return osPath;\n}\n\nvar convertToOSLineEndings = function (fileContents) {\n  return fileContents.replace(/\\n/g, os.EOL);\n};\n\nvar convertToStandardLineEndings = function (fileContents) {\n  // Convert all kinds of end-of-line chars to linuxy \"\\n\".\n  return fileContents.replace(new RegExp(\"\\r\\n\", \"g\"), \"\\n\")\n                     .replace(new RegExp(\"\\r\", \"g\"), \"\\n\");\n};\n\n\n// wrappings for path functions that always run as they were on unix (using\n// forward slashes)\nvar wrapPathFunction = function (name, partialPaths) {\n  var f = path[name];\n  assert.strictEqual(typeof f, \"function\");\n\n  return function (/* args */) {\n    if (process.platform === 'win32') {\n      var args = _.toArray(arguments);\n      args = _.map(args, function (p, i) {\n        // if partialPaths is turned on (for path.join mostly)\n        // forget about conversion of absolute paths for Windows\n        return toDosPath(p, partialPaths);\n      });\n\n      var result = f.apply(path, args);\n      if (typeof result === \"string\") {\n        result = toPosixPath(result, partialPaths);\n      }\n\n      return result;\n    }\n\n    return f.apply(path, arguments);\n  };\n};\n\nfiles.pathJoin = wrapPathFunction(\"join\", true);\nfiles.pathNormalize = wrapPathFunction(\"normalize\");\nfiles.pathRelative = wrapPathFunction(\"relative\");\nfiles.pathResolve = wrapPathFunction(\"resolve\");\nfiles.pathDirname = wrapPathFunction(\"dirname\");\nfiles.pathBasename = wrapPathFunction(\"basename\");\nfiles.pathExtname = wrapPathFunction(\"extname\");\n// The path.isAbsolute function is implemented in Node v4.\nfiles.pathIsAbsolute = wrapPathFunction(\"isAbsolute\");\nfiles.pathSep = '/';\nfiles.pathDelimiter = ':';\nfiles.pathOsDelimiter = path.delimiter;\n\nfiles.convertToStandardPath = convertToStandardPath;\nfiles.convertToOSPath = convertToOSPath;\nfiles.convertToWindowsPath = toDosPath;\nfiles.convertToPosixPath = toPosixPath;\n\nfiles.convertToStandardLineEndings = convertToStandardLineEndings;\nfiles.convertToOSLineEndings = convertToOSLineEndings;\n"]},"hash":"74799be8a12f22d7cb1c472216d0acb1d1d2b013"}
