{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/shell-server.js","filenameRelative":"/bundle/programs/server/packages/shell-server.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/shell-server.js.map","sourceFileName":"/bundle/programs/server/packages/shell-server.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"shell-server"},"ignored":false,"code":"(function () {\n\n  /* Imports */\n  var Meteor = Package.meteor.Meteor;\n  var global = Package.meteor.global;\n  var meteorEnv = Package.meteor.meteorEnv;\n  var ECMAScript = Package.ecmascript.ECMAScript;\n  var meteorInstall = Package.modules.meteorInstall;\n  var Buffer = Package.modules.Buffer;\n  var process = Package.modules.process;\n  var _Symbol = Package['ecmascript-runtime'].Symbol;\n  var Map = Package['ecmascript-runtime'].Map;\n  var Set = Package['ecmascript-runtime'].Set;\n  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\n  var Promise = Package.promise.Promise;\n\n  var require = meteorInstall({ \"node_modules\": { \"meteor\": { \"shell-server\": { \"main.js\": [\"./shell-server.js\", function (require, exports, module) {\n\n            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //                                                                                                              //\n            // packages/shell-server/main.js                                                                                //\n            //                                                                                                              //\n            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //\n            module['import'](\"./shell-server.js\", { '*': function _(v, k) {\n                exports[k] = v;\n              } });var _listen;module['import'](\"./shell-server.js\", { \"listen\": function listen(v) {\n                _listen = v;\n              } });\n            // 2\n            //\n            var shellDir = process.env.METEOR_SHELL_DIR; // 4\n            if (shellDir) {\n              // 5\n              _listen(shellDir); // 6\n            } // 7\n            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n          }], \"shell-server.js\": [\"babel-runtime/helpers/classCallCheck\", \"babel-runtime/helpers/typeof\", \"assert\", \"path\", \"stream\", \"fs\", \"net\", \"tty\", \"vm\", \"underscore\", \"repl\", function (require, exports, module) {\n\n            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //                                                                                                              //\n            // packages/shell-server/shell-server.js                                                                        //\n            //                                                                                                              //\n            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            //\n            module['export']({ listen: function listen() {\n                return _listen2;\n              }, disable: function disable() {\n                return _disable;\n              } });var _classCallCheck;module['import'](\"babel-runtime/helpers/classCallCheck\", { \"default\": function _default(v) {\n                _classCallCheck = v;\n              } });var _typeof;module['import'](\"babel-runtime/helpers/typeof\", { \"default\": function _default(v) {\n                _typeof = v;\n              } });\n            //\n            var assert = require(\"assert\"); // 1\n            var path = require(\"path\"); // 2\n            var stream = require(\"stream\"); // 3\n            var fs = require(\"fs\"); // 4\n            var net = require(\"net\"); // 5\n            var tty = require(\"tty\"); // 6\n            var vm = require(\"vm\"); // 7\n            var _ = require(\"underscore\"); // 8\n            var INFO_FILE_MODE = parseInt(\"600\", 8); // Only the owner can read or write.                                   // 9\n            var EXITING_MESSAGE = \"Shell exiting...\"; // 10\n            //\n            // Invoked by the server process to listen for incoming connections from                                        //\n            // shell clients. Each connection gets its own REPL instance.                                                   //\n            function _listen2(shellDir) {\n              // 14\n              function callback() {\n                // 15\n                new Server(shellDir).listen(); // 16\n              } // 17\n              //\n              // If the server is still in the very early stages of starting up,                                            //\n              // Meteor.startup may not available yet.                                                                      //\n              if ((typeof Meteor === \"undefined\" ? \"undefined\" : _typeof(Meteor)) === \"object\") {\n                // 21\n                Meteor.startup(callback); // 22\n              } else if ((typeof __meteor_bootstrap__ === \"undefined\" ? \"undefined\" : _typeof(__meteor_bootstrap__)) === \"object\") {\n                  var hooks = __meteor_bootstrap__.startupHooks; // 24\n                  if (hooks) {\n                    // 25\n                    hooks.push(callback); // 26\n                  } else {\n                      // 27\n                      // As a fallback, just call the callback asynchronously.                                                  //\n                      setImmediate(callback); // 29\n                    } // 30\n                } // 31\n            } // 32\n            //\n            // Disabling the shell causes all attached clients to disconnect and exit.                                      //\n            function _disable(shellDir) {\n              // 35\n              try {\n                // 36\n                // Replace info.json with a file that says the shell server is                                              //\n                // disabled, so that any connected shell clients will fail to                                               //\n                // reconnect after the server process closes their sockets.                                                 //\n                fs.writeFileSync(getInfoFile(shellDir), JSON.stringify({ // 40\n                  status: \"disabled\", // 43\n                  reason: \"Shell server has shut down.\" // 44\n                }) + \"\\n\", { mode: INFO_FILE_MODE }); // 42\n              } catch (ignored) {} // 48\n            } // 49\n            //\n            var Server = function () {\n              //\n              function Server(shellDir) {\n                // 52\n                _classCallCheck(this, Server); // 52\n                //\n                var self = this; // 53\n                assert.ok(self instanceof Server); // 54\n                //\n                self.shellDir = shellDir; // 56\n                self.key = Math.random().toString(36).slice(2); // 57\n                //\n                self.server = net.createServer(function (socket) {\n                  // 59\n                  self.onConnection(socket); // 60\n                }).on(\"error\", function (err) {\n                  // 61\n                  console.error(err.stack); // 62\n                }); // 63\n              } // 64\n              //\n              Server.prototype.listen = function listen() {\n                //\n                var self = this; // 67\n                var infoFile = getInfoFile(self.shellDir); // 68\n                //\n                fs.unlink(infoFile, function () {\n                  // 70\n                  self.server.listen(0, \"127.0.0.1\", function () {\n                    // 71\n                    fs.writeFileSync(infoFile, JSON.stringify({ // 72\n                      status: \"enabled\", // 73\n                      port: self.server.address().port, // 74\n                      key: self.key // 75\n                    }) + \"\\n\", { // 72\n                      mode: INFO_FILE_MODE // 77\n                    }); // 76\n                  }); // 79\n                }); // 80\n              }; // 81\n              //\n              Server.prototype.onConnection = function onConnection(socket) {\n                //\n                var self = this; // 84\n                //\n                // Make sure this function doesn't try to write anything to the socket                                      //\n                // after it has been closed.                                                                                //\n                socket.on(\"close\", function () {\n                  // 88\n                  socket = null; // 89\n                }); // 90\n                //\n                // If communication is not established within 1000ms of the first                                           //\n                // connection, forcibly close the socket.                                                                   //\n                var timeout = setTimeout(function () {\n                  // 94\n                  if (socket) {\n                    // 95\n                    socket.removeAllListeners(\"data\"); // 96\n                    socket.end(EXITING_MESSAGE + \"\\n\"); // 97\n                  } // 98\n                }, 1000); // 99\n                //\n                // Let connecting clients configure certain REPL options by sending a                                       //\n                // JSON object over the socket. For example, only the client knows                                          //\n                // whether it's running a TTY or an Emacs subshell or some other kind of                                    //\n                // terminal, so the client must decide the value of options.terminal.                                       //\n                readJSONFromStream(socket, function (error, options, replInputSocket) {\n                  // 105\n                  clearTimeout(timeout); // 106\n                  //\n                  if (error) {\n                    // 108\n                    socket = null; // 109\n                    console.error(error.stack); // 110\n                    return; // 111\n                  } // 112\n                  //\n                  if (options.key !== self.key) {\n                    // 114\n                    if (socket) {\n                      // 115\n                      socket.end(EXITING_MESSAGE + \"\\n\"); // 116\n                    } // 117\n                    return; // 118\n                  } // 119\n                  delete options.key; // 120\n                  //\n                  if (options.evaluateAndExit) {\n                    // 122\n                    evalCommand.call(Object.create(null), // Dummy repl object without ._RecoverableError.                  // 123\n                    \"(\" + options.evaluateAndExit.command + \")\", null, // evalCommand ignores the context parameter, anyway\n                    options.evaluateAndExit.filename || \"<meteor shell>\", function (error, result) {\n                      // 127\n                      if (socket) {\n                        // 129\n                        var message = error ? { // 130\n                          error: error + \"\", // 131\n                          code: 1 // 132\n                        } : { // 130\n                          result: result // 134\n                        }; // 133\n                        //\n                        // Sending back a JSON payload allows the client to                                                 //\n                        // distinguish between errors and successful results.                                               //\n                        socket.end(JSON.stringify(message) + \"\\n\"); // 139\n                      } // 140\n                    }); // 141\n                    return; // 143\n                  } // 144\n                  delete options.evaluateAndExit; // 145\n                  //\n                  // Immutable options.                                                                                     //\n                  _.extend(options, { // 148\n                    input: replInputSocket, // 149\n                    output: socket // 150\n                  }); // 148\n                  //\n                  // Overridable options.                                                                                   //\n                  _.defaults(options, { // 154\n                    prompt: \"> \", // 155\n                    terminal: true, // 156\n                    useColors: true, // 157\n                    useGlobal: true, // 158\n                    ignoreUndefined: true // 159\n                  }); // 154\n                  //\n                  self.startREPL(options); // 162\n                }); // 163\n              }; // 164\n              //\n              Server.prototype.startREPL = function startREPL(options) {\n                //\n                var self = this; // 167\n                //\n                if (!options.output.columns) {\n                  // 169\n                  // The REPL's tab completion logic assumes process.stdout is a TTY,                                       //\n                  // and while that isn't technically true here, we can get tab                                             //\n                  // completion to behave correctly if we fake the .columns property.                                       //\n                  options.output.columns = getTerminalWidth(); // 173\n                } // 174\n                //\n                // Make sure this function doesn't try to write anything to the output                                      //\n                // stream after it has been closed.                                                                         //\n                options.output.on(\"close\", function () {\n                  // 178\n                  options.output = null; // 179\n                }); // 180\n                //\n                var repl = self.repl = require(\"repl\").start(options); // 182\n                //\n                // History persists across shell sessions!                                                                  //\n                self.initializeHistory(); // 185\n                //\n                // Save the global `_` object in the server.  This is probably defined by the                               //\n                // underscore package.  It is unlikely to be the same object as the `var _ =                                //\n                // require('underscore')` in this file!                                                                     //\n                var originalUnderscore = repl.context._; // 190\n                //\n                Object.defineProperty(repl.context, \"_\", { // 192\n                  // Force the global _ variable to remain bound to underscore.                                             //\n                  get: function get() {\n                    // 194\n                    return originalUnderscore; // 194\n                  }, // 194\n                  //\n                  // Expose the last REPL result as __ instead of _.                                                        //\n                  set: function set(lastResult) {\n                    // 197\n                    repl.context.__ = lastResult; // 198\n                  }, // 199\n                  //\n                  enumerable: true, // 201\n                  //\n                  // Allow this property to be (re)defined more than once (e.g. each                                        //\n                  // time the server restarts).                                                                             //\n                  configurable: true // 205\n                }); // 192\n                //\n                if (Package.modules) {\n                  // 208\n                  // Use the same `require` function and `module` object visible to the                                     //\n                  // application.                                                                                           //\n                  var toBeInstalled = {}; // 211\n                  var shellModuleName = \"meteor-shell-\" + Math.random().toString(36).slice(2) + \".js\"; // 212\n                  //\n                  toBeInstalled[shellModuleName] = function (require, exports, module) {\n                    // 215\n                    repl.context.module = module; // 216\n                    repl.context.require = require; // 217\n                    //\n                    // Tab completion sometimes uses require.extensions, but only for                                       //\n                    // the keys.                                                                                            //\n                    require.extensions = { // 221\n                      \".js\": true, // 222\n                      \".json\": true, // 223\n                      \".node\": true // 224\n                    }; // 221\n                  }; // 226\n                  //\n                  // This populates repl.context.{module,require} by evaluating the                                         //\n                  // module defined above.                                                                                  //\n                  Package.modules.meteorInstall(toBeInstalled)(\"./\" + shellModuleName); // 230\n                } // 231\n                //\n                repl.context.repl = repl; // 233\n                //\n                // Some improvements to the existing help messages.                                                         //\n                function addHelp(cmd, helpText) {\n                  // 236\n                  var info = repl.commands[cmd] || repl.commands[\".\" + cmd]; // 237\n                  if (info) {\n                    // 238\n                    info.help = helpText; // 239\n                  } // 240\n                } // 241\n                addHelp(\"break\", \"Terminate current command input and display new prompt\"); // 242\n                addHelp(\"exit\", \"Disconnect from server and leave shell\"); // 243\n                addHelp(\"help\", \"Show this help information\"); // 244\n                //\n                // When the REPL exits, signal the attached client to exit by sending it                                    //\n                // the special EXITING_MESSAGE.                                                                             //\n                repl.on(\"exit\", function () {\n                  // 248\n                  if (options.output) {\n                    // 249\n                    options.output.write(EXITING_MESSAGE + \"\\n\"); // 250\n                    options.output.end(); // 251\n                  } // 252\n                }); // 253\n                //\n                // When the server process exits, end the output stream but do not                                          //\n                // signal the attached client to exit.                                                                      //\n                process.on(\"exit\", function () {\n                  // 257\n                  if (options.output) {\n                    // 258\n                    options.output.end(); // 259\n                  } // 260\n                }); // 261\n                //\n                // This Meteor-specific shell command rebuilds the application as if a                                      //\n                // change was made to server code.                                                                          //\n                repl.defineCommand(\"reload\", { // 265\n                  help: \"Restart the server and the shell\", // 266\n                  action: function action() {\n                    // 267\n                    process.exit(0); // 268\n                  } // 269\n                }); // 265\n                //\n                // Trigger one recoverable error using the default eval function, just                                      //\n                // to capture the Recoverable error constructor, so that our custom                                         //\n                // evalCommand function can wrap recoverable errors properly.                                               //\n                repl.eval(\"{\", null, \"<meteor shell>\", function (error) {\n                  // 275\n                  // Capture the Recoverable error constructor.                                                             //\n                  repl._RecoverableError = error && error.constructor; // 279\n                  //\n                  // Now set repl.eval to the actual evalCommand function that we want                                      //\n                  // to use, bound to repl._domain if necessary.                                                            //\n                  repl.eval = repl._domain ? repl._domain.bind(evalCommand) : evalCommand; // 283\n                  //\n                  // Terminate the partial evaluation of the { command.                                                     //\n                  repl.commands[\"break\"].action.call(repl); // 288\n                }); // 289\n              }; // 291\n              //\n              // This function allows a persistent history of shell commands to be saved                                    //\n              // to and loaded from .meteor/local/shell-history.                                                            //\n              //\n              //\n              Server.prototype.initializeHistory = function initializeHistory() {\n                //\n                var self = this; // 296\n                var rli = self.repl.rli; // 297\n                var historyFile = getHistoryFile(self.shellDir); // 298\n                var historyFd = fs.openSync(historyFile, \"a+\"); // 299\n                var historyLines = fs.readFileSync(historyFile, \"utf8\").split(\"\\n\"); // 300\n                var seenLines = Object.create(null); // 301\n                //\n                if (!rli.history) {\n                  // 303\n                  rli.history = []; // 304\n                  rli.historyIndex = -1; // 305\n                } // 306\n                //\n                while (rli.history && historyLines.length > 0) {\n                  // 308\n                  var line = historyLines.pop(); // 309\n                  if (line && /\\S/.test(line) && !seenLines[line]) {\n                    // 310\n                    rli.history.push(line); // 311\n                    seenLines[line] = true; // 312\n                  } // 313\n                } // 314\n                //\n                rli.addListener(\"line\", function (line) {\n                  // 316\n                  if (historyFd >= 0 && /\\S/.test(line)) {\n                    // 317\n                    fs.writeSync(historyFd, line + \"\\n\"); // 318\n                  } // 319\n                }); // 320\n                //\n                self.repl.on(\"exit\", function () {\n                  // 322\n                  fs.closeSync(historyFd); // 323\n                  historyFd = -1; // 324\n                }); // 325\n              }; // 326\n              //\n              return Server; //\n            }(); //\n            //\n            function readJSONFromStream(inputStream, callback) {\n              // 329\n              var outputStream = new stream.PassThrough(); // 330\n              var dataSoFar = \"\"; // 331\n              //\n              function onData(buffer) {\n                // 333\n                var lines = buffer.toString(\"utf8\").split(\"\\n\"); // 334\n                //\n                while (lines.length > 0) {\n                  // 336\n                  dataSoFar += lines.shift(); // 337\n                  //\n                  try {\n                    // 339\n                    var json = JSON.parse(dataSoFar); // 340\n                  } catch (error) {\n                    // 341\n                    if (error instanceof SyntaxError) {\n                      // 342\n                      continue; // 343\n                    } // 344\n                    //\n                    return finish(error); // 346\n                  } // 347\n                  //\n                  if (lines.length > 0) {\n                    // 349\n                    outputStream.write(lines.join(\"\\n\")); // 350\n                  } // 351\n                  //\n                  inputStream.pipe(outputStream); // 353\n                  //\n                  return finish(null, json); // 355\n                } // 356\n              } // 357\n              //\n              function onClose() {\n                // 359\n                finish(new Error(\"stream unexpectedly closed\")); // 360\n              } // 361\n              //\n              var finished = false; // 363\n              function finish(error, json) {\n                // 364\n                if (!finished) {\n                  // 365\n                  finished = true; // 366\n                  inputStream.removeListener(\"data\", onData); // 367\n                  inputStream.removeListener(\"error\", finish); // 368\n                  inputStream.removeListener(\"close\", onClose); // 369\n                  callback(error, json, outputStream); // 370\n                } // 371\n              } // 372\n              //\n              inputStream.on(\"data\", onData); // 374\n              inputStream.on(\"error\", finish); // 375\n              inputStream.on(\"close\", onClose); // 376\n            } // 377\n            //\n            function getInfoFile(shellDir) {\n              // 379\n              return path.join(shellDir, \"info.json\"); // 380\n            } // 381\n            //\n            function getHistoryFile(shellDir) {\n              // 383\n              return path.join(shellDir, \"history\"); // 384\n            } // 385\n            //\n            function getTerminalWidth() {\n              // 387\n              try {\n                // 388\n                // Inspired by https://github.com/TooTallNate/ttys/blob/master/index.js                                     //\n                var fd = fs.openSync(\"/dev/tty\", \"r\"); // 390\n                assert.ok(tty.isatty(fd)); // 391\n                var ws = new tty.WriteStream(fd); // 392\n                ws.end(); // 393\n                return ws.columns; // 394\n              } catch (fancyApproachWasTooFancy) {\n                // 395\n                return 80; // 396\n              } // 397\n            } // 398\n            //\n            // Shell commands need to be executed in a Fiber in case they call into                                         //\n            // code that yields. Using a Promise is an even better idea, since it runs                                      //\n            // its callbacks in Fibers drawn from a pool, so the Fibers are recycled.                                       //\n            var evalCommandPromise = Promise.resolve(); // 403\n            //\n            function evalCommand(command, context, filename, callback) {\n              // 405\n              var repl = this; // 406\n              //\n              function finish(error, result) {\n                // 408\n                if (error) {\n                  // 409\n                  if (repl._RecoverableError && isRecoverableError(error, repl)) {\n                    // 410\n                    callback(new repl._RecoverableError(error)); // 412\n                  } else {\n                      // 413\n                      callback(error); // 414\n                    } // 415\n                } else {\n                    // 416\n                    callback(null, result); // 417\n                  } // 418\n              } // 419\n              //\n              if (Package.ecmascript) {\n                // 421\n                var noParens = stripParens(command); // 422\n                if (noParens !== command) {\n                  // 423\n                  var classMatch = /^\\s*class\\s+(\\w+)/.exec(noParens); // 424\n                  if (classMatch && classMatch[1] !== \"extends\") {\n                    // 425\n                    // If the command looks like a named ES2015 class, we remove the                                        //\n                    // extra layer of parentheses added by the REPL so that the                                             //\n                    // command will be evaluated as a class declaration rather than as                                      //\n                    // a named class expression. Note that you can still type (class A                                      //\n                    // {}) explicitly to evaluate a named class expression. The REPL                                        //\n                    // code that calls evalCommand handles named function expressions                                       //\n                    // similarly (first with and then without parentheses), but that                                        //\n                    // code doesn't know about ES2015 classes, which is why we have to                                      //\n                    // handle them here.                                                                                    //\n                    command = noParens; // 435\n                  } // 436\n                } // 437\n                //\n                try {\n                  // 439\n                  command = Package.ecmascript.ECMAScript.compileForShell(command); // 440\n                } catch (error) {\n                  // 441\n                  finish(error); // 442\n                  return; // 443\n                } // 444\n              } // 445\n              //\n              try {\n                // 447\n                var script = new vm.Script(command, { // 448\n                  filename: filename, // 449\n                  displayErrors: false // 450\n                }); // 448\n              } catch (parseError) {\n                // 452\n                finish(parseError); // 453\n                return; // 454\n              } // 455\n              //\n              evalCommandPromise.then(function () {\n                // 457\n                finish(null, script.runInThisContext()); // 458\n              })[\"catch\"](finish); // 459\n            } // 460\n            //\n            function stripParens(command) {\n              // 462\n              if (command.charAt(0) === \"(\" && command.charAt(command.length - 1) === \")\") {\n                // 463\n                return command.slice(1, command.length - 1); // 465\n              } // 466\n              return command; // 467\n            } // 468\n            //\n            // The bailOnIllegalToken and isRecoverableError functions are taken from                                       //\n            // https://github.com/nodejs/node/blob/c9e670ea2a/lib/repl.js#L1227-L1253                                       //\n            function bailOnIllegalToken(parser) {\n              // 472\n              return parser._literal === null && !parser.blockComment && !parser.regExpLiteral; // 473\n            } // 476\n            //\n            // If the error is that we've unexpectedly ended the input,                                                     //\n            // then let the user try to recover by adding more input.                                                       //\n            function isRecoverableError(e, repl) {\n              // 480\n              if (e && e.name === 'SyntaxError') {\n                // 481\n                var message = e.message; // 482\n                if (message === 'Unterminated template literal' || message === 'Missing } in template expression') {\n                  // 483\n                  repl._inTemplateLiteral = true; // 485\n                  return true; // 486\n                } // 487\n                //\n                if (message.startsWith('Unexpected end of input') || message.startsWith('missing ) after argument list') || message.startsWith('Unexpected token')) {\n                  return true; // 492\n                } // 493\n                //\n                if (message === 'Invalid or unexpected token') {\n                  // 495\n                  return !bailOnIllegalToken(repl.lineParser); // 496\n                } // 497\n              } // 498\n              //\n              return false; // 500\n            } // 501\n            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n          }] } } } }, { \"extensions\": [\".js\", \".json\"] });\n  var exports = require(\"./node_modules/meteor/shell-server/main.js\");\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  Package['shell-server'] = exports;\n})();\n\n//# sourceMappingURL=shell-server.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/shell-server.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/shell-server.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"shell-server\":{\"main.js\":[\"./shell-server.js\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/shell-server/main.js                                                                                //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.import(\"./shell-server.js\",{'*':function(v,k){exports[k]=v;}});var listen;module.import(\"./shell-server.js\",{\"listen\":function(v){listen=v}});\n                                                                                                                // 2\n                                                                                                                //\nvar shellDir = process.env.METEOR_SHELL_DIR;                                                                    // 4\nif (shellDir) {                                                                                                 // 5\n  listen(shellDir);                                                                                             // 6\n}                                                                                                               // 7\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"shell-server.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/typeof\",\"assert\",\"path\",\"stream\",\"fs\",\"net\",\"tty\",\"vm\",\"underscore\",\"repl\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/shell-server/shell-server.js                                                                        //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.export({listen:function(){return listen},disable:function(){return disable}});var _classCallCheck;module.import(\"babel-runtime/helpers/classCallCheck\",{\"default\":function(v){_classCallCheck=v}});var _typeof;module.import(\"babel-runtime/helpers/typeof\",{\"default\":function(v){_typeof=v}});\n                                                                                                                //\nvar assert = require(\"assert\");                                                                                 // 1\nvar path = require(\"path\");                                                                                     // 2\nvar stream = require(\"stream\");                                                                                 // 3\nvar fs = require(\"fs\");                                                                                         // 4\nvar net = require(\"net\");                                                                                       // 5\nvar tty = require(\"tty\");                                                                                       // 6\nvar vm = require(\"vm\");                                                                                         // 7\nvar _ = require(\"underscore\");                                                                                  // 8\nvar INFO_FILE_MODE = parseInt(\"600\", 8); // Only the owner can read or write.                                   // 9\nvar EXITING_MESSAGE = \"Shell exiting...\";                                                                       // 10\n                                                                                                                //\n// Invoked by the server process to listen for incoming connections from                                        //\n// shell clients. Each connection gets its own REPL instance.                                                   //\nfunction listen(shellDir) {                                                                                     // 14\n  function callback() {                                                                                         // 15\n    new Server(shellDir).listen();                                                                              // 16\n  }                                                                                                             // 17\n                                                                                                                //\n  // If the server is still in the very early stages of starting up,                                            //\n  // Meteor.startup may not available yet.                                                                      //\n  if ((typeof Meteor === \"undefined\" ? \"undefined\" : _typeof(Meteor)) === \"object\") {                           // 21\n    Meteor.startup(callback);                                                                                   // 22\n  } else if ((typeof __meteor_bootstrap__ === \"undefined\" ? \"undefined\" : _typeof(__meteor_bootstrap__)) === \"object\") {\n    var hooks = __meteor_bootstrap__.startupHooks;                                                              // 24\n    if (hooks) {                                                                                                // 25\n      hooks.push(callback);                                                                                     // 26\n    } else {                                                                                                    // 27\n      // As a fallback, just call the callback asynchronously.                                                  //\n      setImmediate(callback);                                                                                   // 29\n    }                                                                                                           // 30\n  }                                                                                                             // 31\n}                                                                                                               // 32\n                                                                                                                //\n// Disabling the shell causes all attached clients to disconnect and exit.                                      //\nfunction disable(shellDir) {                                                                                    // 35\n  try {                                                                                                         // 36\n    // Replace info.json with a file that says the shell server is                                              //\n    // disabled, so that any connected shell clients will fail to                                               //\n    // reconnect after the server process closes their sockets.                                                 //\n    fs.writeFileSync(getInfoFile(shellDir), JSON.stringify({                                                    // 40\n      status: \"disabled\",                                                                                       // 43\n      reason: \"Shell server has shut down.\"                                                                     // 44\n    }) + \"\\n\", { mode: INFO_FILE_MODE });                                                                       // 42\n  } catch (ignored) {}                                                                                          // 48\n}                                                                                                               // 49\n                                                                                                                //\nvar Server = function () {                                                                                      //\n  function Server(shellDir) {                                                                                   // 52\n    _classCallCheck(this, Server);                                                                              // 52\n                                                                                                                //\n    var self = this;                                                                                            // 53\n    assert.ok(self instanceof Server);                                                                          // 54\n                                                                                                                //\n    self.shellDir = shellDir;                                                                                   // 56\n    self.key = Math.random().toString(36).slice(2);                                                             // 57\n                                                                                                                //\n    self.server = net.createServer(function (socket) {                                                          // 59\n      self.onConnection(socket);                                                                                // 60\n    }).on(\"error\", function (err) {                                                                             // 61\n      console.error(err.stack);                                                                                 // 62\n    });                                                                                                         // 63\n  }                                                                                                             // 64\n                                                                                                                //\n  Server.prototype.listen = function listen() {                                                                 //\n    var self = this;                                                                                            // 67\n    var infoFile = getInfoFile(self.shellDir);                                                                  // 68\n                                                                                                                //\n    fs.unlink(infoFile, function () {                                                                           // 70\n      self.server.listen(0, \"127.0.0.1\", function () {                                                          // 71\n        fs.writeFileSync(infoFile, JSON.stringify({                                                             // 72\n          status: \"enabled\",                                                                                    // 73\n          port: self.server.address().port,                                                                     // 74\n          key: self.key                                                                                         // 75\n        }) + \"\\n\", {                                                                                            // 72\n          mode: INFO_FILE_MODE                                                                                  // 77\n        });                                                                                                     // 76\n      });                                                                                                       // 79\n    });                                                                                                         // 80\n  };                                                                                                            // 81\n                                                                                                                //\n  Server.prototype.onConnection = function onConnection(socket) {                                               //\n    var self = this;                                                                                            // 84\n                                                                                                                //\n    // Make sure this function doesn't try to write anything to the socket                                      //\n    // after it has been closed.                                                                                //\n    socket.on(\"close\", function () {                                                                            // 88\n      socket = null;                                                                                            // 89\n    });                                                                                                         // 90\n                                                                                                                //\n    // If communication is not established within 1000ms of the first                                           //\n    // connection, forcibly close the socket.                                                                   //\n    var timeout = setTimeout(function () {                                                                      // 94\n      if (socket) {                                                                                             // 95\n        socket.removeAllListeners(\"data\");                                                                      // 96\n        socket.end(EXITING_MESSAGE + \"\\n\");                                                                     // 97\n      }                                                                                                         // 98\n    }, 1000);                                                                                                   // 99\n                                                                                                                //\n    // Let connecting clients configure certain REPL options by sending a                                       //\n    // JSON object over the socket. For example, only the client knows                                          //\n    // whether it's running a TTY or an Emacs subshell or some other kind of                                    //\n    // terminal, so the client must decide the value of options.terminal.                                       //\n    readJSONFromStream(socket, function (error, options, replInputSocket) {                                     // 105\n      clearTimeout(timeout);                                                                                    // 106\n                                                                                                                //\n      if (error) {                                                                                              // 108\n        socket = null;                                                                                          // 109\n        console.error(error.stack);                                                                             // 110\n        return;                                                                                                 // 111\n      }                                                                                                         // 112\n                                                                                                                //\n      if (options.key !== self.key) {                                                                           // 114\n        if (socket) {                                                                                           // 115\n          socket.end(EXITING_MESSAGE + \"\\n\");                                                                   // 116\n        }                                                                                                       // 117\n        return;                                                                                                 // 118\n      }                                                                                                         // 119\n      delete options.key;                                                                                       // 120\n                                                                                                                //\n      if (options.evaluateAndExit) {                                                                            // 122\n        evalCommand.call(Object.create(null), // Dummy repl object without ._RecoverableError.                  // 123\n        \"(\" + options.evaluateAndExit.command + \")\", null, // evalCommand ignores the context parameter, anyway\n        options.evaluateAndExit.filename || \"<meteor shell>\", function (error, result) {                        // 127\n          if (socket) {                                                                                         // 129\n            var message = error ? {                                                                             // 130\n              error: error + \"\",                                                                                // 131\n              code: 1                                                                                           // 132\n            } : {                                                                                               // 130\n              result: result                                                                                    // 134\n            };                                                                                                  // 133\n                                                                                                                //\n            // Sending back a JSON payload allows the client to                                                 //\n            // distinguish between errors and successful results.                                               //\n            socket.end(JSON.stringify(message) + \"\\n\");                                                         // 139\n          }                                                                                                     // 140\n        });                                                                                                     // 141\n        return;                                                                                                 // 143\n      }                                                                                                         // 144\n      delete options.evaluateAndExit;                                                                           // 145\n                                                                                                                //\n      // Immutable options.                                                                                     //\n      _.extend(options, {                                                                                       // 148\n        input: replInputSocket,                                                                                 // 149\n        output: socket                                                                                          // 150\n      });                                                                                                       // 148\n                                                                                                                //\n      // Overridable options.                                                                                   //\n      _.defaults(options, {                                                                                     // 154\n        prompt: \"> \",                                                                                           // 155\n        terminal: true,                                                                                         // 156\n        useColors: true,                                                                                        // 157\n        useGlobal: true,                                                                                        // 158\n        ignoreUndefined: true                                                                                   // 159\n      });                                                                                                       // 154\n                                                                                                                //\n      self.startREPL(options);                                                                                  // 162\n    });                                                                                                         // 163\n  };                                                                                                            // 164\n                                                                                                                //\n  Server.prototype.startREPL = function startREPL(options) {                                                    //\n    var self = this;                                                                                            // 167\n                                                                                                                //\n    if (!options.output.columns) {                                                                              // 169\n      // The REPL's tab completion logic assumes process.stdout is a TTY,                                       //\n      // and while that isn't technically true here, we can get tab                                             //\n      // completion to behave correctly if we fake the .columns property.                                       //\n      options.output.columns = getTerminalWidth();                                                              // 173\n    }                                                                                                           // 174\n                                                                                                                //\n    // Make sure this function doesn't try to write anything to the output                                      //\n    // stream after it has been closed.                                                                         //\n    options.output.on(\"close\", function () {                                                                    // 178\n      options.output = null;                                                                                    // 179\n    });                                                                                                         // 180\n                                                                                                                //\n    var repl = self.repl = require(\"repl\").start(options);                                                      // 182\n                                                                                                                //\n    // History persists across shell sessions!                                                                  //\n    self.initializeHistory();                                                                                   // 185\n                                                                                                                //\n    // Save the global `_` object in the server.  This is probably defined by the                               //\n    // underscore package.  It is unlikely to be the same object as the `var _ =                                //\n    // require('underscore')` in this file!                                                                     //\n    var originalUnderscore = repl.context._;                                                                    // 190\n                                                                                                                //\n    Object.defineProperty(repl.context, \"_\", {                                                                  // 192\n      // Force the global _ variable to remain bound to underscore.                                             //\n      get: function get() {                                                                                     // 194\n        return originalUnderscore;                                                                              // 194\n      },                                                                                                        // 194\n                                                                                                                //\n      // Expose the last REPL result as __ instead of _.                                                        //\n      set: function set(lastResult) {                                                                           // 197\n        repl.context.__ = lastResult;                                                                           // 198\n      },                                                                                                        // 199\n                                                                                                                //\n      enumerable: true,                                                                                         // 201\n                                                                                                                //\n      // Allow this property to be (re)defined more than once (e.g. each                                        //\n      // time the server restarts).                                                                             //\n      configurable: true                                                                                        // 205\n    });                                                                                                         // 192\n                                                                                                                //\n    if (Package.modules) {                                                                                      // 208\n      // Use the same `require` function and `module` object visible to the                                     //\n      // application.                                                                                           //\n      var toBeInstalled = {};                                                                                   // 211\n      var shellModuleName = \"meteor-shell-\" + Math.random().toString(36).slice(2) + \".js\";                      // 212\n                                                                                                                //\n      toBeInstalled[shellModuleName] = function (require, exports, module) {                                    // 215\n        repl.context.module = module;                                                                           // 216\n        repl.context.require = require;                                                                         // 217\n                                                                                                                //\n        // Tab completion sometimes uses require.extensions, but only for                                       //\n        // the keys.                                                                                            //\n        require.extensions = {                                                                                  // 221\n          \".js\": true,                                                                                          // 222\n          \".json\": true,                                                                                        // 223\n          \".node\": true                                                                                         // 224\n        };                                                                                                      // 221\n      };                                                                                                        // 226\n                                                                                                                //\n      // This populates repl.context.{module,require} by evaluating the                                         //\n      // module defined above.                                                                                  //\n      Package.modules.meteorInstall(toBeInstalled)(\"./\" + shellModuleName);                                     // 230\n    }                                                                                                           // 231\n                                                                                                                //\n    repl.context.repl = repl;                                                                                   // 233\n                                                                                                                //\n    // Some improvements to the existing help messages.                                                         //\n    function addHelp(cmd, helpText) {                                                                           // 236\n      var info = repl.commands[cmd] || repl.commands[\".\" + cmd];                                                // 237\n      if (info) {                                                                                               // 238\n        info.help = helpText;                                                                                   // 239\n      }                                                                                                         // 240\n    }                                                                                                           // 241\n    addHelp(\"break\", \"Terminate current command input and display new prompt\");                                 // 242\n    addHelp(\"exit\", \"Disconnect from server and leave shell\");                                                  // 243\n    addHelp(\"help\", \"Show this help information\");                                                              // 244\n                                                                                                                //\n    // When the REPL exits, signal the attached client to exit by sending it                                    //\n    // the special EXITING_MESSAGE.                                                                             //\n    repl.on(\"exit\", function () {                                                                               // 248\n      if (options.output) {                                                                                     // 249\n        options.output.write(EXITING_MESSAGE + \"\\n\");                                                           // 250\n        options.output.end();                                                                                   // 251\n      }                                                                                                         // 252\n    });                                                                                                         // 253\n                                                                                                                //\n    // When the server process exits, end the output stream but do not                                          //\n    // signal the attached client to exit.                                                                      //\n    process.on(\"exit\", function () {                                                                            // 257\n      if (options.output) {                                                                                     // 258\n        options.output.end();                                                                                   // 259\n      }                                                                                                         // 260\n    });                                                                                                         // 261\n                                                                                                                //\n    // This Meteor-specific shell command rebuilds the application as if a                                      //\n    // change was made to server code.                                                                          //\n    repl.defineCommand(\"reload\", {                                                                              // 265\n      help: \"Restart the server and the shell\",                                                                 // 266\n      action: function action() {                                                                               // 267\n        process.exit(0);                                                                                        // 268\n      }                                                                                                         // 269\n    });                                                                                                         // 265\n                                                                                                                //\n    // Trigger one recoverable error using the default eval function, just                                      //\n    // to capture the Recoverable error constructor, so that our custom                                         //\n    // evalCommand function can wrap recoverable errors properly.                                               //\n    repl.eval(\"{\", null, \"<meteor shell>\", function (error) {                                                   // 275\n      // Capture the Recoverable error constructor.                                                             //\n      repl._RecoverableError = error && error.constructor;                                                      // 279\n                                                                                                                //\n      // Now set repl.eval to the actual evalCommand function that we want                                      //\n      // to use, bound to repl._domain if necessary.                                                            //\n      repl.eval = repl._domain ? repl._domain.bind(evalCommand) : evalCommand;                                  // 283\n                                                                                                                //\n      // Terminate the partial evaluation of the { command.                                                     //\n      repl.commands[\"break\"].action.call(repl);                                                                 // 288\n    });                                                                                                         // 289\n  };                                                                                                            // 291\n                                                                                                                //\n  // This function allows a persistent history of shell commands to be saved                                    //\n  // to and loaded from .meteor/local/shell-history.                                                            //\n                                                                                                                //\n                                                                                                                //\n  Server.prototype.initializeHistory = function initializeHistory() {                                           //\n    var self = this;                                                                                            // 296\n    var rli = self.repl.rli;                                                                                    // 297\n    var historyFile = getHistoryFile(self.shellDir);                                                            // 298\n    var historyFd = fs.openSync(historyFile, \"a+\");                                                             // 299\n    var historyLines = fs.readFileSync(historyFile, \"utf8\").split(\"\\n\");                                        // 300\n    var seenLines = Object.create(null);                                                                        // 301\n                                                                                                                //\n    if (!rli.history) {                                                                                         // 303\n      rli.history = [];                                                                                         // 304\n      rli.historyIndex = -1;                                                                                    // 305\n    }                                                                                                           // 306\n                                                                                                                //\n    while (rli.history && historyLines.length > 0) {                                                            // 308\n      var line = historyLines.pop();                                                                            // 309\n      if (line && /\\S/.test(line) && !seenLines[line]) {                                                        // 310\n        rli.history.push(line);                                                                                 // 311\n        seenLines[line] = true;                                                                                 // 312\n      }                                                                                                         // 313\n    }                                                                                                           // 314\n                                                                                                                //\n    rli.addListener(\"line\", function (line) {                                                                   // 316\n      if (historyFd >= 0 && /\\S/.test(line)) {                                                                  // 317\n        fs.writeSync(historyFd, line + \"\\n\");                                                                   // 318\n      }                                                                                                         // 319\n    });                                                                                                         // 320\n                                                                                                                //\n    self.repl.on(\"exit\", function () {                                                                          // 322\n      fs.closeSync(historyFd);                                                                                  // 323\n      historyFd = -1;                                                                                           // 324\n    });                                                                                                         // 325\n  };                                                                                                            // 326\n                                                                                                                //\n  return Server;                                                                                                //\n}();                                                                                                            //\n                                                                                                                //\nfunction readJSONFromStream(inputStream, callback) {                                                            // 329\n  var outputStream = new stream.PassThrough();                                                                  // 330\n  var dataSoFar = \"\";                                                                                           // 331\n                                                                                                                //\n  function onData(buffer) {                                                                                     // 333\n    var lines = buffer.toString(\"utf8\").split(\"\\n\");                                                            // 334\n                                                                                                                //\n    while (lines.length > 0) {                                                                                  // 336\n      dataSoFar += lines.shift();                                                                               // 337\n                                                                                                                //\n      try {                                                                                                     // 339\n        var json = JSON.parse(dataSoFar);                                                                       // 340\n      } catch (error) {                                                                                         // 341\n        if (error instanceof SyntaxError) {                                                                     // 342\n          continue;                                                                                             // 343\n        }                                                                                                       // 344\n                                                                                                                //\n        return finish(error);                                                                                   // 346\n      }                                                                                                         // 347\n                                                                                                                //\n      if (lines.length > 0) {                                                                                   // 349\n        outputStream.write(lines.join(\"\\n\"));                                                                   // 350\n      }                                                                                                         // 351\n                                                                                                                //\n      inputStream.pipe(outputStream);                                                                           // 353\n                                                                                                                //\n      return finish(null, json);                                                                                // 355\n    }                                                                                                           // 356\n  }                                                                                                             // 357\n                                                                                                                //\n  function onClose() {                                                                                          // 359\n    finish(new Error(\"stream unexpectedly closed\"));                                                            // 360\n  }                                                                                                             // 361\n                                                                                                                //\n  var finished = false;                                                                                         // 363\n  function finish(error, json) {                                                                                // 364\n    if (!finished) {                                                                                            // 365\n      finished = true;                                                                                          // 366\n      inputStream.removeListener(\"data\", onData);                                                               // 367\n      inputStream.removeListener(\"error\", finish);                                                              // 368\n      inputStream.removeListener(\"close\", onClose);                                                             // 369\n      callback(error, json, outputStream);                                                                      // 370\n    }                                                                                                           // 371\n  }                                                                                                             // 372\n                                                                                                                //\n  inputStream.on(\"data\", onData);                                                                               // 374\n  inputStream.on(\"error\", finish);                                                                              // 375\n  inputStream.on(\"close\", onClose);                                                                             // 376\n}                                                                                                               // 377\n                                                                                                                //\nfunction getInfoFile(shellDir) {                                                                                // 379\n  return path.join(shellDir, \"info.json\");                                                                      // 380\n}                                                                                                               // 381\n                                                                                                                //\nfunction getHistoryFile(shellDir) {                                                                             // 383\n  return path.join(shellDir, \"history\");                                                                        // 384\n}                                                                                                               // 385\n                                                                                                                //\nfunction getTerminalWidth() {                                                                                   // 387\n  try {                                                                                                         // 388\n    // Inspired by https://github.com/TooTallNate/ttys/blob/master/index.js                                     //\n    var fd = fs.openSync(\"/dev/tty\", \"r\");                                                                      // 390\n    assert.ok(tty.isatty(fd));                                                                                  // 391\n    var ws = new tty.WriteStream(fd);                                                                           // 392\n    ws.end();                                                                                                   // 393\n    return ws.columns;                                                                                          // 394\n  } catch (fancyApproachWasTooFancy) {                                                                          // 395\n    return 80;                                                                                                  // 396\n  }                                                                                                             // 397\n}                                                                                                               // 398\n                                                                                                                //\n// Shell commands need to be executed in a Fiber in case they call into                                         //\n// code that yields. Using a Promise is an even better idea, since it runs                                      //\n// its callbacks in Fibers drawn from a pool, so the Fibers are recycled.                                       //\nvar evalCommandPromise = Promise.resolve();                                                                     // 403\n                                                                                                                //\nfunction evalCommand(command, context, filename, callback) {                                                    // 405\n  var repl = this;                                                                                              // 406\n                                                                                                                //\n  function finish(error, result) {                                                                              // 408\n    if (error) {                                                                                                // 409\n      if (repl._RecoverableError && isRecoverableError(error, repl)) {                                          // 410\n        callback(new repl._RecoverableError(error));                                                            // 412\n      } else {                                                                                                  // 413\n        callback(error);                                                                                        // 414\n      }                                                                                                         // 415\n    } else {                                                                                                    // 416\n      callback(null, result);                                                                                   // 417\n    }                                                                                                           // 418\n  }                                                                                                             // 419\n                                                                                                                //\n  if (Package.ecmascript) {                                                                                     // 421\n    var noParens = stripParens(command);                                                                        // 422\n    if (noParens !== command) {                                                                                 // 423\n      var classMatch = /^\\s*class\\s+(\\w+)/.exec(noParens);                                                      // 424\n      if (classMatch && classMatch[1] !== \"extends\") {                                                          // 425\n        // If the command looks like a named ES2015 class, we remove the                                        //\n        // extra layer of parentheses added by the REPL so that the                                             //\n        // command will be evaluated as a class declaration rather than as                                      //\n        // a named class expression. Note that you can still type (class A                                      //\n        // {}) explicitly to evaluate a named class expression. The REPL                                        //\n        // code that calls evalCommand handles named function expressions                                       //\n        // similarly (first with and then without parentheses), but that                                        //\n        // code doesn't know about ES2015 classes, which is why we have to                                      //\n        // handle them here.                                                                                    //\n        command = noParens;                                                                                     // 435\n      }                                                                                                         // 436\n    }                                                                                                           // 437\n                                                                                                                //\n    try {                                                                                                       // 439\n      command = Package.ecmascript.ECMAScript.compileForShell(command);                                         // 440\n    } catch (error) {                                                                                           // 441\n      finish(error);                                                                                            // 442\n      return;                                                                                                   // 443\n    }                                                                                                           // 444\n  }                                                                                                             // 445\n                                                                                                                //\n  try {                                                                                                         // 447\n    var script = new vm.Script(command, {                                                                       // 448\n      filename: filename,                                                                                       // 449\n      displayErrors: false                                                                                      // 450\n    });                                                                                                         // 448\n  } catch (parseError) {                                                                                        // 452\n    finish(parseError);                                                                                         // 453\n    return;                                                                                                     // 454\n  }                                                                                                             // 455\n                                                                                                                //\n  evalCommandPromise.then(function () {                                                                         // 457\n    finish(null, script.runInThisContext());                                                                    // 458\n  })[\"catch\"](finish);                                                                                          // 459\n}                                                                                                               // 460\n                                                                                                                //\nfunction stripParens(command) {                                                                                 // 462\n  if (command.charAt(0) === \"(\" && command.charAt(command.length - 1) === \")\") {                                // 463\n    return command.slice(1, command.length - 1);                                                                // 465\n  }                                                                                                             // 466\n  return command;                                                                                               // 467\n}                                                                                                               // 468\n                                                                                                                //\n// The bailOnIllegalToken and isRecoverableError functions are taken from                                       //\n// https://github.com/nodejs/node/blob/c9e670ea2a/lib/repl.js#L1227-L1253                                       //\nfunction bailOnIllegalToken(parser) {                                                                           // 472\n  return parser._literal === null && !parser.blockComment && !parser.regExpLiteral;                             // 473\n}                                                                                                               // 476\n                                                                                                                //\n// If the error is that we've unexpectedly ended the input,                                                     //\n// then let the user try to recover by adding more input.                                                       //\nfunction isRecoverableError(e, repl) {                                                                          // 480\n  if (e && e.name === 'SyntaxError') {                                                                          // 481\n    var message = e.message;                                                                                    // 482\n    if (message === 'Unterminated template literal' || message === 'Missing } in template expression') {        // 483\n      repl._inTemplateLiteral = true;                                                                           // 485\n      return true;                                                                                              // 486\n    }                                                                                                           // 487\n                                                                                                                //\n    if (message.startsWith('Unexpected end of input') || message.startsWith('missing ) after argument list') || message.startsWith('Unexpected token')) {\n      return true;                                                                                              // 492\n    }                                                                                                           // 493\n                                                                                                                //\n    if (message === 'Invalid or unexpected token') {                                                            // 495\n      return !bailOnIllegalToken(repl.lineParser);                                                              // 496\n    }                                                                                                           // 497\n  }                                                                                                             // 498\n                                                                                                                //\n  return false;                                                                                                 // 500\n}                                                                                                               // 501\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/shell-server/main.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['shell-server'] = exports;\n\n})();\n\n//# sourceMappingURL=shell-server.js.map\n"]},"hash":"7f082ef5193c86cafc715bec14fc81a7d16f0c96"}
