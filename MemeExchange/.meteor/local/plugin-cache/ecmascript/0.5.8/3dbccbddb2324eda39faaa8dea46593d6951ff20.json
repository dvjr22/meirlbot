{"metadata":{"usedHelpers":["typeof"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/meteor.js","filenameRelative":"/bundle/programs/server/packages/meteor.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/meteor.js.map","sourceFileName":"/bundle/programs/server/packages/meteor.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"meteor"},"ignored":false,"code":"var _typeof;module.import(\"babel-runtime/helpers/typeof\",{\"default\":function(v){_typeof=v}});\n(function () {\n\n  /* Imports */\n  var _ = Package.underscore._;\n\n  /* Package-scope variables */\n  var global, meteorEnv, Meteor;\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/global.js                                                                                       //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    global = this;\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/server_environment.js                                                                           //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    meteorEnv = {\n      NODE_ENV: process.env.NODE_ENV || \"production\",\n      TEST_METADATA: process.env.TEST_METADATA || \"{}\"\n    };\n\n    if ((typeof __meteor_runtime_config__ === \"undefined\" ? \"undefined\" : _typeof(__meteor_runtime_config__)) === \"object\") {\n      __meteor_runtime_config__.meteorEnv = meteorEnv;\n    }\n\n    Meteor = {\n      isProduction: meteorEnv.NODE_ENV === \"production\",\n      isDevelopment: meteorEnv.NODE_ENV !== \"production\",\n      isClient: false,\n      isServer: true,\n      isCordova: false\n    };\n\n    Meteor.settings = {};\n\n    if (process.env.METEOR_SETTINGS) {\n      try {\n        Meteor.settings = JSON.parse(process.env.METEOR_SETTINGS);\n      } catch (e) {\n        throw new Error(\"METEOR_SETTINGS are not valid JSON: \" + process.env.METEOR_SETTINGS);\n      }\n    }\n\n    // Make sure that there is always a public attribute\n    // to enable Meteor.settings.public on client\n    if (!Meteor.settings[\"public\"]) {\n      Meteor.settings[\"public\"] = {};\n    }\n\n    // Push a subset of settings to the client.  Note that the way this\n    // code is written, if the app mutates `Meteor.settings.public` on the\n    // server, it also mutates\n    // `__meteor_runtime_config__.PUBLIC_SETTINGS`, and the modified\n    // settings will be sent to the client.\n    if ((typeof __meteor_runtime_config__ === \"undefined\" ? \"undefined\" : _typeof(__meteor_runtime_config__)) === \"object\") {\n      __meteor_runtime_config__.PUBLIC_SETTINGS = Meteor.settings[\"public\"];\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/helpers.js                                                                                      //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    if (Meteor.isServer) var Future = Npm.require('fibers/future');\n\n    if ((typeof __meteor_runtime_config__ === \"undefined\" ? \"undefined\" : _typeof(__meteor_runtime_config__)) === 'object' && __meteor_runtime_config__.meteorRelease) {\n      /**\n       * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `\"1.2.3\"`). It is `undefined` if the project was built using a git checkout of Meteor.\n       * @locus Anywhere\n       * @type {String}\n       */\n      Meteor.release = __meteor_runtime_config__.meteorRelease;\n    }\n\n    // XXX find a better home for these? Ideally they would be _.get,\n    // _.ensure, _.delete..\n\n    _.extend(Meteor, {\n      // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or\n      // a[b][c] doesn't exist.\n      //\n      _get: function _get(obj /*, arguments */) {\n        for (var i = 1; i < arguments.length; i++) {\n          if (!(arguments[i] in obj)) return undefined;\n          obj = obj[arguments[i]];\n        }\n        return obj;\n      },\n\n      // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,\n      // it is created and set to {}. Either way, it is returned.\n      //\n      _ensure: function _ensure(obj /*, arguments */) {\n        for (var i = 1; i < arguments.length; i++) {\n          var key = arguments[i];\n          if (!(key in obj)) obj[key] = {};\n          obj = obj[key];\n        }\n\n        return obj;\n      },\n\n      // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it\n      // isn't empty, then a[b] unless it isn't empty.\n      //\n      _delete: function _delete(obj /*, arguments */) {\n        var stack = [obj];\n        var leaf = true;\n        for (var i = 1; i < arguments.length - 1; i++) {\n          var key = arguments[i];\n          if (!(key in obj)) {\n            leaf = false;\n            break;\n          }\n          obj = obj[key];\n          if ((typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) !== \"object\") break;\n          stack.push(obj);\n        }\n\n        for (var i = stack.length - 1; i >= 0; i--) {\n          var key = arguments[i + 1];\n\n          if (leaf) leaf = false;else for (var other in stack[i][key]) {\n            return;\n          } // not empty -- we're done\n\n          delete stack[i][key];\n        }\n      },\n\n      // wrapAsync can wrap any function that takes some number of arguments that\n      // can't be undefined, followed by some optional arguments, where the callback\n      // is the last optional argument.\n      // e.g. fs.readFile(pathname, [callback]),\n      // fs.open(pathname, flags, [mode], [callback])\n      // For maximum effectiveness and least confusion, wrapAsync should be used on\n      // functions where the callback is the only argument of type Function.\n\n      /**\n       * @memberOf Meteor\n       * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.\n       * @locus Anywhere\n       * @param {Function} func A function that takes a callback as its final parameter\n       * @param {Object} [context] Optional `this` object against which the original function will be invoked\n       */\n      wrapAsync: function wrapAsync(fn, context) {\n        return function () /* arguments */{\n          var self = context || this;\n          var newArgs = _.toArray(arguments);\n          var callback;\n\n          for (var i = newArgs.length - 1; i >= 0; --i) {\n            var arg = newArgs[i];\n            var type = typeof arg === \"undefined\" ? \"undefined\" : _typeof(arg);\n            if (type !== \"undefined\") {\n              if (type === \"function\") {\n                callback = arg;\n              }\n              break;\n            }\n          }\n\n          if (!callback) {\n            if (Meteor.isClient) {\n              callback = logErr;\n            } else {\n              var fut = new Future();\n              callback = fut.resolver();\n            }\n            ++i; // Insert the callback just after arg.\n          }\n\n          newArgs[i] = Meteor.bindEnvironment(callback);\n          var result = fn.apply(self, newArgs);\n          return fut ? fut.wait() : result;\n        };\n      },\n\n      // Sets child's prototype to a new object whose prototype is parent's\n      // prototype. Used as:\n      //   Meteor._inherits(ClassB, ClassA).\n      //   _.extend(ClassB.prototype, { ... })\n      // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.\n      _inherits: function _inherits(Child, Parent) {\n        // copy Parent static properties\n        for (var key in Parent) {\n          // make sure we only copy hasOwnProperty properties vs. prototype\n          // properties\n          if (_.has(Parent, key)) Child[key] = Parent[key];\n        }\n\n        // a middle member of prototype chain: takes the prototype from the Parent\n        var Middle = function Middle() {\n          this.constructor = Child;\n        };\n        Middle.prototype = Parent.prototype;\n        Child.prototype = new Middle();\n        Child.__super__ = Parent.prototype;\n        return Child;\n      }\n    });\n\n    var warnedAboutWrapAsync = false;\n\n    /**\n     * @deprecated in 0.9.3\n     */\n    Meteor._wrapAsync = function (fn, context) {\n      if (!warnedAboutWrapAsync) {\n        Meteor._debug(\"Meteor._wrapAsync has been renamed to Meteor.wrapAsync\");\n        warnedAboutWrapAsync = true;\n      }\n      return Meteor.wrapAsync.apply(Meteor, arguments);\n    };\n\n    function logErr(err) {\n      if (err) {\n        return Meteor._debug(\"Exception in callback of async function\", err.stack ? err.stack : err);\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/setimmediate.js                                                                                 //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Chooses one of three setImmediate implementations:\n    //\n    // * Native setImmediate (IE 10, Node 0.9+)\n    //\n    // * postMessage (many browsers)\n    //\n    // * setTimeout  (fallback)\n    //\n    // The postMessage implementation is based on\n    // https://github.com/NobleJS/setImmediate/tree/1.0.1\n    //\n    // Don't use `nextTick` for Node since it runs its callbacks before\n    // I/O, which is stricter than we're looking for.\n    //\n    // Not installed as a polyfill, as our public API is `Meteor.defer`.\n    // Since we're not trying to be a polyfill, we have some\n    // simplifications:\n    //\n    // If one invocation of a setImmediate callback pauses itself by a\n    // call to alert/prompt/showModelDialog, the NobleJS polyfill\n    // implementation ensured that no setImmedate callback would run until\n    // the first invocation completed.  While correct per the spec, what it\n    // would mean for us in practice is that any reactive updates relying\n    // on Meteor.defer would be hung in the main window until the modal\n    // dialog was dismissed.  Thus we only ensure that a setImmediate\n    // function is called in a later event loop.\n    //\n    // We don't need to support using a string to be eval'ed for the\n    // callback, arguments to the function, or clearImmediate.\n\n    \"use strict\";\n\n    var global = this;\n\n    // IE 10, Node >= 9.1\n\n    function useSetImmediate() {\n      if (!global.setImmediate) return null;else {\n        var setImmediate = function setImmediate(fn) {\n          global.setImmediate(fn);\n        };\n        setImmediate.implementation = 'setImmediate';\n        return setImmediate;\n      }\n    }\n\n    // Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari\n\n    function usePostMessage() {\n      // The test against `importScripts` prevents this implementation\n      // from being installed inside a web worker, where\n      // `global.postMessage` means something completely different and\n      // can't be used for this purpose.\n\n      if (!global.postMessage || global.importScripts) {\n        return null;\n      }\n\n      // Avoid synchronous post message implementations.\n\n      var postMessageIsAsynchronous = true;\n      var oldOnMessage = global.onmessage;\n      global.onmessage = function () {\n        postMessageIsAsynchronous = false;\n      };\n      global.postMessage(\"\", \"*\");\n      global.onmessage = oldOnMessage;\n\n      if (!postMessageIsAsynchronous) return null;\n\n      var funcIndex = 0;\n      var funcs = {};\n\n      // Installs an event handler on `global` for the `message` event: see\n      // * https://developer.mozilla.org/en/DOM/window.postMessage\n      // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n      // XXX use Random.id() here?\n      var MESSAGE_PREFIX = \"Meteor._setImmediate.\" + Math.random() + '.';\n\n      function isStringAndStartsWith(string, putativeStart) {\n        return typeof string === \"string\" && string.substring(0, putativeStart.length) === putativeStart;\n      }\n\n      function onGlobalMessage(event) {\n        // This will catch all incoming messages (even from other\n        // windows!), so we need to try reasonably hard to avoid letting\n        // anyone else trick us into firing off. We test the origin is\n        // still this window, and that a (randomly generated)\n        // unpredictable identifying prefix is present.\n        if (event.source === global && isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {\n          var index = event.data.substring(MESSAGE_PREFIX.length);\n          try {\n            if (funcs[index]) funcs[index]();\n          } finally {\n            delete funcs[index];\n          }\n        }\n      }\n\n      if (global.addEventListener) {\n        global.addEventListener(\"message\", onGlobalMessage, false);\n      } else {\n        global.attachEvent(\"onmessage\", onGlobalMessage);\n      }\n\n      var setImmediate = function setImmediate(fn) {\n        // Make `global` post a message to itself with the handle and\n        // identifying prefix, thus asynchronously invoking our\n        // onGlobalMessage listener above.\n        ++funcIndex;\n        funcs[funcIndex] = fn;\n        global.postMessage(MESSAGE_PREFIX + funcIndex, \"*\");\n      };\n      setImmediate.implementation = 'postMessage';\n      return setImmediate;\n    }\n\n    function useTimeout() {\n      var setImmediate = function setImmediate(fn) {\n        global.setTimeout(fn, 0);\n      };\n      setImmediate.implementation = 'setTimeout';\n      return setImmediate;\n    }\n\n    Meteor._setImmediate = useSetImmediate() || usePostMessage() || useTimeout();\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/timers.js                                                                                       //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    var withoutInvocation = function withoutInvocation(f) {\n      if (Package.ddp) {\n        var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation;\n        if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation) throw new Error(\"Can't set timers inside simulations\");\n        return function () {\n          _CurrentInvocation.withValue(null, f);\n        };\n      } else return f;\n    };\n\n    var bindAndCatch = function bindAndCatch(context, f) {\n      return Meteor.bindEnvironment(withoutInvocation(f), context);\n    };\n\n    _.extend(Meteor, {\n      // Meteor.setTimeout and Meteor.setInterval callbacks scheduled\n      // inside a server method are not part of the method invocation and\n      // should clear out the CurrentInvocation environment variable.\n\n      /**\n       * @memberOf Meteor\n       * @summary Call a function in the future after waiting for a specified delay.\n       * @locus Anywhere\n       * @param {Function} func The function to run\n       * @param {Number} delay Number of milliseconds to wait before calling function\n       */\n      setTimeout: function (_setTimeout) {\n        function setTimeout(_x, _x2) {\n          return _setTimeout.apply(this, arguments);\n        }\n\n        setTimeout.toString = function () {\n          return _setTimeout.toString();\n        };\n\n        return setTimeout;\n      }(function (f, duration) {\n        return setTimeout(bindAndCatch(\"setTimeout callback\", f), duration);\n      }),\n\n      /**\n       * @memberOf Meteor\n       * @summary Call a function repeatedly, with a time delay between calls.\n       * @locus Anywhere\n       * @param {Function} func The function to run\n       * @param {Number} delay Number of milliseconds to wait between each function call.\n       */\n      setInterval: function (_setInterval) {\n        function setInterval(_x3, _x4) {\n          return _setInterval.apply(this, arguments);\n        }\n\n        setInterval.toString = function () {\n          return _setInterval.toString();\n        };\n\n        return setInterval;\n      }(function (f, duration) {\n        return setInterval(bindAndCatch(\"setInterval callback\", f), duration);\n      }),\n\n      /**\n       * @memberOf Meteor\n       * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.\n       * @locus Anywhere\n       * @param {Number} id The handle returned by `Meteor.setInterval`\n       */\n      clearInterval: function (_clearInterval) {\n        function clearInterval(_x5) {\n          return _clearInterval.apply(this, arguments);\n        }\n\n        clearInterval.toString = function () {\n          return _clearInterval.toString();\n        };\n\n        return clearInterval;\n      }(function (x) {\n        return clearInterval(x);\n      }),\n\n      /**\n       * @memberOf Meteor\n       * @summary Cancel a function call scheduled by `Meteor.setTimeout`.\n       * @locus Anywhere\n       * @param {Number} id The handle returned by `Meteor.setTimeout`\n       */\n      clearTimeout: function (_clearTimeout) {\n        function clearTimeout(_x6) {\n          return _clearTimeout.apply(this, arguments);\n        }\n\n        clearTimeout.toString = function () {\n          return _clearTimeout.toString();\n        };\n\n        return clearTimeout;\n      }(function (x) {\n        return clearTimeout(x);\n      }),\n\n      // XXX consider making this guarantee ordering of defer'd callbacks, like\n      // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:\n      //    callSomethingThatDefersSomeWork();\n      //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));\n\n      /**\n       * @memberOf Meteor\n       * @summary Defer execution of a function to run asynchronously in the background (similar to `Meteor.setTimeout(func, 0)`.\n       * @locus Anywhere\n       * @param {Function} func The function to run\n       */\n      defer: function defer(f) {\n        Meteor._setImmediate(bindAndCatch(\"defer callback\", f));\n      }\n    });\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/errors.js                                                                                       //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Makes an error subclass which properly contains a stack trace in most\n    // environments. constructor can set fields on `this` (and should probably set\n    // `message`, which is what gets displayed at the top of a stack trace).\n    //\n    Meteor.makeErrorType = function (name, constructor) {\n      var errorClass = function errorClass() /*arguments*/{\n        // Ensure we get a proper stack trace in most Javascript environments\n        if (Error.captureStackTrace) {\n          // V8 environments (Chrome and Node.js)\n          Error.captureStackTrace(this, errorClass);\n        } else {\n          // Borrow the .stack property of a native Error object.\n          this.stack = new Error().stack;\n        }\n        // Safari magically works.\n\n        constructor.apply(this, arguments);\n\n        this.errorType = name;\n      };\n\n      Meteor._inherits(errorClass, Error);\n\n      return errorClass;\n    };\n\n    // This should probably be in the livedata package, but we don't want\n    // to require you to use the livedata package to get it. Eventually we\n    // should probably rename it to DDP.Error and put it back in the\n    // 'livedata' package (which we should rename to 'ddp' also.)\n    //\n    // Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object\n    // containing 'error' and optionally 'reason' and 'details'.\n    // The DDP client manually puts these into Meteor.Error objects. (We don't use\n    // EJSON.addType here because the type is determined by location in the\n    // protocol, not text on the wire.)\n\n    /**\n     * @summary This class represents a symbolic error thrown by a method.\n     * @locus Anywhere\n     * @class\n     * @param {String} error A string code uniquely identifying this kind of error.\n     * This string should be used by callers of the method to determine the\n     * appropriate action to take, instead of attempting to parse the reason\n     * or details fields. For example:\n     *\n     * ```\n     * // on the server, pick a code unique to this error\n     * // the reason field should be a useful debug message\n     * throw new Meteor.Error(\"logged-out\", \n     *   \"The user must be logged in to post a comment.\");\n     *\n     * // on the client\n     * Meteor.call(\"methodName\", function (error) {\n     *   // identify the error\n     *   if (error && error.error === \"logged-out\") {\n     *     // show a nice error message\n     *     Session.set(\"errorMessage\", \"Please log in to post a comment.\");\n     *   }\n     * });\n     * ```\n     * \n     * For legacy reasons, some built-in Meteor functions such as `check` throw\n     * errors with a number in this field.\n     * \n     * @param {String} [reason] Optional.  A short human-readable summary of the\n     * error, like 'Not Found'.\n     * @param {String} [details] Optional.  Additional information about the error,\n     * like a textual stack trace.\n     */\n    Meteor.Error = Meteor.makeErrorType(\"Meteor.Error\", function (error, reason, details) {\n      var self = this;\n\n      // String code uniquely identifying this kind of error.\n      self.error = error;\n\n      // Optional: A short human-readable summary of the error. Not\n      // intended to be shown to end users, just developers. (\"Not Found\",\n      // \"Internal Server Error\")\n      self.reason = reason;\n\n      // Optional: Additional information about the error, say for\n      // debugging. It might be a (textual) stack trace if the server is\n      // willing to provide one. The corresponding thing in HTTP would be\n      // the body of a 404 or 500 response. (The difference is that we\n      // never expect this to be shown to end users, only developers, so\n      // it doesn't need to be pretty.)\n      self.details = details;\n\n      // This is what gets displayed at the top of a stack trace. Current\n      // format is \"[404]\" (if no reason is set) or \"File not found [404]\"\n      if (self.reason) self.message = self.reason + ' [' + self.error + ']';else self.message = '[' + self.error + ']';\n    });\n\n    // Meteor.Error is basically data and is sent over DDP, so you should be able to\n    // properly EJSON-clone it. This is especially important because if a\n    // Meteor.Error is thrown through a Future, the error, reason, and details\n    // properties become non-enumerable so a standard Object clone won't preserve\n    // them and they will be lost from DDP.\n    Meteor.Error.prototype.clone = function () {\n      var self = this;\n      return new Meteor.Error(self.error, self.reason, self.details);\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/fiber_helpers.js                                                                                //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    var path = Npm.require('path');\n    var Fiber = Npm.require('fibers');\n    var Future = Npm.require(path.join('fibers', 'future'));\n\n    Meteor._noYieldsAllowed = function (f) {\n      var savedYield = Fiber[\"yield\"];\n      Fiber[\"yield\"] = function () {\n        throw new Error(\"Can't call yield in a noYieldsAllowed block!\");\n      };\n      try {\n        return f();\n      } finally {\n        Fiber[\"yield\"] = savedYield;\n      }\n    };\n\n    Meteor._DoubleEndedQueue = Npm.require('meteor-deque');\n\n    // Meteor._SynchronousQueue is a queue which runs task functions serially.\n    // Tasks are assumed to be synchronous: ie, it's assumed that they are\n    // done when they return.\n    //\n    // It has two methods:\n    //   - queueTask queues a task to be run, and returns immediately.\n    //   - runTask queues a task to be run, and then yields. It returns\n    //     when the task finishes running.\n    //\n    // It's safe to call queueTask from within a task, but not runTask (unless\n    // you're calling runTask from a nested Fiber).\n    //\n    // Somewhat inspired by async.queue, but specific to blocking tasks.\n    // XXX break this out into an NPM module?\n    // XXX could maybe use the npm 'schlock' module instead, which would\n    //     also support multiple concurrent \"read\" tasks\n    //\n    Meteor._SynchronousQueue = function () {\n      var self = this;\n      // List of tasks to run (not including a currently-running task if any). Each\n      // is an object with field 'task' (the task function to run) and 'future' (the\n      // Future associated with the blocking runTask call that queued it, or null if\n      // called from queueTask).\n      self._taskHandles = new Meteor._DoubleEndedQueue();\n      // This is true if self._run() is either currently executing or scheduled to\n      // do so soon.\n      self._runningOrRunScheduled = false;\n      // During the execution of a task, this is set to the fiber used to execute\n      // that task. We use this to throw an error rather than deadlocking if the\n      // user calls runTask from within a task on the same fiber.\n      self._currentTaskFiber = undefined;\n      // This is true if we're currently draining.  While we're draining, a further\n      // drain is a noop, to prevent infinite loops.  \"drain\" is a heuristic type\n      // operation, that has a meaning like unto \"what a naive person would expect\n      // when modifying a table from an observe\"\n      self._draining = false;\n    };\n\n    _.extend(Meteor._SynchronousQueue.prototype, {\n      runTask: function runTask(task) {\n        var self = this;\n\n        if (!self.safeToRunTask()) {\n          if (Fiber.current) throw new Error(\"Can't runTask from another task in the same fiber\");else throw new Error(\"Can only call runTask in a Fiber\");\n        }\n\n        var fut = new Future();\n        var handle = {\n          task: Meteor.bindEnvironment(task, function (e) {\n            Meteor._debug(\"Exception from task:\", e && e.stack || e);\n            throw e;\n          }),\n          future: fut,\n          name: task.name\n        };\n        self._taskHandles.push(handle);\n        self._scheduleRun();\n        // Yield. We'll get back here after the task is run (and will throw if the\n        // task throws).\n        fut.wait();\n      },\n      queueTask: function queueTask(task) {\n        var self = this;\n        self._taskHandles.push({\n          task: task,\n          name: task.name\n        });\n        self._scheduleRun();\n        // No need to block.\n      },\n\n      flush: function flush() {\n        var self = this;\n        self.runTask(function () {});\n      },\n\n      safeToRunTask: function safeToRunTask() {\n        var self = this;\n        return Fiber.current && self._currentTaskFiber !== Fiber.current;\n      },\n\n      drain: function drain() {\n        var self = this;\n        if (self._draining) return;\n        if (!self.safeToRunTask()) return;\n        self._draining = true;\n        while (!self._taskHandles.isEmpty()) {\n          self.flush();\n        }\n        self._draining = false;\n      },\n\n      _scheduleRun: function _scheduleRun() {\n        var self = this;\n        // Already running or scheduled? Do nothing.\n        if (self._runningOrRunScheduled) return;\n\n        self._runningOrRunScheduled = true;\n        setImmediate(function () {\n          Fiber(function () {\n            self._run();\n          }).run();\n        });\n      },\n      _run: function _run() {\n        var self = this;\n\n        if (!self._runningOrRunScheduled) throw new Error(\"expected to be _runningOrRunScheduled\");\n\n        if (self._taskHandles.isEmpty()) {\n          // Done running tasks! Don't immediately schedule another run, but\n          // allow future tasks to do so.\n          self._runningOrRunScheduled = false;\n          return;\n        }\n        var taskHandle = self._taskHandles.shift();\n\n        // Run the task.\n        self._currentTaskFiber = Fiber.current;\n        var exception = undefined;\n        try {\n          taskHandle.task();\n        } catch (err) {\n          if (taskHandle.future) {\n            // We'll throw this exception through runTask.\n            exception = err;\n          } else {\n            Meteor._debug(\"Exception in queued task: \" + (err.stack || err));\n          }\n        }\n        self._currentTaskFiber = undefined;\n\n        // Soon, run the next task, if there is any.\n        self._runningOrRunScheduled = false;\n        self._scheduleRun();\n\n        // If this was queued with runTask, let the runTask call return (throwing if\n        // the task threw).\n        if (taskHandle.future) {\n          if (exception) taskHandle.future['throw'](exception);else taskHandle.future['return']();\n        }\n      }\n    });\n\n    // Sleep. Mostly used for debugging (eg, inserting latency into server\n    // methods).\n    //\n    Meteor._sleepForMs = function (ms) {\n      var fiber = Fiber.current;\n      setTimeout(function () {\n        fiber.run();\n      }, ms);\n      Fiber[\"yield\"]();\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/startup_server.js                                                                               //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    Meteor.startup = function (callback) {\n      if (__meteor_bootstrap__.startupHooks) {\n        __meteor_bootstrap__.startupHooks.push(callback);\n      } else {\n        // We already started up. Just call it now.\n        callback();\n      }\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/debug.js                                                                                        //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    var suppress = 0;\n\n    // replacement for console.log. This is a temporary API. We should\n    // provide a real logging API soon (possibly just a polyfill for\n    // console?)\n    //\n    // NOTE: this is used on the server to print the warning about\n    // having autopublish enabled when you probably meant to turn it\n    // off. it's not really the proper use of something called\n    // _debug. the intent is for this message to go to the terminal and\n    // be very visible. if you change _debug to go someplace else, etc,\n    // please fix the autopublish code to do something reasonable.\n    //\n    Meteor._debug = function () /* arguments */{\n      if (suppress) {\n        suppress--;\n        return;\n      }\n      if (typeof console !== 'undefined' && typeof console.log !== 'undefined') {\n        if (arguments.length == 0) {\n          // IE Companion breaks otherwise\n          // IE10 PP4 requires at least one argument\n          console.log('');\n        } else {\n          // IE doesn't have console.log.apply, it's not a real Object.\n          // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9\n          // http://patik.com/blog/complete-cross-browser-console-log/\n          if (typeof console.log.apply === \"function\") {\n            // Most browsers\n\n            // Chrome and Safari only hyperlink URLs to source files in first argument of\n            // console.log, so try to call it with one argument if possible.\n            // Approach taken here: If all arguments are strings, join them on space.\n            // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991\n            var allArgumentsOfTypeString = true;\n            for (var i = 0; i < arguments.length; i++) {\n              if (typeof arguments[i] !== \"string\") allArgumentsOfTypeString = false;\n            }if (allArgumentsOfTypeString) console.log.apply(console, [Array.prototype.join.call(arguments, \" \")]);else console.log.apply(console, arguments);\n          } else if (typeof Function.prototype.bind === \"function\") {\n            // IE9\n            var log = Function.prototype.bind.call(console.log, console);\n            log.apply(console, arguments);\n          } else {\n            // IE8\n            Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));\n          }\n        }\n      }\n    };\n\n    // Suppress the next 'count' Meteor._debug messsages. Use this to\n    // stop tests from spamming the console.\n    //\n    Meteor._suppress_log = function (count) {\n      suppress += count;\n    };\n\n    Meteor._suppressed_log_expected = function () {\n      return suppress !== 0;\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/string_utils.js                                                                                 //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Like Perl's quotemeta: quotes all regexp metacharacters.\n    // Code taken from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n    Meteor._escapeRegExp = function (string) {\n      return String(string).replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/test_environment.js                                                                             //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    var TEST_METADATA_STR;\n    if (Meteor.isClient) {\n      TEST_METADATA_STR = meteorEnv.TEST_METADATA;\n    } else {\n      TEST_METADATA_STR = process.env.TEST_METADATA;\n    }\n\n    var TEST_METADATA = JSON.parse(TEST_METADATA_STR || \"{}\");\n    var testDriverPackageName = TEST_METADATA.driverPackage;\n\n    // Note that if we are in test-packages mode neither of these will be set,\n    // but we will have a test driver package\n    Meteor.isTest = !!TEST_METADATA.isTest;\n    Meteor.isAppTest = !!TEST_METADATA.isAppTest;\n    Meteor.isPackageTest = !!testDriverPackageName && !Meteor.isTest && !Meteor.isAppTest;\n\n    if (typeof testDriverPackageName === \"string\") {\n      Meteor.startup(function () {\n        var testDriverPackage = Package[testDriverPackageName];\n        if (!testDriverPackage) {\n          throw new Error(\"Can't find test driver package: \" + testDriverPackageName);\n        }\n\n        // On the client, the test driver *must* define `runTests`\n        if (Meteor.isClient) {\n          if (typeof testDriverPackage.runTests !== \"function\") {\n            throw new Error(\"Test driver package \" + testDriverPackageName + \" missing `runTests` export\");\n          }\n          testDriverPackage.runTests();\n        } else {\n          // The server can optionally define `start`\n          if (typeof testDriverPackage.start === \"function\") {\n            testDriverPackage.start();\n          }\n        }\n      });\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/dynamics_nodejs.js                                                                              //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Fiber-aware implementation of dynamic scoping, for use on the server\n\n    var Fiber = Npm.require('fibers');\n\n    var nextSlot = 0;\n\n    Meteor._nodeCodeMustBeInFiber = function () {\n      if (!Fiber.current) {\n        throw new Error(\"Meteor code must always run within a Fiber. \" + \"Try wrapping callbacks that you pass to non-Meteor \" + \"libraries with Meteor.bindEnvironment.\");\n      }\n    };\n\n    Meteor.EnvironmentVariable = function () {\n      this.slot = nextSlot++;\n    };\n\n    _.extend(Meteor.EnvironmentVariable.prototype, {\n      get: function get() {\n        Meteor._nodeCodeMustBeInFiber();\n\n        return Fiber.current._meteor_dynamics && Fiber.current._meteor_dynamics[this.slot];\n      },\n\n      // Most Meteor code ought to run inside a fiber, and the\n      // _nodeCodeMustBeInFiber assertion helps you remember to include appropriate\n      // bindEnvironment calls (which will get you the *right value* for your\n      // environment variables, on the server).\n      //\n      // In some very special cases, it's more important to run Meteor code on the\n      // server in non-Fiber contexts rather than to strongly enforce the safeguard\n      // against forgetting to use bindEnvironment. For example, using `check` in\n      // some top-level constructs like connect handlers without needing unnecessary\n      // Fibers on every request is more important that possibly failing to find the\n      // correct argumentChecker. So this function is just like get(), but it\n      // returns null rather than throwing when called from outside a Fiber. (On the\n      // client, it is identical to get().)\n      getOrNullIfOutsideFiber: function getOrNullIfOutsideFiber() {\n        if (!Fiber.current) return null;\n        return this.get();\n      },\n\n      withValue: function withValue(value, func) {\n        Meteor._nodeCodeMustBeInFiber();\n\n        if (!Fiber.current._meteor_dynamics) Fiber.current._meteor_dynamics = [];\n        var currentValues = Fiber.current._meteor_dynamics;\n\n        var saved = currentValues[this.slot];\n        try {\n          currentValues[this.slot] = value;\n          var ret = func();\n        } finally {\n          currentValues[this.slot] = saved;\n        }\n\n        return ret;\n      }\n    });\n\n    // Meteor application code is always supposed to be run inside a\n    // fiber. bindEnvironment ensures that the function it wraps is run from\n    // inside a fiber and ensures it sees the values of Meteor environment\n    // variables that are set at the time bindEnvironment is called.\n    //\n    // If an environment-bound function is called from outside a fiber (eg, from\n    // an asynchronous callback from a non-Meteor library such as MongoDB), it'll\n    // kick off a new fiber to execute the function, and returns undefined as soon\n    // as that fiber returns or yields (and func's return value is ignored).\n    //\n    // If it's called inside a fiber, it works normally (the\n    // return value of the function will be passed through, and no new\n    // fiber will be created.)\n    //\n    // `onException` should be a function or a string.  When it is a\n    // function, it is called as a callback when the bound function raises\n    // an exception.  If it is a string, it should be a description of the\n    // callback, and when an exception is raised a debug message will be\n    // printed with the description.\n    Meteor.bindEnvironment = function (func, onException, _this) {\n      Meteor._nodeCodeMustBeInFiber();\n\n      var boundValues = _.clone(Fiber.current._meteor_dynamics || []);\n\n      if (!onException || typeof onException === 'string') {\n        var description = onException || \"callback of async function\";\n        onException = function onException(error) {\n          Meteor._debug(\"Exception in \" + description + \":\", error && error.stack || error);\n        };\n      } else if (typeof onException !== 'function') {\n        throw new Error('onException argument must be a function, string or undefined for Meteor.bindEnvironment().');\n      }\n\n      return function () /* arguments */{\n        var args = _.toArray(arguments);\n\n        var runWithEnvironment = function runWithEnvironment() {\n          var savedValues = Fiber.current._meteor_dynamics;\n          try {\n            // Need to clone boundValues in case two fibers invoke this\n            // function at the same time\n            Fiber.current._meteor_dynamics = _.clone(boundValues);\n            var ret = func.apply(_this, args);\n          } catch (e) {\n            // note: callback-hook currently relies on the fact that if onException\n            // throws and you were originally calling the wrapped callback from\n            // within a Fiber, the wrapped call throws.\n            onException(e);\n          } finally {\n            Fiber.current._meteor_dynamics = savedValues;\n          }\n          return ret;\n        };\n\n        if (Fiber.current) return runWithEnvironment();\n        Fiber(runWithEnvironment).run();\n      };\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/url_server.js                                                                                   //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    if (process.env.ROOT_URL && (typeof __meteor_runtime_config__ === \"undefined\" ? \"undefined\" : _typeof(__meteor_runtime_config__)) === \"object\") {\n      __meteor_runtime_config__.ROOT_URL = process.env.ROOT_URL;\n      if (__meteor_runtime_config__.ROOT_URL) {\n        var parsedUrl = Npm.require('url').parse(__meteor_runtime_config__.ROOT_URL);\n        // Sometimes users try to pass, eg, ROOT_URL=mydomain.com.\n        if (!parsedUrl.host) {\n          throw Error(\"$ROOT_URL, if specified, must be an URL\");\n        }\n        var pathPrefix = parsedUrl.pathname;\n        if (pathPrefix.slice(-1) === '/') {\n          // remove trailing slash (or turn \"/\" into \"\")\n          pathPrefix = pathPrefix.slice(0, -1);\n        }\n        __meteor_runtime_config__.ROOT_URL_PATH_PREFIX = pathPrefix;\n      } else {\n        __meteor_runtime_config__.ROOT_URL_PATH_PREFIX = \"\";\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/url_common.js                                                                                   //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    /**\n     * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using `meteor build`.\n     * @locus Anywhere\n     * @param {String} [path] A path to append to the root URL. Do not include a leading \"`/`\".\n     * @param {Object} [options]\n     * @param {Boolean} options.secure Create an HTTPS URL.\n     * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.\n     * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: \"`http://foo.example.com`\"\n     */\n    Meteor.absoluteUrl = function (path, options) {\n      // path is optional\n      if (!options && (typeof path === \"undefined\" ? \"undefined\" : _typeof(path)) === 'object') {\n        options = path;\n        path = undefined;\n      }\n      // merge options with defaults\n      options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});\n\n      var url = options.rootUrl;\n      if (!url) throw new Error(\"Must pass options.rootUrl or set ROOT_URL in the server environment\");\n\n      if (!/^http[s]?:\\/\\//i.test(url)) // url starts with 'http://' or 'https://'\n        url = 'http://' + url; // we will later fix to https if options.secure is set\n\n      if (!/\\/$/.test(url)) // url ends with '/'\n        url += '/';\n\n      if (path) url += path;\n\n      // turn http to https if secure option is set, and we're not talking\n      // to localhost.\n      if (options.secure && /^http:/.test(url) && // url starts with 'http:'\n      !/http:\\/\\/localhost[:\\/]/.test(url) && // doesn't match localhost\n      !/http:\\/\\/127\\.0\\.0\\.1[:\\/]/.test(url)) // or 127.0.0.1\n        url = url.replace(/^http:/, 'https:');\n\n      if (options.replaceLocalhost) url = url.replace(/^http:\\/\\/localhost([:\\/].*)/, 'http://127.0.0.1$1');\n\n      return url;\n    };\n\n    // allow later packages to override default options\n    Meteor.absoluteUrl.defaultOptions = {};\n    if ((typeof __meteor_runtime_config__ === \"undefined\" ? \"undefined\" : _typeof(__meteor_runtime_config__)) === \"object\" && __meteor_runtime_config__.ROOT_URL) Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;\n\n    Meteor._relativeToSiteRootUrl = function (link) {\n      if ((typeof __meteor_runtime_config__ === \"undefined\" ? \"undefined\" : _typeof(__meteor_runtime_config__)) === \"object\" && link.substr(0, 1) === \"/\") link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\") + link;\n      return link;\n    };\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                                 //\n    // packages/meteor/flush-buffers-on-exit-in-windows.js                                                             //\n    //                                                                                                                 //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    if (process.platform === \"win32\") {\n      /*\n       * Based on https://github.com/cowboy/node-exit\n       *\n       * Copyright (c) 2013 \"Cowboy\" Ben Alman\n       * Licensed under the MIT license.\n       */\n      var origProcessExit = process.exit.bind(process);\n      process.exit = function (exitCode) {\n        var streams = [process.stdout, process.stderr];\n        var drainCount = 0;\n        // Actually exit if all streams are drained.\n        function tryToExit() {\n          if (drainCount === streams.length) {\n            origProcessExit(exitCode);\n          }\n        }\n        streams.forEach(function (stream) {\n          // Count drained streams now, but monitor non-drained streams.\n          if (stream.bufferSize === 0) {\n            drainCount++;\n          } else {\n            stream.write('', 'utf-8', function () {\n              drainCount++;\n              tryToExit();\n            });\n          }\n          // Prevent further writing.\n          stream.write = function () {};\n        });\n        // If all streams were already drained, exit now.\n        tryToExit();\n        // In Windows, when run as a Node.js child process, a script utilizing\n        // this library might just exit with a 0 exit code, regardless. This code,\n        // despite the fact that it looks a bit crazy, appears to fix that.\n        process.on('exit', function () {\n          origProcessExit(exitCode);\n        });\n      };\n    }\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  (function (pkg, symbols) {\n    for (var s in symbols) {\n      s in pkg || (pkg[s] = symbols[s]);\n    }\n  })(Package.meteor = {}, {\n    Meteor: Meteor,\n    global: global,\n    meteorEnv: meteorEnv\n  });\n})();\n\n//# sourceMappingURL=meteor.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/meteor.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/meteor.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar global, meteorEnv, Meteor;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/global.js                                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nglobal = this;\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/server_environment.js                                                                           //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nmeteorEnv = {\n  NODE_ENV: process.env.NODE_ENV || \"production\",\n  TEST_METADATA: process.env.TEST_METADATA || \"{}\"\n};\n\nif (typeof __meteor_runtime_config__ === \"object\") {\n  __meteor_runtime_config__.meteorEnv = meteorEnv;\n}\n\nMeteor = {\n  isProduction: meteorEnv.NODE_ENV === \"production\",\n  isDevelopment: meteorEnv.NODE_ENV !== \"production\",\n  isClient: false,\n  isServer: true,\n  isCordova: false\n};\n\nMeteor.settings = {};\n\nif (process.env.METEOR_SETTINGS) {\n  try {\n    Meteor.settings = JSON.parse(process.env.METEOR_SETTINGS);\n  } catch (e) {\n    throw new Error(\"METEOR_SETTINGS are not valid JSON: \" + process.env.METEOR_SETTINGS);\n  }\n}\n\n// Make sure that there is always a public attribute\n// to enable Meteor.settings.public on client\nif (! Meteor.settings.public) {\n    Meteor.settings.public = {};\n}\n\n// Push a subset of settings to the client.  Note that the way this\n// code is written, if the app mutates `Meteor.settings.public` on the\n// server, it also mutates\n// `__meteor_runtime_config__.PUBLIC_SETTINGS`, and the modified\n// settings will be sent to the client.\nif (typeof __meteor_runtime_config__ === \"object\") {\n  __meteor_runtime_config__.PUBLIC_SETTINGS = Meteor.settings.public;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/helpers.js                                                                                      //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nif (Meteor.isServer)\n  var Future = Npm.require('fibers/future');\n\nif (typeof __meteor_runtime_config__ === 'object' &&\n    __meteor_runtime_config__.meteorRelease) {\n  /**\n   * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `\"1.2.3\"`). It is `undefined` if the project was built using a git checkout of Meteor.\n   * @locus Anywhere\n   * @type {String}\n   */\n  Meteor.release = __meteor_runtime_config__.meteorRelease;\n}\n\n// XXX find a better home for these? Ideally they would be _.get,\n// _.ensure, _.delete..\n\n_.extend(Meteor, {\n  // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or\n  // a[b][c] doesn't exist.\n  //\n  _get: function (obj /*, arguments */) {\n    for (var i = 1; i < arguments.length; i++) {\n      if (!(arguments[i] in obj))\n        return undefined;\n      obj = obj[arguments[i]];\n    }\n    return obj;\n  },\n\n  // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,\n  // it is created and set to {}. Either way, it is returned.\n  //\n  _ensure: function (obj /*, arguments */) {\n    for (var i = 1; i < arguments.length; i++) {\n      var key = arguments[i];\n      if (!(key in obj))\n        obj[key] = {};\n      obj = obj[key];\n    }\n\n    return obj;\n  },\n\n  // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it\n  // isn't empty, then a[b] unless it isn't empty.\n  //\n  _delete: function (obj /*, arguments */) {\n    var stack = [obj];\n    var leaf = true;\n    for (var i = 1; i < arguments.length - 1; i++) {\n      var key = arguments[i];\n      if (!(key in obj)) {\n        leaf = false;\n        break;\n      }\n      obj = obj[key];\n      if (typeof obj !== \"object\")\n        break;\n      stack.push(obj);\n    }\n\n    for (var i = stack.length - 1; i >= 0; i--) {\n      var key = arguments[i+1];\n\n      if (leaf)\n        leaf = false;\n      else\n        for (var other in stack[i][key])\n          return; // not empty -- we're done\n\n      delete stack[i][key];\n    }\n  },\n\n  // wrapAsync can wrap any function that takes some number of arguments that\n  // can't be undefined, followed by some optional arguments, where the callback\n  // is the last optional argument.\n  // e.g. fs.readFile(pathname, [callback]),\n  // fs.open(pathname, flags, [mode], [callback])\n  // For maximum effectiveness and least confusion, wrapAsync should be used on\n  // functions where the callback is the only argument of type Function.\n\n  /**\n   * @memberOf Meteor\n   * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.\n   * @locus Anywhere\n   * @param {Function} func A function that takes a callback as its final parameter\n   * @param {Object} [context] Optional `this` object against which the original function will be invoked\n   */\n  wrapAsync: function (fn, context) {\n    return function (/* arguments */) {\n      var self = context || this;\n      var newArgs = _.toArray(arguments);\n      var callback;\n\n      for (var i = newArgs.length - 1; i >= 0; --i) {\n        var arg = newArgs[i];\n        var type = typeof arg;\n        if (type !== \"undefined\") {\n          if (type === \"function\") {\n            callback = arg;\n          }\n          break;\n        }\n      }\n\n      if (! callback) {\n        if (Meteor.isClient) {\n          callback = logErr;\n        } else {\n          var fut = new Future();\n          callback = fut.resolver();\n        }\n        ++i; // Insert the callback just after arg.\n      }\n\n      newArgs[i] = Meteor.bindEnvironment(callback);\n      var result = fn.apply(self, newArgs);\n      return fut ? fut.wait() : result;\n    };\n  },\n\n  // Sets child's prototype to a new object whose prototype is parent's\n  // prototype. Used as:\n  //   Meteor._inherits(ClassB, ClassA).\n  //   _.extend(ClassB.prototype, { ... })\n  // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.\n  _inherits: function (Child, Parent) {\n    // copy Parent static properties\n    for (var key in Parent) {\n      // make sure we only copy hasOwnProperty properties vs. prototype\n      // properties\n      if (_.has(Parent, key))\n        Child[key] = Parent[key];\n    }\n\n    // a middle member of prototype chain: takes the prototype from the Parent\n    var Middle = function () {\n      this.constructor = Child;\n    };\n    Middle.prototype = Parent.prototype;\n    Child.prototype = new Middle();\n    Child.__super__ = Parent.prototype;\n    return Child;\n  }\n});\n\nvar warnedAboutWrapAsync = false;\n\n/**\n * @deprecated in 0.9.3\n */\nMeteor._wrapAsync = function(fn, context) {\n  if (! warnedAboutWrapAsync) {\n    Meteor._debug(\"Meteor._wrapAsync has been renamed to Meteor.wrapAsync\");\n    warnedAboutWrapAsync = true;\n  }\n  return Meteor.wrapAsync.apply(Meteor, arguments);\n};\n\nfunction logErr(err) {\n  if (err) {\n    return Meteor._debug(\n      \"Exception in callback of async function\",\n      err.stack ? err.stack : err\n    );\n  }\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/setimmediate.js                                                                                 //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Chooses one of three setImmediate implementations:\n//\n// * Native setImmediate (IE 10, Node 0.9+)\n//\n// * postMessage (many browsers)\n//\n// * setTimeout  (fallback)\n//\n// The postMessage implementation is based on\n// https://github.com/NobleJS/setImmediate/tree/1.0.1\n//\n// Don't use `nextTick` for Node since it runs its callbacks before\n// I/O, which is stricter than we're looking for.\n//\n// Not installed as a polyfill, as our public API is `Meteor.defer`.\n// Since we're not trying to be a polyfill, we have some\n// simplifications:\n//\n// If one invocation of a setImmediate callback pauses itself by a\n// call to alert/prompt/showModelDialog, the NobleJS polyfill\n// implementation ensured that no setImmedate callback would run until\n// the first invocation completed.  While correct per the spec, what it\n// would mean for us in practice is that any reactive updates relying\n// on Meteor.defer would be hung in the main window until the modal\n// dialog was dismissed.  Thus we only ensure that a setImmediate\n// function is called in a later event loop.\n//\n// We don't need to support using a string to be eval'ed for the\n// callback, arguments to the function, or clearImmediate.\n\n\"use strict\";\n\nvar global = this;\n\n\n// IE 10, Node >= 9.1\n\nfunction useSetImmediate() {\n  if (! global.setImmediate)\n    return null;\n  else {\n    var setImmediate = function (fn) {\n      global.setImmediate(fn);\n    };\n    setImmediate.implementation = 'setImmediate';\n    return setImmediate;\n  }\n}\n\n\n// Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari\n\nfunction usePostMessage() {\n  // The test against `importScripts` prevents this implementation\n  // from being installed inside a web worker, where\n  // `global.postMessage` means something completely different and\n  // can't be used for this purpose.\n\n  if (!global.postMessage || global.importScripts) {\n    return null;\n  }\n\n  // Avoid synchronous post message implementations.\n\n  var postMessageIsAsynchronous = true;\n  var oldOnMessage = global.onmessage;\n  global.onmessage = function () {\n      postMessageIsAsynchronous = false;\n  };\n  global.postMessage(\"\", \"*\");\n  global.onmessage = oldOnMessage;\n\n  if (! postMessageIsAsynchronous)\n    return null;\n\n  var funcIndex = 0;\n  var funcs = {};\n\n  // Installs an event handler on `global` for the `message` event: see\n  // * https://developer.mozilla.org/en/DOM/window.postMessage\n  // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n  // XXX use Random.id() here?\n  var MESSAGE_PREFIX = \"Meteor._setImmediate.\" + Math.random() + '.';\n\n  function isStringAndStartsWith(string, putativeStart) {\n    return (typeof string === \"string\" &&\n            string.substring(0, putativeStart.length) === putativeStart);\n  }\n\n  function onGlobalMessage(event) {\n    // This will catch all incoming messages (even from other\n    // windows!), so we need to try reasonably hard to avoid letting\n    // anyone else trick us into firing off. We test the origin is\n    // still this window, and that a (randomly generated)\n    // unpredictable identifying prefix is present.\n    if (event.source === global &&\n        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {\n      var index = event.data.substring(MESSAGE_PREFIX.length);\n      try {\n        if (funcs[index])\n          funcs[index]();\n      }\n      finally {\n        delete funcs[index];\n      }\n    }\n  }\n\n  if (global.addEventListener) {\n    global.addEventListener(\"message\", onGlobalMessage, false);\n  } else {\n    global.attachEvent(\"onmessage\", onGlobalMessage);\n  }\n\n  var setImmediate = function (fn) {\n    // Make `global` post a message to itself with the handle and\n    // identifying prefix, thus asynchronously invoking our\n    // onGlobalMessage listener above.\n    ++funcIndex;\n    funcs[funcIndex] = fn;\n    global.postMessage(MESSAGE_PREFIX + funcIndex, \"*\");\n  };\n  setImmediate.implementation = 'postMessage';\n  return setImmediate;\n}\n\n\nfunction useTimeout() {\n  var setImmediate = function (fn) {\n    global.setTimeout(fn, 0);\n  };\n  setImmediate.implementation = 'setTimeout';\n  return setImmediate;\n}\n\n\nMeteor._setImmediate =\n  useSetImmediate() ||\n  usePostMessage() ||\n  useTimeout();\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/timers.js                                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar withoutInvocation = function (f) {\n  if (Package.ddp) {\n    var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation;\n    if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)\n      throw new Error(\"Can't set timers inside simulations\");\n    return function () { _CurrentInvocation.withValue(null, f); };\n  }\n  else\n    return f;\n};\n\nvar bindAndCatch = function (context, f) {\n  return Meteor.bindEnvironment(withoutInvocation(f), context);\n};\n\n_.extend(Meteor, {\n  // Meteor.setTimeout and Meteor.setInterval callbacks scheduled\n  // inside a server method are not part of the method invocation and\n  // should clear out the CurrentInvocation environment variable.\n\n  /**\n   * @memberOf Meteor\n   * @summary Call a function in the future after waiting for a specified delay.\n   * @locus Anywhere\n   * @param {Function} func The function to run\n   * @param {Number} delay Number of milliseconds to wait before calling function\n   */\n  setTimeout: function (f, duration) {\n    return setTimeout(bindAndCatch(\"setTimeout callback\", f), duration);\n  },\n\n  /**\n   * @memberOf Meteor\n   * @summary Call a function repeatedly, with a time delay between calls.\n   * @locus Anywhere\n   * @param {Function} func The function to run\n   * @param {Number} delay Number of milliseconds to wait between each function call.\n   */\n  setInterval: function (f, duration) {\n    return setInterval(bindAndCatch(\"setInterval callback\", f), duration);\n  },\n\n  /**\n   * @memberOf Meteor\n   * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.\n   * @locus Anywhere\n   * @param {Number} id The handle returned by `Meteor.setInterval`\n   */\n  clearInterval: function(x) {\n    return clearInterval(x);\n  },\n\n  /**\n   * @memberOf Meteor\n   * @summary Cancel a function call scheduled by `Meteor.setTimeout`.\n   * @locus Anywhere\n   * @param {Number} id The handle returned by `Meteor.setTimeout`\n   */\n  clearTimeout: function(x) {\n    return clearTimeout(x);\n  },\n\n  // XXX consider making this guarantee ordering of defer'd callbacks, like\n  // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:\n  //    callSomethingThatDefersSomeWork();\n  //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));\n\n  /**\n   * @memberOf Meteor\n   * @summary Defer execution of a function to run asynchronously in the background (similar to `Meteor.setTimeout(func, 0)`.\n   * @locus Anywhere\n   * @param {Function} func The function to run\n   */\n  defer: function (f) {\n    Meteor._setImmediate(bindAndCatch(\"defer callback\", f));\n  }\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/errors.js                                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Makes an error subclass which properly contains a stack trace in most\n// environments. constructor can set fields on `this` (and should probably set\n// `message`, which is what gets displayed at the top of a stack trace).\n//\nMeteor.makeErrorType = function (name, constructor) {\n  var errorClass = function (/*arguments*/) {\n    // Ensure we get a proper stack trace in most Javascript environments\n    if (Error.captureStackTrace) {\n      // V8 environments (Chrome and Node.js)\n      Error.captureStackTrace(this, errorClass);\n    } else {\n      // Borrow the .stack property of a native Error object.\n      this.stack = new Error().stack;\n    }\n    // Safari magically works.\n\n    constructor.apply(this, arguments);\n\n    this.errorType = name;\n  };\n\n  Meteor._inherits(errorClass, Error);\n\n  return errorClass;\n};\n\n// This should probably be in the livedata package, but we don't want\n// to require you to use the livedata package to get it. Eventually we\n// should probably rename it to DDP.Error and put it back in the\n// 'livedata' package (which we should rename to 'ddp' also.)\n//\n// Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object\n// containing 'error' and optionally 'reason' and 'details'.\n// The DDP client manually puts these into Meteor.Error objects. (We don't use\n// EJSON.addType here because the type is determined by location in the\n// protocol, not text on the wire.)\n\n/**\n * @summary This class represents a symbolic error thrown by a method.\n * @locus Anywhere\n * @class\n * @param {String} error A string code uniquely identifying this kind of error.\n * This string should be used by callers of the method to determine the\n * appropriate action to take, instead of attempting to parse the reason\n * or details fields. For example:\n *\n * ```\n * // on the server, pick a code unique to this error\n * // the reason field should be a useful debug message\n * throw new Meteor.Error(\"logged-out\", \n *   \"The user must be logged in to post a comment.\");\n *\n * // on the client\n * Meteor.call(\"methodName\", function (error) {\n *   // identify the error\n *   if (error && error.error === \"logged-out\") {\n *     // show a nice error message\n *     Session.set(\"errorMessage\", \"Please log in to post a comment.\");\n *   }\n * });\n * ```\n * \n * For legacy reasons, some built-in Meteor functions such as `check` throw\n * errors with a number in this field.\n * \n * @param {String} [reason] Optional.  A short human-readable summary of the\n * error, like 'Not Found'.\n * @param {String} [details] Optional.  Additional information about the error,\n * like a textual stack trace.\n */\nMeteor.Error = Meteor.makeErrorType(\n  \"Meteor.Error\",\n  function (error, reason, details) {\n    var self = this;\n\n    // String code uniquely identifying this kind of error.\n    self.error = error;\n\n    // Optional: A short human-readable summary of the error. Not\n    // intended to be shown to end users, just developers. (\"Not Found\",\n    // \"Internal Server Error\")\n    self.reason = reason;\n\n    // Optional: Additional information about the error, say for\n    // debugging. It might be a (textual) stack trace if the server is\n    // willing to provide one. The corresponding thing in HTTP would be\n    // the body of a 404 or 500 response. (The difference is that we\n    // never expect this to be shown to end users, only developers, so\n    // it doesn't need to be pretty.)\n    self.details = details;\n\n    // This is what gets displayed at the top of a stack trace. Current\n    // format is \"[404]\" (if no reason is set) or \"File not found [404]\"\n    if (self.reason)\n      self.message = self.reason + ' [' + self.error + ']';\n    else\n      self.message = '[' + self.error + ']';\n  });\n\n// Meteor.Error is basically data and is sent over DDP, so you should be able to\n// properly EJSON-clone it. This is especially important because if a\n// Meteor.Error is thrown through a Future, the error, reason, and details\n// properties become non-enumerable so a standard Object clone won't preserve\n// them and they will be lost from DDP.\nMeteor.Error.prototype.clone = function () {\n  var self = this;\n  return new Meteor.Error(self.error, self.reason, self.details);\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/fiber_helpers.js                                                                                //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar path = Npm.require('path');\nvar Fiber = Npm.require('fibers');\nvar Future = Npm.require(path.join('fibers', 'future'));\n\nMeteor._noYieldsAllowed = function (f) {\n  var savedYield = Fiber.yield;\n  Fiber.yield = function () {\n    throw new Error(\"Can't call yield in a noYieldsAllowed block!\");\n  };\n  try {\n    return f();\n  } finally {\n    Fiber.yield = savedYield;\n  }\n};\n\nMeteor._DoubleEndedQueue = Npm.require('meteor-deque');\n\n// Meteor._SynchronousQueue is a queue which runs task functions serially.\n// Tasks are assumed to be synchronous: ie, it's assumed that they are\n// done when they return.\n//\n// It has two methods:\n//   - queueTask queues a task to be run, and returns immediately.\n//   - runTask queues a task to be run, and then yields. It returns\n//     when the task finishes running.\n//\n// It's safe to call queueTask from within a task, but not runTask (unless\n// you're calling runTask from a nested Fiber).\n//\n// Somewhat inspired by async.queue, but specific to blocking tasks.\n// XXX break this out into an NPM module?\n// XXX could maybe use the npm 'schlock' module instead, which would\n//     also support multiple concurrent \"read\" tasks\n//\nMeteor._SynchronousQueue = function () {\n  var self = this;\n  // List of tasks to run (not including a currently-running task if any). Each\n  // is an object with field 'task' (the task function to run) and 'future' (the\n  // Future associated with the blocking runTask call that queued it, or null if\n  // called from queueTask).\n  self._taskHandles = new Meteor._DoubleEndedQueue();\n  // This is true if self._run() is either currently executing or scheduled to\n  // do so soon.\n  self._runningOrRunScheduled = false;\n  // During the execution of a task, this is set to the fiber used to execute\n  // that task. We use this to throw an error rather than deadlocking if the\n  // user calls runTask from within a task on the same fiber.\n  self._currentTaskFiber = undefined;\n  // This is true if we're currently draining.  While we're draining, a further\n  // drain is a noop, to prevent infinite loops.  \"drain\" is a heuristic type\n  // operation, that has a meaning like unto \"what a naive person would expect\n  // when modifying a table from an observe\"\n  self._draining = false;\n};\n\n_.extend(Meteor._SynchronousQueue.prototype, {\n  runTask: function (task) {\n    var self = this;\n\n    if (!self.safeToRunTask()) {\n      if (Fiber.current)\n        throw new Error(\"Can't runTask from another task in the same fiber\");\n      else\n        throw new Error(\"Can only call runTask in a Fiber\");\n    }\n\n    var fut = new Future;\n    var handle = {\n      task: Meteor.bindEnvironment(task, function (e) {\n        Meteor._debug(\"Exception from task:\", e && e.stack || e);\n        throw e;\n      }),\n      future: fut,\n      name: task.name\n    };\n    self._taskHandles.push(handle);\n    self._scheduleRun();\n    // Yield. We'll get back here after the task is run (and will throw if the\n    // task throws).\n    fut.wait();\n  },\n  queueTask: function (task) {\n    var self = this;\n    self._taskHandles.push({\n      task: task,\n      name: task.name\n    });\n    self._scheduleRun();\n    // No need to block.\n  },\n\n  flush: function () {\n    var self = this;\n    self.runTask(function () {});\n  },\n\n  safeToRunTask: function () {\n    var self = this;\n    return Fiber.current && self._currentTaskFiber !== Fiber.current;\n  },\n\n  drain: function () {\n    var self = this;\n    if (self._draining)\n      return;\n    if (!self.safeToRunTask())\n      return;\n    self._draining = true;\n    while (! self._taskHandles.isEmpty()) {\n      self.flush();\n    }\n    self._draining = false;\n  },\n\n  _scheduleRun: function () {\n    var self = this;\n    // Already running or scheduled? Do nothing.\n    if (self._runningOrRunScheduled)\n      return;\n\n    self._runningOrRunScheduled = true;\n    setImmediate(function () {\n      Fiber(function () {\n        self._run();\n      }).run();\n    });\n  },\n  _run: function () {\n    var self = this;\n\n    if (!self._runningOrRunScheduled)\n      throw new Error(\"expected to be _runningOrRunScheduled\");\n\n    if (self._taskHandles.isEmpty()) {\n      // Done running tasks! Don't immediately schedule another run, but\n      // allow future tasks to do so.\n      self._runningOrRunScheduled = false;\n      return;\n    }\n    var taskHandle = self._taskHandles.shift();\n\n    // Run the task.\n    self._currentTaskFiber = Fiber.current;\n    var exception = undefined;\n    try {\n      taskHandle.task();\n    } catch (err) {\n      if (taskHandle.future) {\n        // We'll throw this exception through runTask.\n        exception = err;\n      } else {\n        Meteor._debug(\"Exception in queued task: \" + (err.stack || err));\n      }\n    }\n    self._currentTaskFiber = undefined;\n\n    // Soon, run the next task, if there is any.\n    self._runningOrRunScheduled = false;\n    self._scheduleRun();\n\n    // If this was queued with runTask, let the runTask call return (throwing if\n    // the task threw).\n    if (taskHandle.future) {\n      if (exception)\n        taskHandle.future['throw'](exception);\n      else\n        taskHandle.future['return']();\n    }\n  }\n});\n\n// Sleep. Mostly used for debugging (eg, inserting latency into server\n// methods).\n//\nMeteor._sleepForMs = function (ms) {\n  var fiber = Fiber.current;\n  setTimeout(function() {\n    fiber.run();\n  }, ms);\n  Fiber.yield();\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/startup_server.js                                                                               //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nMeteor.startup = function (callback) {\n  if (__meteor_bootstrap__.startupHooks) {\n    __meteor_bootstrap__.startupHooks.push(callback);\n  } else {\n    // We already started up. Just call it now.\n    callback();\n  }\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/debug.js                                                                                        //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar suppress = 0;\n\n// replacement for console.log. This is a temporary API. We should\n// provide a real logging API soon (possibly just a polyfill for\n// console?)\n//\n// NOTE: this is used on the server to print the warning about\n// having autopublish enabled when you probably meant to turn it\n// off. it's not really the proper use of something called\n// _debug. the intent is for this message to go to the terminal and\n// be very visible. if you change _debug to go someplace else, etc,\n// please fix the autopublish code to do something reasonable.\n//\nMeteor._debug = function (/* arguments */) {\n  if (suppress) {\n    suppress--;\n    return;\n  }\n  if (typeof console !== 'undefined' &&\n      typeof console.log !== 'undefined') {\n    if (arguments.length == 0) { // IE Companion breaks otherwise\n      // IE10 PP4 requires at least one argument\n      console.log('');\n    } else {\n      // IE doesn't have console.log.apply, it's not a real Object.\n      // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9\n      // http://patik.com/blog/complete-cross-browser-console-log/\n      if (typeof console.log.apply === \"function\") {\n        // Most browsers\n\n        // Chrome and Safari only hyperlink URLs to source files in first argument of\n        // console.log, so try to call it with one argument if possible.\n        // Approach taken here: If all arguments are strings, join them on space.\n        // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991\n        var allArgumentsOfTypeString = true;\n        for (var i = 0; i < arguments.length; i++)\n          if (typeof arguments[i] !== \"string\")\n            allArgumentsOfTypeString = false;\n\n        if (allArgumentsOfTypeString)\n          console.log.apply(console, [Array.prototype.join.call(arguments, \" \")]);\n        else\n          console.log.apply(console, arguments);\n\n      } else if (typeof Function.prototype.bind === \"function\") {\n        // IE9\n        var log = Function.prototype.bind.call(console.log, console);\n        log.apply(console, arguments);\n      } else {\n        // IE8\n        Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));\n      }\n    }\n  }\n};\n\n// Suppress the next 'count' Meteor._debug messsages. Use this to\n// stop tests from spamming the console.\n//\nMeteor._suppress_log = function (count) {\n  suppress += count;\n};\n\nMeteor._suppressed_log_expected = function () {\n  return suppress !== 0;\n};\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/string_utils.js                                                                                 //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Like Perl's quotemeta: quotes all regexp metacharacters.\n// Code taken from\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\nMeteor._escapeRegExp = function (string) {\n    return String(string).replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/test_environment.js                                                                             //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar TEST_METADATA_STR;\nif (Meteor.isClient) {\n  TEST_METADATA_STR = meteorEnv.TEST_METADATA;\n} else {\n  TEST_METADATA_STR = process.env.TEST_METADATA;\n}\n\nvar TEST_METADATA = JSON.parse(TEST_METADATA_STR || \"{}\");\nvar testDriverPackageName = TEST_METADATA.driverPackage;\n\n// Note that if we are in test-packages mode neither of these will be set,\n// but we will have a test driver package\nMeteor.isTest = !!TEST_METADATA.isTest;\nMeteor.isAppTest = !!TEST_METADATA.isAppTest;\nMeteor.isPackageTest = !!testDriverPackageName && !Meteor.isTest && !Meteor.isAppTest; \n\nif (typeof testDriverPackageName === \"string\") {\n  Meteor.startup(function() {\n    var testDriverPackage = Package[testDriverPackageName];\n    if (! testDriverPackage) {\n      throw new Error(\"Can't find test driver package: \" + testDriverPackageName);\n    }\n\n    // On the client, the test driver *must* define `runTests`\n    if (Meteor.isClient) {\n      if (typeof testDriverPackage.runTests !== \"function\") {\n        throw new Error(\"Test driver package \" + testDriverPackageName\n          + \" missing `runTests` export\");\n      }\n      testDriverPackage.runTests();\n    } else {\n      // The server can optionally define `start`\n      if (typeof testDriverPackage.start === \"function\") {\n        testDriverPackage.start();\n      }\n    }\n  });\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/dynamics_nodejs.js                                                                              //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Fiber-aware implementation of dynamic scoping, for use on the server\n\nvar Fiber = Npm.require('fibers');\n\nvar nextSlot = 0;\n\nMeteor._nodeCodeMustBeInFiber = function () {\n  if (!Fiber.current) {\n    throw new Error(\"Meteor code must always run within a Fiber. \" +\n                    \"Try wrapping callbacks that you pass to non-Meteor \" +\n                    \"libraries with Meteor.bindEnvironment.\");\n  }\n};\n\nMeteor.EnvironmentVariable = function () {\n  this.slot = nextSlot++;\n};\n\n_.extend(Meteor.EnvironmentVariable.prototype, {\n  get: function () {\n    Meteor._nodeCodeMustBeInFiber();\n\n    return Fiber.current._meteor_dynamics &&\n      Fiber.current._meteor_dynamics[this.slot];\n  },\n\n  // Most Meteor code ought to run inside a fiber, and the\n  // _nodeCodeMustBeInFiber assertion helps you remember to include appropriate\n  // bindEnvironment calls (which will get you the *right value* for your\n  // environment variables, on the server).\n  //\n  // In some very special cases, it's more important to run Meteor code on the\n  // server in non-Fiber contexts rather than to strongly enforce the safeguard\n  // against forgetting to use bindEnvironment. For example, using `check` in\n  // some top-level constructs like connect handlers without needing unnecessary\n  // Fibers on every request is more important that possibly failing to find the\n  // correct argumentChecker. So this function is just like get(), but it\n  // returns null rather than throwing when called from outside a Fiber. (On the\n  // client, it is identical to get().)\n  getOrNullIfOutsideFiber: function () {\n    if (!Fiber.current)\n      return null;\n    return this.get();\n  },\n\n  withValue: function (value, func) {\n    Meteor._nodeCodeMustBeInFiber();\n\n    if (!Fiber.current._meteor_dynamics)\n      Fiber.current._meteor_dynamics = [];\n    var currentValues = Fiber.current._meteor_dynamics;\n\n    var saved = currentValues[this.slot];\n    try {\n      currentValues[this.slot] = value;\n      var ret = func();\n    } finally {\n      currentValues[this.slot] = saved;\n    }\n\n    return ret;\n  }\n});\n\n// Meteor application code is always supposed to be run inside a\n// fiber. bindEnvironment ensures that the function it wraps is run from\n// inside a fiber and ensures it sees the values of Meteor environment\n// variables that are set at the time bindEnvironment is called.\n//\n// If an environment-bound function is called from outside a fiber (eg, from\n// an asynchronous callback from a non-Meteor library such as MongoDB), it'll\n// kick off a new fiber to execute the function, and returns undefined as soon\n// as that fiber returns or yields (and func's return value is ignored).\n//\n// If it's called inside a fiber, it works normally (the\n// return value of the function will be passed through, and no new\n// fiber will be created.)\n//\n// `onException` should be a function or a string.  When it is a\n// function, it is called as a callback when the bound function raises\n// an exception.  If it is a string, it should be a description of the\n// callback, and when an exception is raised a debug message will be\n// printed with the description.\nMeteor.bindEnvironment = function (func, onException, _this) {\n  Meteor._nodeCodeMustBeInFiber();\n\n  var boundValues = _.clone(Fiber.current._meteor_dynamics || []);\n\n  if (!onException || typeof(onException) === 'string') {\n    var description = onException || \"callback of async function\";\n    onException = function (error) {\n      Meteor._debug(\n        \"Exception in \" + description + \":\",\n        error && error.stack || error\n      );\n    };\n  } else if (typeof(onException) !== 'function') {\n    throw new Error('onException argument must be a function, string or undefined for Meteor.bindEnvironment().');\n  }\n\n  return function (/* arguments */) {\n    var args = _.toArray(arguments);\n\n    var runWithEnvironment = function () {\n      var savedValues = Fiber.current._meteor_dynamics;\n      try {\n        // Need to clone boundValues in case two fibers invoke this\n        // function at the same time\n        Fiber.current._meteor_dynamics = _.clone(boundValues);\n        var ret = func.apply(_this, args);\n      } catch (e) {\n        // note: callback-hook currently relies on the fact that if onException\n        // throws and you were originally calling the wrapped callback from\n        // within a Fiber, the wrapped call throws.\n        onException(e);\n      } finally {\n        Fiber.current._meteor_dynamics = savedValues;\n      }\n      return ret;\n    };\n\n    if (Fiber.current)\n      return runWithEnvironment();\n    Fiber(runWithEnvironment).run();\n  };\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/url_server.js                                                                                   //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nif (process.env.ROOT_URL &&\n    typeof __meteor_runtime_config__ === \"object\") {\n  __meteor_runtime_config__.ROOT_URL = process.env.ROOT_URL;\n  if (__meteor_runtime_config__.ROOT_URL) {\n    var parsedUrl = Npm.require('url').parse(__meteor_runtime_config__.ROOT_URL);\n    // Sometimes users try to pass, eg, ROOT_URL=mydomain.com.\n    if (!parsedUrl.host) {\n      throw Error(\"$ROOT_URL, if specified, must be an URL\");\n    }\n    var pathPrefix = parsedUrl.pathname;\n    if (pathPrefix.slice(-1) === '/') {\n      // remove trailing slash (or turn \"/\" into \"\")\n      pathPrefix = pathPrefix.slice(0, -1);\n    }\n    __meteor_runtime_config__.ROOT_URL_PATH_PREFIX = pathPrefix;\n  } else {\n    __meteor_runtime_config__.ROOT_URL_PATH_PREFIX = \"\";\n  }\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/url_common.js                                                                                   //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n/**\n * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using `meteor build`.\n * @locus Anywhere\n * @param {String} [path] A path to append to the root URL. Do not include a leading \"`/`\".\n * @param {Object} [options]\n * @param {Boolean} options.secure Create an HTTPS URL.\n * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.\n * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: \"`http://foo.example.com`\"\n */\nMeteor.absoluteUrl = function (path, options) {\n  // path is optional\n  if (!options && typeof path === 'object') {\n    options = path;\n    path = undefined;\n  }\n  // merge options with defaults\n  options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});\n\n  var url = options.rootUrl;\n  if (!url)\n    throw new Error(\"Must pass options.rootUrl or set ROOT_URL in the server environment\");\n\n  if (!/^http[s]?:\\/\\//i.test(url)) // url starts with 'http://' or 'https://'\n    url = 'http://' + url; // we will later fix to https if options.secure is set\n\n  if (!/\\/$/.test(url)) // url ends with '/'\n    url += '/';\n\n  if (path)\n    url += path;\n\n  // turn http to https if secure option is set, and we're not talking\n  // to localhost.\n  if (options.secure &&\n      /^http:/.test(url) && // url starts with 'http:'\n      !/http:\\/\\/localhost[:\\/]/.test(url) && // doesn't match localhost\n      !/http:\\/\\/127\\.0\\.0\\.1[:\\/]/.test(url)) // or 127.0.0.1\n    url = url.replace(/^http:/, 'https:');\n\n  if (options.replaceLocalhost)\n    url = url.replace(/^http:\\/\\/localhost([:\\/].*)/, 'http://127.0.0.1$1');\n\n  return url;\n};\n\n// allow later packages to override default options\nMeteor.absoluteUrl.defaultOptions = { };\nif (typeof __meteor_runtime_config__ === \"object\" &&\n    __meteor_runtime_config__.ROOT_URL)\n  Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;\n\n\nMeteor._relativeToSiteRootUrl = function (link) {\n  if (typeof __meteor_runtime_config__ === \"object\" &&\n      link.substr(0, 1) === \"/\")\n    link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\") + link;\n  return link;\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/flush-buffers-on-exit-in-windows.js                                                             //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nif (process.platform === \"win32\") {\n  /*\n   * Based on https://github.com/cowboy/node-exit\n   *\n   * Copyright (c) 2013 \"Cowboy\" Ben Alman\n   * Licensed under the MIT license.\n   */\n  var origProcessExit = process.exit.bind(process);\n  process.exit = function (exitCode) {\n    var streams = [process.stdout, process.stderr];\n    var drainCount = 0;\n    // Actually exit if all streams are drained.\n    function tryToExit() {\n      if (drainCount === streams.length) {\n        origProcessExit(exitCode);\n      }\n    }\n    streams.forEach(function(stream) {\n      // Count drained streams now, but monitor non-drained streams.\n      if (stream.bufferSize === 0) {\n        drainCount++;\n      } else {\n        stream.write('', 'utf-8', function() {\n          drainCount++;\n          tryToExit();\n        });\n      }\n      // Prevent further writing.\n      stream.write = function() {};\n    });\n    // If all streams were already drained, exit now.\n    tryToExit();\n    // In Windows, when run as a Node.js child process, a script utilizing\n    // this library might just exit with a 0 exit code, regardless. This code,\n    // despite the fact that it looks a bit crazy, appears to fix that.\n    process.on('exit', function() {\n      origProcessExit(exitCode);\n    });\n  };\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.meteor = {}, {\n  Meteor: Meteor,\n  global: global,\n  meteorEnv: meteorEnv\n});\n\n})();\n\n//# sourceMappingURL=meteor.js.map\n"]},"hash":"3dbccbddb2324eda39faaa8dea46593d6951ff20"}
