{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/kadira_flow-router.js","filenameRelative":"/bundle/programs/server/packages/kadira_flow-router.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/kadira_flow-router.js.map","sourceFileName":"/bundle/programs/server/packages/kadira_flow-router.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"kadira_flow-router"},"ignored":false,"code":"(function () {\n\n  /* Imports */\n  var Meteor = Package.meteor.Meteor;\n  var global = Package.meteor.global;\n  var meteorEnv = Package.meteor.meteorEnv;\n  var _ = Package.underscore._;\n  var Tracker = Package.tracker.Tracker;\n  var Deps = Package.tracker.Deps;\n  var ReactiveDict = Package['reactive-dict'].ReactiveDict;\n  var ReactiveVar = Package['reactive-var'].ReactiveVar;\n  var EJSON = Package.ejson.EJSON;\n  var meteorInstall = Package.modules.meteorInstall;\n  var Buffer = Package.modules.Buffer;\n  var process = Package.modules.process;\n\n  /* Package-scope variables */\n  var Router, Group, Route, FlowRouter, FastRender;\n\n  var require = meteorInstall({ \"node_modules\": { \"meteor\": { \"kadira:flow-router\": { \"server\": { \"router.js\": function routerJs(require) {\n\n              //////////////////////////////////////////////////////////////////////////////////////\n              //                                                                                  //\n              // packages/kadira_flow-router/server/router.js                                     //\n              //                                                                                  //\n              //////////////////////////////////////////////////////////////////////////////////////\n              //\n              var Qs = Npm.require('qs');\n\n              Router = function Router() {\n                this._routes = [];\n                this._routesMap = {};\n                this.subscriptions = Function.prototype;\n\n                // holds onRoute callbacks\n                this._onRouteCallbacks = [];\n              };\n\n              Router.prototype.route = function (pathDef, options) {\n                if (!/^\\/.*/.test(pathDef)) {\n                  var message = \"route's path must start with '/'\";\n                  throw new Error(message);\n                }\n\n                options = options || {};\n                var route = new Route(this, pathDef, options);\n                this._routes.push(route);\n\n                if (options.name) {\n                  this._routesMap[options.name] = route;\n                }\n\n                this._triggerRouteRegister(route);\n                return route;\n              };\n\n              Router.prototype.group = function (options) {\n                return new Group(this, options);\n              };\n\n              Router.prototype.path = function (pathDef, fields, queryParams) {\n                if (this._routesMap[pathDef]) {\n                  pathDef = this._routesMap[pathDef].path;\n                }\n\n                fields = fields || {};\n                var regExp = /(:[\\w\\(\\)\\\\\\+\\*\\.\\?]+)+/g;\n                var path = pathDef.replace(regExp, function (key) {\n                  var firstRegexpChar = key.indexOf(\"(\");\n                  // get the content behind : and (\\\\d+/)\n                  key = key.substring(1, firstRegexpChar > 0 ? firstRegexpChar : undefined);\n                  // remove +?*\n                  key = key.replace(/[\\+\\*\\?]+/g, \"\");\n\n                  return fields[key] || \"\";\n                });\n\n                path = path.replace(/\\/\\/+/g, \"/\"); // Replace multiple slashes with single slash\n\n                // remove trailing slash\n                // but keep the root slash if it's the only one\n                path = path.match(/^\\/{1}$/) ? path : path.replace(/\\/$/, \"\");\n\n                var strQueryParams = Qs.stringify(queryParams || {});\n                if (strQueryParams) {\n                  path += \"?\" + strQueryParams;\n                }\n\n                return path;\n              };\n\n              Router.prototype.onRouteRegister = function (cb) {\n                this._onRouteCallbacks.push(cb);\n              };\n\n              Router.prototype._triggerRouteRegister = function (currentRoute) {\n                // We should only need to send a safe set of fields on the route\n                // object.\n                // This is not to hide what's inside the route object, but to show\n                // these are the public APIs\n                var routePublicApi = _.pick(currentRoute, 'name', 'pathDef', 'path');\n                var omittingOptionFields = ['triggersEnter', 'triggersExit', 'action', 'subscriptions', 'name'];\n                routePublicApi.options = _.omit(currentRoute.options, omittingOptionFields);\n\n                _.each(this._onRouteCallbacks, function (cb) {\n                  cb(routePublicApi);\n                });\n              };\n\n              Router.prototype.go = function () {\n                // client only\n              };\n\n              Router.prototype.current = function () {\n                // client only\n              };\n\n              Router.prototype.triggers = {\n                enter: function enter() {\n                  // client only\n                },\n                exit: function exit() {\n                  // client only\n                }\n              };\n\n              Router.prototype.middleware = function () {\n                // client only\n              };\n\n              Router.prototype.getState = function () {\n                // client only\n              };\n\n              Router.prototype.getAllStates = function () {\n                // client only\n              };\n\n              Router.prototype.setState = function () {\n                // client only\n              };\n\n              Router.prototype.removeState = function () {\n                // client only\n              };\n\n              Router.prototype.clearStates = function () {\n                // client only\n              };\n\n              Router.prototype.ready = function () {\n                // client only\n              };\n\n              Router.prototype.initialize = function () {\n                // client only\n              };\n\n              Router.prototype.wait = function () {\n                // client only\n              };\n\n              //////////////////////////////////////////////////////////////////////////////////////\n            }, \"group.js\": function groupJs() {\n\n              //////////////////////////////////////////////////////////////////////////////////////\n              //                                                                                  //\n              // packages/kadira_flow-router/server/group.js                                      //\n              //                                                                                  //\n              //////////////////////////////////////////////////////////////////////////////////////\n              //\n              Group = function Group(router, options) {\n                options = options || {};\n                this.prefix = options.prefix || '';\n                this.options = options;\n                this._router = router;\n              };\n\n              Group.prototype.route = function (pathDef, options) {\n                pathDef = this.prefix + pathDef;\n                return this._router.route(pathDef, options);\n              };\n\n              Group.prototype.group = function (options) {\n                var group = new Group(this._router, options);\n                group.parent = this;\n\n                return group;\n              };\n\n              //////////////////////////////////////////////////////////////////////////////////////\n            }, \"route.js\": function routeJs() {\n\n              //////////////////////////////////////////////////////////////////////////////////////\n              //                                                                                  //\n              // packages/kadira_flow-router/server/route.js                                      //\n              //                                                                                  //\n              //////////////////////////////////////////////////////////////////////////////////////\n              //\n              Route = function Route(router, pathDef, options) {\n                options = options || {};\n                this.options = options;\n                this.name = options.name;\n                this.pathDef = pathDef;\n\n                // Route.path is deprecated and will be removed in 3.0\n                this.path = pathDef;\n\n                this.action = options.action || Function.prototype;\n                this.subscriptions = options.subscriptions || Function.prototype;\n                this._subsMap = {};\n              };\n\n              Route.prototype.register = function (name, sub, options) {\n                this._subsMap[name] = sub;\n              };\n\n              Route.prototype.subscription = function (name) {\n                return this._subsMap[name];\n              };\n\n              Route.prototype.middleware = function (middleware) {};\n\n              //////////////////////////////////////////////////////////////////////////////////////\n            }, \"_init.js\": function _initJs() {\n\n              //////////////////////////////////////////////////////////////////////////////////////\n              //                                                                                  //\n              // packages/kadira_flow-router/server/_init.js                                      //\n              //                                                                                  //\n              //////////////////////////////////////////////////////////////////////////////////////\n              //\n              // Export Router Instance\n              FlowRouter = new Router();\n              FlowRouter.Router = Router;\n              FlowRouter.Route = Route;\n\n              //////////////////////////////////////////////////////////////////////////////////////\n            }, \"plugins\": { \"fast_render.js\": function fast_renderJs() {\n\n                //////////////////////////////////////////////////////////////////////////////////////\n                //                                                                                  //\n                // packages/kadira_flow-router/server/plugins/fast_render.js                        //\n                //                                                                                  //\n                //////////////////////////////////////////////////////////////////////////////////////\n                //\n                if (!Package['meteorhacks:fast-render']) {\n                  return;\n                }\n\n                FastRender = Package['meteorhacks:fast-render'].FastRender;\n\n                // hack to run after eveything else on startup\n                Meteor.startup(function () {\n                  Meteor.startup(function () {\n                    setupFastRender();\n                  });\n                });\n\n                function setupFastRender() {\n                  _.each(FlowRouter._routes, function (route) {\n                    FastRender.route(route.pathDef, function (routeParams, path) {\n                      var self = this;\n\n                      // anyone using Meteor.subscribe for something else?\n                      var original = Meteor.subscribe;\n                      Meteor.subscribe = function () {\n                        return _.toArray(arguments);\n                      };\n\n                      route._subsMap = {};\n                      FlowRouter.subscriptions.call(route, path);\n                      if (route.subscriptions) {\n                        var queryParams = routeParams.query;\n                        var params = _.omit(routeParams, 'query');\n                        route.subscriptions(params, queryParams);\n                      }\n                      _.each(route._subsMap, function (args) {\n                        self.subscribe.apply(self, args);\n                      });\n\n                      // restore Meteor.subscribe, ... on server side\n                      Meteor.subscribe = original;\n                    });\n                  });\n                }\n\n                //////////////////////////////////////////////////////////////////////////////////////\n              } } }, \"lib\": { \"router.js\": function routerJs() {\n\n              //////////////////////////////////////////////////////////////////////////////////////\n              //                                                                                  //\n              // packages/kadira_flow-router/lib/router.js                                        //\n              //                                                                                  //\n              //////////////////////////////////////////////////////////////////////////////////////\n              //\n              Router.prototype.url = function () {\n                // We need to remove the leading base path, or \"/\", as it will be inserted\n                // automatically by `Meteor.absoluteUrl` as documented in:\n                // http://docs.meteor.com/#/full/meteor_absoluteurl\n                var completePath = this.path.apply(this, arguments);\n                var basePath = this._basePath || '/';\n                var pathWithoutBase = completePath.replace(new RegExp('^' + basePath), '');\n                return Meteor.absoluteUrl(pathWithoutBase);\n              };\n\n              //////////////////////////////////////////////////////////////////////////////////////\n            } } } } } }, { \"extensions\": [\".js\", \".json\"] });\n  require(\"./node_modules/meteor/kadira:flow-router/server/router.js\");\n  require(\"./node_modules/meteor/kadira:flow-router/server/group.js\");\n  require(\"./node_modules/meteor/kadira:flow-router/server/route.js\");\n  require(\"./node_modules/meteor/kadira:flow-router/server/_init.js\");\n  require(\"./node_modules/meteor/kadira:flow-router/server/plugins/fast_render.js\");\n  require(\"./node_modules/meteor/kadira:flow-router/lib/router.js\");\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  (function (pkg, symbols) {\n    for (var s in symbols) {\n      s in pkg || (pkg[s] = symbols[s]);\n    }\n  })(Package['kadira:flow-router'] = {}, {\n    FlowRouter: FlowRouter\n  });\n})();\n\n//# sourceMappingURL=kadira_flow-router.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/kadira_flow-router.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/kadira_flow-router.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\n\n/* Package-scope variables */\nvar Router, Group, Route, FlowRouter, FastRender;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"kadira:flow-router\":{\"server\":{\"router.js\":function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/kadira_flow-router/server/router.js                                     //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nvar Qs = Npm.require('qs');\n\nRouter = function () {\n  this._routes = [];\n  this._routesMap = {};\n  this.subscriptions = Function.prototype;\n\n  // holds onRoute callbacks\n  this._onRouteCallbacks = [];\n};\n\nRouter.prototype.route = function(pathDef, options) {\n  if (!/^\\/.*/.test(pathDef)) {\n    var message = \"route's path must start with '/'\";\n    throw new Error(message);\n  }\n  \n  options = options || {};\n  var route = new Route(this, pathDef, options);\n  this._routes.push(route);\n\n  if (options.name) {\n    this._routesMap[options.name] = route;\n  }\n\n  this._triggerRouteRegister(route);\n  return route;\n};\n\nRouter.prototype.group = function(options) {\n  return new Group(this, options);\n};\n\nRouter.prototype.path = function(pathDef, fields, queryParams) {\n  if (this._routesMap[pathDef]) {\n    pathDef = this._routesMap[pathDef].path;\n  }\n\n  fields = fields || {};\n  var regExp = /(:[\\w\\(\\)\\\\\\+\\*\\.\\?]+)+/g;\n  var path = pathDef.replace(regExp, function(key) {\n    var firstRegexpChar = key.indexOf(\"(\");\n    // get the content behind : and (\\\\d+/)\n    key = key.substring(1, (firstRegexpChar > 0)? firstRegexpChar: undefined);\n    // remove +?*\n    key = key.replace(/[\\+\\*\\?]+/g, \"\");\n\n    return fields[key] || \"\";\n  });\n\n  path = path.replace(/\\/\\/+/g, \"/\"); // Replace multiple slashes with single slash\n\n  // remove trailing slash\n  // but keep the root slash if it's the only one\n  path = path.match(/^\\/{1}$/) ? path: path.replace(/\\/$/, \"\");\n\n  var strQueryParams = Qs.stringify(queryParams || {});\n  if(strQueryParams) {\n    path += \"?\" + strQueryParams;\n  }\n\n  return path;\n};\n\nRouter.prototype.onRouteRegister = function(cb) {\n  this._onRouteCallbacks.push(cb);\n};\n\nRouter.prototype._triggerRouteRegister = function(currentRoute) {\n  // We should only need to send a safe set of fields on the route\n  // object.\n  // This is not to hide what's inside the route object, but to show \n  // these are the public APIs\n  var routePublicApi = _.pick(currentRoute, 'name', 'pathDef', 'path');\n  var omittingOptionFields = [\n    'triggersEnter', 'triggersExit', 'action', 'subscriptions', 'name'\n  ];\n  routePublicApi.options = _.omit(currentRoute.options, omittingOptionFields);\n\n  _.each(this._onRouteCallbacks, function(cb) {\n    cb(routePublicApi);\n  });\n};\n\n\nRouter.prototype.go = function() {\n  // client only\n};\n\n\nRouter.prototype.current = function() {\n  // client only\n};\n\n\nRouter.prototype.triggers = {\n  enter: function() {\n    // client only\n  },\n  exit: function() {\n    // client only\n  }\n};\n\nRouter.prototype.middleware = function() {\n  // client only\n};\n\n\nRouter.prototype.getState = function() {\n  // client only\n};\n\n\nRouter.prototype.getAllStates = function() {\n  // client only\n};\n\n\nRouter.prototype.setState = function() {\n  // client only\n};\n\n\nRouter.prototype.removeState = function() {\n  // client only\n};\n\n\nRouter.prototype.clearStates = function() {\n  // client only\n};\n\n\nRouter.prototype.ready = function() {\n  // client only\n};\n\n\nRouter.prototype.initialize = function() {\n  // client only\n};\n\nRouter.prototype.wait = function() {\n  // client only\n};\n\n//////////////////////////////////////////////////////////////////////////////////////\n\n},\"group.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/kadira_flow-router/server/group.js                                      //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nGroup = function(router, options) {\n  options = options || {};\n  this.prefix = options.prefix || '';\n  this.options = options;\n  this._router = router;\n};\n\nGroup.prototype.route = function(pathDef, options) {\n  pathDef = this.prefix + pathDef;\n  return this._router.route(pathDef, options);\n};\n\nGroup.prototype.group = function(options) {\n  var group = new Group(this._router, options);\n  group.parent = this;\n\n  return group;\n};\n\n//////////////////////////////////////////////////////////////////////////////////////\n\n},\"route.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/kadira_flow-router/server/route.js                                      //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nRoute = function(router, pathDef, options) {\n  options = options || {};\n  this.options = options;\n  this.name = options.name;\n  this.pathDef = pathDef;\n\n  // Route.path is deprecated and will be removed in 3.0\n  this.path = pathDef;\n\n  this.action = options.action || Function.prototype;\n  this.subscriptions = options.subscriptions || Function.prototype;\n  this._subsMap = {};\n};\n\n\nRoute.prototype.register = function(name, sub, options) {\n  this._subsMap[name] = sub;\n};\n\n\nRoute.prototype.subscription = function(name) {\n  return this._subsMap[name];\n};\n\n\nRoute.prototype.middleware = function(middleware) {\n \n};\n\n//////////////////////////////////////////////////////////////////////////////////////\n\n},\"_init.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/kadira_flow-router/server/_init.js                                      //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\n// Export Router Instance\nFlowRouter = new Router();\nFlowRouter.Router = Router;\nFlowRouter.Route = Route;\n\n//////////////////////////////////////////////////////////////////////////////////////\n\n},\"plugins\":{\"fast_render.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/kadira_flow-router/server/plugins/fast_render.js                        //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nif(!Package['meteorhacks:fast-render']) {\n  return;\n}\n\nFastRender = Package['meteorhacks:fast-render'].FastRender;\n\n// hack to run after eveything else on startup\nMeteor.startup(function () {\n  Meteor.startup(function () {\n    setupFastRender();\n  });\n});\n\nfunction setupFastRender () {\n  _.each(FlowRouter._routes, function (route) {\n    FastRender.route(route.pathDef, function (routeParams, path) {\n      var self = this;\n\n      // anyone using Meteor.subscribe for something else?\n      var original = Meteor.subscribe;\n      Meteor.subscribe = function () {\n        return _.toArray(arguments);\n      };\n\n      route._subsMap = {};\n      FlowRouter.subscriptions.call(route, path);\n      if(route.subscriptions) {\n        var queryParams = routeParams.query;\n        var params = _.omit(routeParams, 'query');\n        route.subscriptions(params, queryParams);\n      }\n      _.each(route._subsMap, function (args) {\n        self.subscribe.apply(self, args);\n      });\n\n      // restore Meteor.subscribe, ... on server side\n      Meteor.subscribe = original;\n    });\n  });\n}\n\n//////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"lib\":{\"router.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/kadira_flow-router/lib/router.js                                        //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nRouter.prototype.url = function() {\n  // We need to remove the leading base path, or \"/\", as it will be inserted\n  // automatically by `Meteor.absoluteUrl` as documented in:\n  // http://docs.meteor.com/#/full/meteor_absoluteurl\n  var completePath = this.path.apply(this, arguments);\n  var basePath = this._basePath || '/';\n  var pathWithoutBase = completePath.replace(new RegExp('^' + basePath), '');\n  return Meteor.absoluteUrl(pathWithoutBase);\n};\n\n//////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/kadira:flow-router/server/router.js\");\nrequire(\"./node_modules/meteor/kadira:flow-router/server/group.js\");\nrequire(\"./node_modules/meteor/kadira:flow-router/server/route.js\");\nrequire(\"./node_modules/meteor/kadira:flow-router/server/_init.js\");\nrequire(\"./node_modules/meteor/kadira:flow-router/server/plugins/fast_render.js\");\nrequire(\"./node_modules/meteor/kadira:flow-router/lib/router.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['kadira:flow-router'] = {}, {\n  FlowRouter: FlowRouter\n});\n\n})();\n\n//# sourceMappingURL=kadira_flow-router.js.map\n"]},"hash":"e968a04814c9c95d4ef8d9bd5ee11ded8ec9df94"}
