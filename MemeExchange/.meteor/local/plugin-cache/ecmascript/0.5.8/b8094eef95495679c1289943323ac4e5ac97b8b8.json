{"metadata":{"usedHelpers":["typeof"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/minimongo.js","filenameRelative":"/bundle/programs/server/packages/minimongo.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/minimongo.js.map","sourceFileName":"/bundle/programs/server/packages/minimongo.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"minimongo"},"ignored":false,"code":"var _typeof;module.import('babel-runtime/helpers/typeof',{\"default\":function(v){_typeof=v}});\n(function () {\n\n  /* Imports */\n  var Meteor = Package.meteor.Meteor;\n  var global = Package.meteor.global;\n  var meteorEnv = Package.meteor.meteorEnv;\n  var _ = Package.underscore._;\n  var EJSON = Package.ejson.EJSON;\n  var IdMap = Package['id-map'].IdMap;\n  var OrderedDict = Package['ordered-dict'].OrderedDict;\n  var Tracker = Package.tracker.Tracker;\n  var Deps = Package.tracker.Deps;\n  var MongoID = Package['mongo-id'].MongoID;\n  var Random = Package.random.Random;\n  var DiffSequence = Package['diff-sequence'].DiffSequence;\n  var GeoJSON = Package['geojson-utils'].GeoJSON;\n\n  /* Package-scope variables */\n  var _LocalCollection, Minimongo, MinimongoTest, MinimongoError, isArray, isPlainObject, isIndexable, isOperatorObject, isNumericKey, regexpElementMatcher, equalityElementMatcher, ELEMENT_OPERATORS, _makeLookupFunction, expandArraysInBranches, projectionDetails, pathsToTree, combineImportantPathsIntoProjection;\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/minimongo.js                                                                            //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // XXX type checking on selectors (graceful error if malformed)\n\n    // LocalCollection: a set of documents that supports queries and modifiers.\n\n    // Cursor: a specification for a particular subset of documents, w/\n    // a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),\n\n    // ObserveHandle: the return value of a live query.\n\n    _LocalCollection = function LocalCollection(name) {\n      var self = this;\n      self.name = name;\n      // _id -> document (also containing id)\n      self._docs = new _LocalCollection._IdMap();\n\n      self._observeQueue = new Meteor._SynchronousQueue();\n\n      self.next_qid = 1; // live query id generator\n\n      // qid -> live query object. keys:\n      //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n      //  results: array (ordered) or object (unordered) of current results\n      //    (aliased with self._docs!)\n      //  resultsSnapshot: snapshot of results. null if not paused.\n      //  cursor: Cursor object for the query.\n      //  selector, sorter, (callbacks): functions\n      self.queries = {};\n\n      // null if not saving originals; an IdMap from id to original document value if\n      // saving originals. See comments before saveOriginals().\n      self._savedOriginals = null;\n\n      // True when observers are paused and we should not send callbacks.\n      self.paused = false;\n    };\n\n    Minimongo = {};\n\n    // Object exported only for unit testing.\n    // Use it to export private functions to test in Tinytest.\n    MinimongoTest = {};\n\n    MinimongoError = function MinimongoError(message) {\n      var e = new Error(message);\n      e.name = \"MinimongoError\";\n      return e;\n    };\n\n    // options may include sort, skip, limit, reactive\n    // sort may be any of these forms:\n    //     {a: 1, b: -1}\n    //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n    //     [\"a\", [\"b\", \"desc\"]]\n    //   (in the first form you're beholden to key enumeration order in\n    //   your javascript VM)\n    //\n    // reactive: if given, and false, don't register with Tracker (default\n    // is true)\n    //\n    // XXX possibly should support retrieving a subset of fields? and\n    // have it be a hint (ignored on the client, when not copying the\n    // doc?)\n    //\n    // XXX sort does not yet support subkeys ('a.b') .. fix that!\n    // XXX add one more sort form: \"key\"\n    // XXX tests\n    _LocalCollection.prototype.find = function (selector, options) {\n      // default syntax for everything is to omit the selector argument.\n      // but if selector is explicitly passed in as false or undefined, we\n      // want a selector that matches nothing.\n      if (arguments.length === 0) selector = {};\n\n      return new _LocalCollection.Cursor(this, selector, options);\n    };\n\n    // don't call this ctor directly.  use LocalCollection.find().\n\n    _LocalCollection.Cursor = function (collection, selector, options) {\n      var self = this;\n      if (!options) options = {};\n\n      self.collection = collection;\n      self.sorter = null;\n      self.matcher = new Minimongo.Matcher(selector);\n\n      if (_LocalCollection._selectorIsId(selector)) {\n        // stash for fast path\n        self._selectorId = selector;\n      } else if (_LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n        // also do the fast path for { _id: idString }\n        self._selectorId = selector._id;\n      } else {\n        self._selectorId = undefined;\n        if (self.matcher.hasGeoQuery() || options.sort) {\n          self.sorter = new Minimongo.Sorter(options.sort || [], { matcher: self.matcher });\n        }\n      }\n\n      self.skip = options.skip;\n      self.limit = options.limit;\n      self.fields = options.fields;\n\n      self._projectionFn = _LocalCollection._compileProjection(self.fields || {});\n\n      self._transform = _LocalCollection.wrapTransform(options.transform);\n\n      // by default, queries register w/ Tracker when it is available.\n      if (typeof Tracker !== \"undefined\") self.reactive = options.reactive === undefined ? true : options.reactive;\n    };\n\n    // Since we don't actually have a \"nextObject\" interface, there's really no\n    // reason to have a \"rewind\" interface.  All it did was make multiple calls\n    // to fetch/map/forEach return nothing the second time.\n    // XXX COMPAT WITH 0.8.1\n    _LocalCollection.Cursor.prototype.rewind = function () {};\n\n    _LocalCollection.prototype.findOne = function (selector, options) {\n      if (arguments.length === 0) selector = {};\n\n      // NOTE: by setting limit 1 here, we end up using very inefficient\n      // code that recomputes the whole query on each update. The upside is\n      // that when you reactively depend on a findOne you only get\n      // invalidated when the found object changes, not any object in the\n      // collection. Most findOne will be by id, which has a fast path, so\n      // this might not be a big deal. In most cases, invalidation causes\n      // the called to re-query anyway, so this should be a net performance\n      // improvement.\n      options = options || {};\n      options.limit = 1;\n\n      return this.find(selector, options).fetch()[0];\n    };\n\n    /**\n     * @callback IterationCallback\n     * @param {Object} doc\n     * @param {Number} index\n     */\n    /**\n     * @summary Call `callback` once for each matching document, sequentially and synchronously.\n     * @locus Anywhere\n     * @method  forEach\n     * @instance\n     * @memberOf Mongo.Cursor\n     * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.\n     * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.\n     */\n    _LocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {\n      var self = this;\n\n      var objects = self._getRawObjects({ ordered: true });\n\n      if (self.reactive) {\n        self._depend({\n          addedBefore: true,\n          removed: true,\n          changed: true,\n          movedBefore: true });\n      }\n\n      _.each(objects, function (elt, i) {\n        // This doubles as a clone operation.\n        elt = self._projectionFn(elt);\n\n        if (self._transform) elt = self._transform(elt);\n        callback.call(thisArg, elt, i, self);\n      });\n    };\n\n    _LocalCollection.Cursor.prototype.getTransform = function () {\n      return this._transform;\n    };\n\n    /**\n     * @summary Map callback over all matching documents.  Returns an Array.\n     * @locus Anywhere\n     * @method map\n     * @instance\n     * @memberOf Mongo.Cursor\n     * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.\n     * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.\n     */\n    _LocalCollection.Cursor.prototype.map = function (callback, thisArg) {\n      var self = this;\n      var res = [];\n      self.forEach(function (doc, index) {\n        res.push(callback.call(thisArg, doc, index, self));\n      });\n      return res;\n    };\n\n    /**\n     * @summary Return all matching documents as an Array.\n     * @memberOf Mongo.Cursor\n     * @method  fetch\n     * @instance\n     * @locus Anywhere\n     * @returns {Object[]}\n     */\n    _LocalCollection.Cursor.prototype.fetch = function () {\n      var self = this;\n      var res = [];\n      self.forEach(function (doc) {\n        res.push(doc);\n      });\n      return res;\n    };\n\n    /**\n     * @summary Returns the number of documents that match a query.\n     * @memberOf Mongo.Cursor\n     * @method  count\n     * @instance\n     * @locus Anywhere\n     * @returns {Number}\n     */\n    _LocalCollection.Cursor.prototype.count = function () {\n      var self = this;\n\n      if (self.reactive) self._depend({ added: true, removed: true }, true /* allow the observe to be unordered */);\n\n      return self._getRawObjects({ ordered: true }).length;\n    };\n\n    _LocalCollection.Cursor.prototype._publishCursor = function (sub) {\n      var self = this;\n      if (!self.collection.name) throw new Error(\"Can't publish a cursor from a collection without a name.\");\n      var collection = self.collection.name;\n\n      // XXX minimongo should not depend on mongo-livedata!\n      if (!Package.mongo) {\n        throw new Error(\"Can't publish from Minimongo without the `mongo` package.\");\n      }\n\n      return Package.mongo.Mongo.Collection._publishCursor(self, sub, collection);\n    };\n\n    _LocalCollection.Cursor.prototype._getCollectionName = function () {\n      var self = this;\n      return self.collection.name;\n    };\n\n    _LocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {\n      if (callbacks.added && callbacks.addedBefore) throw new Error(\"Please specify only one of added() and addedBefore()\");\n      return !!(callbacks.addedBefore || callbacks.movedBefore);\n    };\n\n    _LocalCollection._observeCallbacksAreOrdered = function (callbacks) {\n      if (callbacks.addedAt && callbacks.added) throw new Error(\"Please specify only one of added() and addedAt()\");\n      if (callbacks.changedAt && callbacks.changed) throw new Error(\"Please specify only one of changed() and changedAt()\");\n      if (callbacks.removed && callbacks.removedAt) throw new Error(\"Please specify only one of removed() and removedAt()\");\n\n      return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt || callbacks.removedAt);\n    };\n\n    // the handle that comes back from observe.\n    _LocalCollection.ObserveHandle = function () {};\n\n    // options to contain:\n    //  * callbacks for observe():\n    //    - addedAt (document, atIndex)\n    //    - added (document)\n    //    - changedAt (newDocument, oldDocument, atIndex)\n    //    - changed (newDocument, oldDocument)\n    //    - removedAt (document, atIndex)\n    //    - removed (document)\n    //    - movedTo (document, oldIndex, newIndex)\n    //\n    // attributes available on returned query handle:\n    //  * stop(): end updates\n    //  * collection: the collection this query is querying\n    //\n    // iff x is a returned query handle, (x instanceof\n    // LocalCollection.ObserveHandle) is true\n    //\n    // initial results delivered through added callback\n    // XXX maybe callbacks should take a list of objects, to expose transactions?\n    // XXX maybe support field limiting (to limit what you're notified on)\n\n    _.extend(_LocalCollection.Cursor.prototype, {\n      /**\n       * @summary Watch a query.  Receive callbacks as the result set changes.\n       * @locus Anywhere\n       * @memberOf Mongo.Cursor\n       * @instance\n       * @param {Object} callbacks Functions to call to deliver the result set as it changes\n       */\n      observe: function observe(options) {\n        var self = this;\n        return _LocalCollection._observeFromObserveChanges(self, options);\n      },\n\n      /**\n       * @summary Watch a query.  Receive callbacks as the result set changes.  Only the differences between the old and new documents are passed to the callbacks.\n       * @locus Anywhere\n       * @memberOf Mongo.Cursor\n       * @instance\n       * @param {Object} callbacks Functions to call to deliver the result set as it changes\n       */\n      observeChanges: function observeChanges(options) {\n        var self = this;\n\n        var ordered = _LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n        // there are several places that assume you aren't combining skip/limit with\n        // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n        // comment in _modifyAndNotify\n        // XXX allow skip/limit with unordered observe\n        if (!options._allow_unordered && !ordered && (self.skip || self.limit)) throw new Error(\"must use ordered observe (ie, 'addedBefore' instead of 'added') with skip or limit\");\n\n        if (self.fields && (self.fields._id === 0 || self.fields._id === false)) throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n\n        var query = {\n          dirty: false,\n          matcher: self.matcher, // not fast pathed\n          sorter: ordered && self.sorter,\n          distances: self.matcher.hasGeoQuery() && ordered && new _LocalCollection._IdMap(),\n          resultsSnapshot: null,\n          ordered: ordered,\n          cursor: self,\n          projectionFn: self._projectionFn\n        };\n        var qid;\n\n        // Non-reactive queries call added[Before] and then never call anything\n        // else.\n        if (self.reactive) {\n          qid = self.collection.next_qid++;\n          self.collection.queries[qid] = query;\n        }\n        query.results = self._getRawObjects({\n          ordered: ordered, distances: query.distances });\n        if (self.collection.paused) query.resultsSnapshot = ordered ? [] : new _LocalCollection._IdMap();\n\n        // wrap callbacks we were passed. callbacks only fire when not paused and\n        // are never undefined\n        // Filters out blacklisted fields according to cursor's projection.\n        // XXX wrong place for this?\n\n        // furthermore, callbacks enqueue until the operation we're working on is\n        // done.\n        var wrapCallback = function wrapCallback(f) {\n          if (!f) return function () {};\n          return function () /*args*/{\n            var context = this;\n            var args = arguments;\n\n            if (self.collection.paused) return;\n\n            self.collection._observeQueue.queueTask(function () {\n              f.apply(context, args);\n            });\n          };\n        };\n        query.added = wrapCallback(options.added);\n        query.changed = wrapCallback(options.changed);\n        query.removed = wrapCallback(options.removed);\n        if (ordered) {\n          query.addedBefore = wrapCallback(options.addedBefore);\n          query.movedBefore = wrapCallback(options.movedBefore);\n        }\n\n        if (!options._suppress_initial && !self.collection.paused) {\n          // XXX unify ordered and unordered interface\n          var each = ordered ? _.bind(_.each, null, query.results) : _.bind(query.results.forEach, query.results);\n          each(function (doc) {\n            var fields = EJSON.clone(doc);\n\n            delete fields._id;\n            if (ordered) query.addedBefore(doc._id, self._projectionFn(fields), null);\n            query.added(doc._id, self._projectionFn(fields));\n          });\n        }\n\n        var handle = new _LocalCollection.ObserveHandle();\n        _.extend(handle, {\n          collection: self.collection,\n          stop: function stop() {\n            if (self.reactive) delete self.collection.queries[qid];\n          }\n        });\n\n        if (self.reactive && Tracker.active) {\n          // XXX in many cases, the same observe will be recreated when\n          // the current autorun is rerun.  we could save work by\n          // letting it linger across rerun and potentially get\n          // repurposed if the same observe is performed, using logic\n          // similar to that of Meteor.subscribe.\n          Tracker.onInvalidate(function () {\n            handle.stop();\n          });\n        }\n        // run the observe callbacks resulting from the initial contents\n        // before we leave the observe.\n        self.collection._observeQueue.drain();\n\n        return handle;\n      }\n    });\n\n    // Returns a collection of matching objects, but doesn't deep copy them.\n    //\n    // If ordered is set, returns a sorted array, respecting sorter, skip, and limit\n    // properties of the query.  if sorter is falsey, no sort -- you get the natural\n    // order.\n    //\n    // If ordered is not set, returns an object mapping from ID to doc (sorter, skip\n    // and limit should not be set).\n    //\n    // If ordered is set and this cursor is a $near geoquery, then this function\n    // will use an _IdMap to track each distance from the $near argument point in\n    // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n    // argument, this function will clear it and use it for this purpose (otherwise\n    // it will just create its own _IdMap). The observeChanges implementation uses\n    // this to remember the distances after this function returns.\n    _LocalCollection.Cursor.prototype._getRawObjects = function (options) {\n      var self = this;\n      options = options || {};\n\n      // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n      // compatible\n      var results = options.ordered ? [] : new _LocalCollection._IdMap();\n\n      // fast path for single ID value\n      if (self._selectorId !== undefined) {\n        // If you have non-zero skip and ask for a single id, you get\n        // nothing. This is so it matches the behavior of the '{_id: foo}'\n        // path.\n        if (self.skip) return results;\n\n        var selectedDoc = self.collection._docs.get(self._selectorId);\n        if (selectedDoc) {\n          if (options.ordered) results.push(selectedDoc);else results.set(self._selectorId, selectedDoc);\n        }\n        return results;\n      }\n\n      // slow path for arbitrary selector, sort, skip, limit\n\n      // in the observeChanges case, distances is actually part of the \"query\" (ie,\n      // live results set) object.  in other cases, distances is only used inside\n      // this function.\n      var distances;\n      if (self.matcher.hasGeoQuery() && options.ordered) {\n        if (options.distances) {\n          distances = options.distances;\n          distances.clear();\n        } else {\n          distances = new _LocalCollection._IdMap();\n        }\n      }\n\n      self.collection._docs.forEach(function (doc, id) {\n        var matchResult = self.matcher.documentMatches(doc);\n        if (matchResult.result) {\n          if (options.ordered) {\n            results.push(doc);\n            if (distances && matchResult.distance !== undefined) distances.set(id, matchResult.distance);\n          } else {\n            results.set(id, doc);\n          }\n        }\n        // Fast path for limited unsorted queries.\n        // XXX 'length' check here seems wrong for ordered\n        if (self.limit && !self.skip && !self.sorter && results.length === self.limit) return false; // break\n        return true; // continue\n      });\n\n      if (!options.ordered) return results;\n\n      if (self.sorter) {\n        var comparator = self.sorter.getComparator({ distances: distances });\n        results.sort(comparator);\n      }\n\n      var idx_start = self.skip || 0;\n      var idx_end = self.limit ? self.limit + idx_start : results.length;\n      return results.slice(idx_start, idx_end);\n    };\n\n    // XXX Maybe we need a version of observe that just calls a callback if\n    // anything changed.\n    _LocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {\n      var self = this;\n\n      if (Tracker.active) {\n        var v = new Tracker.Dependency();\n        v.depend();\n        var notifyChange = _.bind(v.changed, v);\n\n        var options = {\n          _suppress_initial: true,\n          _allow_unordered: _allow_unordered\n        };\n        _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'], function (fnName) {\n          if (changers[fnName]) options[fnName] = notifyChange;\n        });\n\n        // observeChanges will stop() when this computation is invalidated\n        self.observeChanges(options);\n      }\n    };\n\n    // XXX enforce rule that field names can't start with '$' or contain '.'\n    // (real mongodb does in fact enforce this)\n    // XXX possibly enforce that 'undefined' does not appear (we assume\n    // this in our handling of null and $exists)\n    _LocalCollection.prototype.insert = function (doc, callback) {\n      var self = this;\n      doc = EJSON.clone(doc);\n\n      if (!_.has(doc, '_id')) {\n        // if you really want to use ObjectIDs, set this global.\n        // Mongo.Collection specifies its own ids and does not use this code.\n        doc._id = _LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n      }\n      var id = doc._id;\n\n      if (self._docs.has(id)) throw MinimongoError(\"Duplicate _id '\" + id + \"'\");\n\n      self._saveOriginal(id, undefined);\n      self._docs.set(id, doc);\n\n      var queriesToRecompute = [];\n      // trigger live queries that match\n      for (var qid in self.queries) {\n        var query = self.queries[qid];\n        if (query.dirty) continue;\n        var matchResult = query.matcher.documentMatches(doc);\n        if (matchResult.result) {\n          if (query.distances && matchResult.distance !== undefined) query.distances.set(id, matchResult.distance);\n          if (query.cursor.skip || query.cursor.limit) queriesToRecompute.push(qid);else _LocalCollection._insertInResults(query, doc);\n        }\n      }\n\n      _.each(queriesToRecompute, function (qid) {\n        if (self.queries[qid]) self._recomputeResults(self.queries[qid]);\n      });\n      self._observeQueue.drain();\n\n      // Defer because the caller likely doesn't expect the callback to be run\n      // immediately.\n      if (callback) Meteor.defer(function () {\n        callback(null, id);\n      });\n      return id;\n    };\n\n    // Iterates over a subset of documents that could match selector; calls\n    // f(doc, id) on each of them.  Specifically, if selector specifies\n    // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n    // same object that is in _docs.\n    _LocalCollection.prototype._eachPossiblyMatchingDoc = function (selector, f) {\n      var self = this;\n      var specificIds = _LocalCollection._idsMatchedBySelector(selector);\n      if (specificIds) {\n        for (var i = 0; i < specificIds.length; ++i) {\n          var id = specificIds[i];\n          var doc = self._docs.get(id);\n          if (doc) {\n            var breakIfFalse = f(doc, id);\n            if (breakIfFalse === false) break;\n          }\n        }\n      } else {\n        self._docs.forEach(f);\n      }\n    };\n\n    _LocalCollection.prototype.remove = function (selector, callback) {\n      var self = this;\n\n      // Easy special case: if we're not calling observeChanges callbacks and we're\n      // not saving originals and we got asked to remove everything, then just empty\n      // everything directly.\n      if (self.paused && !self._savedOriginals && EJSON.equals(selector, {})) {\n        var result = self._docs.size();\n        self._docs.clear();\n        _.each(self.queries, function (query) {\n          if (query.ordered) {\n            query.results = [];\n          } else {\n            query.results.clear();\n          }\n        });\n        if (callback) {\n          Meteor.defer(function () {\n            callback(null, result);\n          });\n        }\n        return result;\n      }\n\n      var matcher = new Minimongo.Matcher(selector);\n      var remove = [];\n      self._eachPossiblyMatchingDoc(selector, function (doc, id) {\n        if (matcher.documentMatches(doc).result) remove.push(id);\n      });\n\n      var queriesToRecompute = [];\n      var queryRemove = [];\n      for (var i = 0; i < remove.length; i++) {\n        var removeId = remove[i];\n        var removeDoc = self._docs.get(removeId);\n        _.each(self.queries, function (query, qid) {\n          if (query.dirty) return;\n\n          if (query.matcher.documentMatches(removeDoc).result) {\n            if (query.cursor.skip || query.cursor.limit) queriesToRecompute.push(qid);else queryRemove.push({ qid: qid, doc: removeDoc });\n          }\n        });\n        self._saveOriginal(removeId, removeDoc);\n        self._docs.remove(removeId);\n      }\n\n      // run live query callbacks _after_ we've removed the documents.\n      _.each(queryRemove, function (remove) {\n        var query = self.queries[remove.qid];\n        if (query) {\n          query.distances && query.distances.remove(remove.doc._id);\n          _LocalCollection._removeFromResults(query, remove.doc);\n        }\n      });\n      _.each(queriesToRecompute, function (qid) {\n        var query = self.queries[qid];\n        if (query) self._recomputeResults(query);\n      });\n      self._observeQueue.drain();\n      result = remove.length;\n      if (callback) Meteor.defer(function () {\n        callback(null, result);\n      });\n      return result;\n    };\n\n    // XXX atomicity: if multi is true, and one modification fails, do\n    // we rollback the whole operation, or what?\n    _LocalCollection.prototype.update = function (selector, mod, options, callback) {\n      var self = this;\n      if (!callback && options instanceof Function) {\n        callback = options;\n        options = null;\n      }\n      if (!options) options = {};\n\n      var matcher = new Minimongo.Matcher(selector);\n\n      // Save the original results of any query that we might need to\n      // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n      // it. (We don't need to save the original results of paused queries because\n      // they already have a resultsSnapshot and we won't be diffing in\n      // _recomputeResults.)\n      var qidToOriginalResults = {};\n      // We should only clone each document once, even if it appears in multiple queries\n      var docMap = new _LocalCollection._IdMap();\n      var idsMatchedBySelector = _LocalCollection._idsMatchedBySelector(selector);\n\n      _.each(self.queries, function (query, qid) {\n        if ((query.cursor.skip || query.cursor.limit) && !self.paused) {\n          // Catch the case of a reactive `count()` on a cursor with skip\n          // or limit, which registers an unordered observe. This is a\n          // pretty rare case, so we just clone the entire result set with\n          // no optimizations for documents that appear in these result\n          // sets and other queries.\n          if (query.results instanceof _LocalCollection._IdMap) {\n            qidToOriginalResults[qid] = query.results.clone();\n            return;\n          }\n\n          if (!(query.results instanceof Array)) {\n            throw new Error(\"Assertion failed: query.results not an array\");\n          }\n\n          // Clones a document to be stored in `qidToOriginalResults`\n          // because it may be modified before the new and old result sets\n          // are diffed. But if we know exactly which document IDs we're\n          // going to modify, then we only need to clone those.\n          var memoizedCloneIfNeeded = function memoizedCloneIfNeeded(doc) {\n            if (docMap.has(doc._id)) {\n              return docMap.get(doc._id);\n            } else {\n              var docToMemoize;\n\n              if (idsMatchedBySelector && !_.any(idsMatchedBySelector, function (id) {\n                return EJSON.equals(id, doc._id);\n              })) {\n                docToMemoize = doc;\n              } else {\n                docToMemoize = EJSON.clone(doc);\n              }\n\n              docMap.set(doc._id, docToMemoize);\n              return docToMemoize;\n            }\n          };\n\n          qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n        }\n      });\n      var recomputeQids = {};\n\n      var updateCount = 0;\n\n      self._eachPossiblyMatchingDoc(selector, function (doc, id) {\n        var queryResult = matcher.documentMatches(doc);\n        if (queryResult.result) {\n          // XXX Should we save the original even if mod ends up being a no-op?\n          self._saveOriginal(id, doc);\n          self._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);\n          ++updateCount;\n          if (!options.multi) return false; // break\n        }\n        return true;\n      });\n\n      _.each(recomputeQids, function (dummy, qid) {\n        var query = self.queries[qid];\n        if (query) self._recomputeResults(query, qidToOriginalResults[qid]);\n      });\n      self._observeQueue.drain();\n\n      // If we are doing an upsert, and we didn't modify any documents yet, then\n      // it's time to do an insert. Figure out what document we are inserting, and\n      // generate an id for it.\n      var insertedId;\n      if (updateCount === 0 && options.upsert) {\n        var newDoc = _LocalCollection._removeDollarOperators(selector);\n        _LocalCollection._modify(newDoc, mod, { isInsert: true });\n        if (!newDoc._id && options.insertedId) newDoc._id = options.insertedId;\n        insertedId = self.insert(newDoc);\n        updateCount = 1;\n      }\n\n      // Return the number of affected documents, or in the upsert case, an object\n      // containing the number of affected docs and the id of the doc that was\n      // inserted, if any.\n      var result;\n      if (options._returnObject) {\n        result = {\n          numberAffected: updateCount\n        };\n        if (insertedId !== undefined) result.insertedId = insertedId;\n      } else {\n        result = updateCount;\n      }\n\n      if (callback) Meteor.defer(function () {\n        callback(null, result);\n      });\n      return result;\n    };\n\n    // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n    // equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:\n    // true }).\n    _LocalCollection.prototype.upsert = function (selector, mod, options, callback) {\n      var self = this;\n      if (!callback && typeof options === \"function\") {\n        callback = options;\n        options = {};\n      }\n      return self.update(selector, mod, _.extend({}, options, {\n        upsert: true,\n        _returnObject: true\n      }), callback);\n    };\n\n    _LocalCollection.prototype._modifyAndNotify = function (doc, mod, recomputeQids, arrayIndices) {\n      var self = this;\n\n      var matched_before = {};\n      for (var qid in self.queries) {\n        var query = self.queries[qid];\n        if (query.dirty) continue;\n\n        if (query.ordered) {\n          matched_before[qid] = query.matcher.documentMatches(doc).result;\n        } else {\n          // Because we don't support skip or limit (yet) in unordered queries, we\n          // can just do a direct lookup.\n          matched_before[qid] = query.results.has(doc._id);\n        }\n      }\n\n      var old_doc = EJSON.clone(doc);\n\n      _LocalCollection._modify(doc, mod, { arrayIndices: arrayIndices });\n\n      for (qid in self.queries) {\n        query = self.queries[qid];\n        if (query.dirty) continue;\n\n        var before = matched_before[qid];\n        var afterMatch = query.matcher.documentMatches(doc);\n        var after = afterMatch.result;\n        if (after && query.distances && afterMatch.distance !== undefined) query.distances.set(doc._id, afterMatch.distance);\n\n        if (query.cursor.skip || query.cursor.limit) {\n          // We need to recompute any query where the doc may have been in the\n          // cursor's window either before or after the update. (Note that if skip\n          // or limit is set, \"before\" and \"after\" being true do not necessarily\n          // mean that the document is in the cursor's output after skip/limit is\n          // applied... but if they are false, then the document definitely is NOT\n          // in the output. So it's safe to skip recompute if neither before or\n          // after are true.)\n          if (before || after) recomputeQids[qid] = true;\n        } else if (before && !after) {\n          _LocalCollection._removeFromResults(query, doc);\n        } else if (!before && after) {\n          _LocalCollection._insertInResults(query, doc);\n        } else if (before && after) {\n          _LocalCollection._updateInResults(query, doc, old_doc);\n        }\n      }\n    };\n\n    // XXX the sorted-query logic below is laughably inefficient. we'll\n    // need to come up with a better datastructure for this.\n    //\n    // XXX the logic for observing with a skip or a limit is even more\n    // laughably inefficient. we recompute the whole results every time!\n\n    _LocalCollection._insertInResults = function (query, doc) {\n      var fields = EJSON.clone(doc);\n      delete fields._id;\n      if (query.ordered) {\n        if (!query.sorter) {\n          query.addedBefore(doc._id, query.projectionFn(fields), null);\n          query.results.push(doc);\n        } else {\n          var i = _LocalCollection._insertInSortedList(query.sorter.getComparator({ distances: query.distances }), query.results, doc);\n          var next = query.results[i + 1];\n          if (next) next = next._id;else next = null;\n          query.addedBefore(doc._id, query.projectionFn(fields), next);\n        }\n        query.added(doc._id, query.projectionFn(fields));\n      } else {\n        query.added(doc._id, query.projectionFn(fields));\n        query.results.set(doc._id, doc);\n      }\n    };\n\n    _LocalCollection._removeFromResults = function (query, doc) {\n      if (query.ordered) {\n        var i = _LocalCollection._findInOrderedResults(query, doc);\n        query.removed(doc._id);\n        query.results.splice(i, 1);\n      } else {\n        var id = doc._id; // in case callback mutates doc\n        query.removed(doc._id);\n        query.results.remove(id);\n      }\n    };\n\n    _LocalCollection._updateInResults = function (query, doc, old_doc) {\n      if (!EJSON.equals(doc._id, old_doc._id)) throw new Error(\"Can't change a doc's _id while updating\");\n      var projectionFn = query.projectionFn;\n      var changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));\n\n      if (!query.ordered) {\n        if (!_.isEmpty(changedFields)) {\n          query.changed(doc._id, changedFields);\n          query.results.set(doc._id, doc);\n        }\n        return;\n      }\n\n      var orig_idx = _LocalCollection._findInOrderedResults(query, doc);\n\n      if (!_.isEmpty(changedFields)) query.changed(doc._id, changedFields);\n      if (!query.sorter) return;\n\n      // just take it out and put it back in again, and see if the index\n      // changes\n      query.results.splice(orig_idx, 1);\n      var new_idx = _LocalCollection._insertInSortedList(query.sorter.getComparator({ distances: query.distances }), query.results, doc);\n      if (orig_idx !== new_idx) {\n        var next = query.results[new_idx + 1];\n        if (next) next = next._id;else next = null;\n        query.movedBefore && query.movedBefore(doc._id, next);\n      }\n    };\n\n    // Recomputes the results of a query and runs observe callbacks for the\n    // difference between the previous results and the current results (unless\n    // paused). Used for skip/limit queries.\n    //\n    // When this is used by insert or remove, it can just use query.results for the\n    // old results (and there's no need to pass in oldResults), because these\n    // operations don't mutate the documents in the collection. Update needs to pass\n    // in an oldResults which was deep-copied before the modifier was applied.\n    //\n    // oldResults is guaranteed to be ignored if the query is not paused.\n    _LocalCollection.prototype._recomputeResults = function (query, oldResults) {\n      var self = this;\n      if (self.paused) {\n        // There's no reason to recompute the results now as we're still paused.\n        // By flagging the query as \"dirty\", the recompute will be performed\n        // when resumeObservers is called.\n        query.dirty = true;\n        return;\n      }\n\n      if (!self.paused && !oldResults) oldResults = query.results;\n      if (query.distances) query.distances.clear();\n      query.results = query.cursor._getRawObjects({\n        ordered: query.ordered, distances: query.distances });\n\n      if (!self.paused) {\n        _LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, { projectionFn: query.projectionFn });\n      }\n    };\n\n    _LocalCollection._findInOrderedResults = function (query, doc) {\n      if (!query.ordered) throw new Error(\"Can't call _findInOrderedResults on unordered query\");\n      for (var i = 0; i < query.results.length; i++) {\n        if (query.results[i] === doc) return i;\n      }throw Error(\"object missing from query\");\n    };\n\n    // This binary search puts a value between any equal values, and the first\n    // lesser value.\n    _LocalCollection._binarySearch = function (cmp, array, value) {\n      var first = 0,\n          rangeLength = array.length;\n\n      while (rangeLength > 0) {\n        var halfRange = Math.floor(rangeLength / 2);\n        if (cmp(value, array[first + halfRange]) >= 0) {\n          first += halfRange + 1;\n          rangeLength -= halfRange + 1;\n        } else {\n          rangeLength = halfRange;\n        }\n      }\n      return first;\n    };\n\n    _LocalCollection._insertInSortedList = function (cmp, array, value) {\n      if (array.length === 0) {\n        array.push(value);\n        return 0;\n      }\n\n      var idx = _LocalCollection._binarySearch(cmp, array, value);\n      array.splice(idx, 0, value);\n      return idx;\n    };\n\n    // To track what documents are affected by a piece of code, call saveOriginals()\n    // before it and retrieveOriginals() after it. retrieveOriginals returns an\n    // object whose keys are the ids of the documents that were affected since the\n    // call to saveOriginals(), and the values are equal to the document's contents\n    // at the time of saveOriginals. (In the case of an inserted document, undefined\n    // is the value.) You must alternate between calls to saveOriginals() and\n    // retrieveOriginals().\n    _LocalCollection.prototype.saveOriginals = function () {\n      var self = this;\n      if (self._savedOriginals) throw new Error(\"Called saveOriginals twice without retrieveOriginals\");\n      self._savedOriginals = new _LocalCollection._IdMap();\n    };\n    _LocalCollection.prototype.retrieveOriginals = function () {\n      var self = this;\n      if (!self._savedOriginals) throw new Error(\"Called retrieveOriginals without saveOriginals\");\n\n      var originals = self._savedOriginals;\n      self._savedOriginals = null;\n      return originals;\n    };\n\n    _LocalCollection.prototype._saveOriginal = function (id, doc) {\n      var self = this;\n      // Are we even trying to save originals?\n      if (!self._savedOriginals) return;\n      // Have we previously mutated the original (and so 'doc' is not actually\n      // original)?  (Note the 'has' check rather than truth: we store undefined\n      // here for inserted docs!)\n      if (self._savedOriginals.has(id)) return;\n      self._savedOriginals.set(id, EJSON.clone(doc));\n    };\n\n    // Pause the observers. No callbacks from observers will fire until\n    // 'resumeObservers' is called.\n    _LocalCollection.prototype.pauseObservers = function () {\n      // No-op if already paused.\n      if (this.paused) return;\n\n      // Set the 'paused' flag such that new observer messages don't fire.\n      this.paused = true;\n\n      // Take a snapshot of the query results for each query.\n      for (var qid in this.queries) {\n        var query = this.queries[qid];\n\n        query.resultsSnapshot = EJSON.clone(query.results);\n      }\n    };\n\n    // Resume the observers. Observers immediately receive change\n    // notifications to bring them to the current state of the\n    // database. Note that this is not just replaying all the changes that\n    // happened during the pause, it is a smarter 'coalesced' diff.\n    _LocalCollection.prototype.resumeObservers = function () {\n      var self = this;\n      // No-op if not paused.\n      if (!this.paused) return;\n\n      // Unset the 'paused' flag. Make sure to do this first, otherwise\n      // observer methods won't actually fire when we trigger them.\n      this.paused = false;\n\n      for (var qid in this.queries) {\n        var query = self.queries[qid];\n        if (query.dirty) {\n          query.dirty = false;\n          // re-compute results will perform `LocalCollection._diffQueryChanges` automatically.\n          self._recomputeResults(query, query.resultsSnapshot);\n        } else {\n          // Diff the current results against the snapshot and send to observers.\n          // pass the query object for its observer callbacks.\n          _LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, { projectionFn: query.projectionFn });\n        }\n        query.resultsSnapshot = null;\n      }\n      self._observeQueue.drain();\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/wrap_transform.js                                                                       //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Wrap a transform function to return objects that have the _id field\n    // of the untransformed document. This ensures that subsystems such as\n    // the observe-sequence package that call `observe` can keep track of\n    // the documents identities.\n    //\n    // - Require that it returns objects\n    // - If the return value has an _id field, verify that it matches the\n    //   original _id field\n    // - If the return value doesn't have an _id field, add it back.\n    _LocalCollection.wrapTransform = function (transform) {\n      if (!transform) return null;\n\n      // No need to doubly-wrap transforms.\n      if (transform.__wrappedTransform__) return transform;\n\n      var wrapped = function wrapped(doc) {\n        if (!_.has(doc, '_id')) {\n          // XXX do we ever have a transform on the oplog's collection? because that\n          // collection has no _id.\n          throw new Error(\"can only transform documents with _id\");\n        }\n\n        var id = doc._id;\n        // XXX consider making tracker a weak dependency and checking Package.tracker here\n        var transformed = Tracker.nonreactive(function () {\n          return transform(doc);\n        });\n\n        if (!isPlainObject(transformed)) {\n          throw new Error(\"transform must return object\");\n        }\n\n        if (_.has(transformed, '_id')) {\n          if (!EJSON.equals(transformed._id, id)) {\n            throw new Error(\"transformed document can't have different _id\");\n          }\n        } else {\n          transformed._id = id;\n        }\n        return transformed;\n      };\n      wrapped.__wrappedTransform__ = true;\n      return wrapped;\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/helpers.js                                                                              //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as\n    // arrays.\n    // XXX maybe this should be EJSON.isArray\n    isArray = function isArray(x) {\n      return _.isArray(x) && !EJSON.isBinary(x);\n    };\n\n    // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n    // RegExp\n    // XXX note that _type(undefined) === 3!!!!\n    isPlainObject = _LocalCollection._isPlainObject = function (x) {\n      return x && _LocalCollection._f._type(x) === 3;\n    };\n\n    isIndexable = function isIndexable(x) {\n      return isArray(x) || isPlainObject(x);\n    };\n\n    // Returns true if this is an object with at least one key and all keys begin\n    // with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n    // others don't.\n    isOperatorObject = function isOperatorObject(valueSelector, inconsistentOK) {\n      if (!isPlainObject(valueSelector)) return false;\n\n      var theseAreOperators = undefined;\n      _.each(valueSelector, function (value, selKey) {\n        var thisIsOperator = selKey.substr(0, 1) === '$';\n        if (theseAreOperators === undefined) {\n          theseAreOperators = thisIsOperator;\n        } else if (theseAreOperators !== thisIsOperator) {\n          if (!inconsistentOK) throw new Error(\"Inconsistent operator: \" + JSON.stringify(valueSelector));\n          theseAreOperators = false;\n        }\n      });\n      return !!theseAreOperators; // {} has no operators\n    };\n\n    // string can be converted to integer\n    isNumericKey = function isNumericKey(s) {\n      return (/^[0-9]+$/.test(s)\n      );\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/selector.js                                                                             //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // The minimongo selector compiler!\n\n    // Terminology:\n    //  - a \"selector\" is the EJSON object representing a selector\n    //  - a \"matcher\" is its compiled form (whether a full Minimongo.Matcher\n    //    object or one of the component lambdas that matches parts of it)\n    //  - a \"result object\" is an object with a \"result\" field and maybe\n    //    distance and arrayIndices.\n    //  - a \"branched value\" is an object with a \"value\" field and maybe\n    //    \"dontIterate\" and \"arrayIndices\".\n    //  - a \"document\" is a top-level object that can be stored in a collection.\n    //  - a \"lookup function\" is a function that takes in a document and returns\n    //    an array of \"branched values\".\n    //  - a \"branched matcher\" maps from an array of branched values to a result\n    //    object.\n    //  - an \"element matcher\" maps from a single value to a bool.\n\n    // Main entry point.\n    //   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n    //   if (matcher.documentMatches({a: 7})) ...\n    Minimongo.Matcher = function (selector) {\n      var self = this;\n      // A set (object mapping string -> *) of all of the document paths looked\n      // at by the selector. Also includes the empty string if it may look at any\n      // path (eg, $where).\n      self._paths = {};\n      // Set to true if compilation finds a $near.\n      self._hasGeoQuery = false;\n      // Set to true if compilation finds a $where.\n      self._hasWhere = false;\n      // Set to false if compilation finds anything other than a simple equality or\n      // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with\n      // scalars as operands.\n      self._isSimple = true;\n      // Set to a dummy document which always matches this Matcher. Or set to null\n      // if such document is too hard to find.\n      self._matchingDocument = undefined;\n      // A clone of the original selector. It may just be a function if the user\n      // passed in a function; otherwise is definitely an object (eg, IDs are\n      // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n      // Sorter._useWithMatcher.\n      self._selector = null;\n      self._docMatcher = self._compileSelector(selector);\n    };\n\n    _.extend(Minimongo.Matcher.prototype, {\n      documentMatches: function documentMatches(doc) {\n        if (!doc || (typeof doc === 'undefined' ? 'undefined' : _typeof(doc)) !== \"object\") {\n          throw Error(\"documentMatches needs a document\");\n        }\n        return this._docMatcher(doc);\n      },\n      hasGeoQuery: function hasGeoQuery() {\n        return this._hasGeoQuery;\n      },\n      hasWhere: function hasWhere() {\n        return this._hasWhere;\n      },\n      isSimple: function isSimple() {\n        return this._isSimple;\n      },\n\n      // Given a selector, return a function that takes one argument, a\n      // document. It returns a result object.\n      _compileSelector: function _compileSelector(selector) {\n        var self = this;\n        // you can pass a literal function instead of a selector\n        if (selector instanceof Function) {\n          self._isSimple = false;\n          self._selector = selector;\n          self._recordPathUsed('');\n          return function (doc) {\n            return { result: !!selector.call(doc) };\n          };\n        }\n\n        // shorthand -- scalars match _id\n        if (_LocalCollection._selectorIsId(selector)) {\n          self._selector = { _id: selector };\n          self._recordPathUsed('_id');\n          return function (doc) {\n            return { result: EJSON.equals(doc._id, selector) };\n          };\n        }\n\n        // protect against dangerous selectors.  falsey and {_id: falsey} are both\n        // likely programmer error, and not what you want, particularly for\n        // destructive operations.\n        if (!selector || '_id' in selector && !selector._id) {\n          self._isSimple = false;\n          return nothingMatcher;\n        }\n\n        // Top level can't be an array or true or binary.\n        if (typeof selector === 'boolean' || isArray(selector) || EJSON.isBinary(selector)) throw new Error(\"Invalid selector: \" + selector);\n\n        self._selector = EJSON.clone(selector);\n        return compileDocumentSelector(selector, self, { isRoot: true });\n      },\n      _recordPathUsed: function _recordPathUsed(path) {\n        this._paths[path] = true;\n      },\n      // Returns a list of key paths the given selector is looking for. It includes\n      // the empty string if there is a $where.\n      _getPaths: function _getPaths() {\n        return _.keys(this._paths);\n      }\n    });\n\n    // Takes in a selector that could match a full document (eg, the original\n    // selector). Returns a function mapping document->result object.\n    //\n    // matcher is the Matcher object we are compiling.\n    //\n    // If this is the root document selector (ie, not wrapped in $and or the like),\n    // then isRoot is true. (This is used by $near.)\n    var compileDocumentSelector = function compileDocumentSelector(docSelector, matcher, options) {\n      options = options || {};\n      var docMatchers = [];\n      _.each(docSelector, function (subSelector, key) {\n        if (key.substr(0, 1) === '$') {\n          // Outer operators are either logical operators (they recurse back into\n          // this function), or $where.\n          if (!_.has(LOGICAL_OPERATORS, key)) throw new Error(\"Unrecognized logical operator: \" + key);\n          matcher._isSimple = false;\n          docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch));\n        } else {\n          // Record this path, but only if we aren't in an elemMatcher, since in an\n          // elemMatch this is a path inside an object in an array, not in the doc\n          // root.\n          if (!options.inElemMatch) matcher._recordPathUsed(key);\n          var lookUpByIndex = _makeLookupFunction(key);\n          var valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);\n          docMatchers.push(function (doc) {\n            var branchValues = lookUpByIndex(doc);\n            return valueMatcher(branchValues);\n          });\n        }\n      });\n\n      return andDocumentMatchers(docMatchers);\n    };\n\n    // Takes in a selector that could match a key-indexed value in a document; eg,\n    // {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n    // indicate equality).  Returns a branched matcher: a function mapping\n    // [branched value]->result object.\n    var compileValueSelector = function compileValueSelector(valueSelector, matcher, isRoot) {\n      if (valueSelector instanceof RegExp) {\n        matcher._isSimple = false;\n        return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));\n      } else if (isOperatorObject(valueSelector)) {\n        return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n      } else {\n        return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));\n      }\n    };\n\n    // Given an element matcher (which evaluates a single value), returns a branched\n    // value (which evaluates the element matcher on all the branches and returns a\n    // more structured return value possibly including arrayIndices).\n    var convertElementMatcherToBranchedMatcher = function convertElementMatcherToBranchedMatcher(elementMatcher, options) {\n      options = options || {};\n      return function (branches) {\n        var expanded = branches;\n        if (!options.dontExpandLeafArrays) {\n          expanded = expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n        }\n        var ret = {};\n        ret.result = _.any(expanded, function (element) {\n          var matched = elementMatcher(element.value);\n\n          // Special case for $elemMatch: it means \"true, and use this as an array\n          // index if I didn't already have one\".\n          if (typeof matched === 'number') {\n            // XXX This code dates from when we only stored a single array index\n            // (for the outermost array). Should we be also including deeper array\n            // indices from the $elemMatch match?\n            if (!element.arrayIndices) element.arrayIndices = [matched];\n            matched = true;\n          }\n\n          // If some element matched, and it's tagged with array indices, include\n          // those indices in our result object.\n          if (matched && element.arrayIndices) ret.arrayIndices = element.arrayIndices;\n\n          return matched;\n        });\n        return ret;\n      };\n    };\n\n    // Takes a RegExp object and returns an element matcher.\n    regexpElementMatcher = function regexpElementMatcher(regexp) {\n      return function (value) {\n        if (value instanceof RegExp) {\n          // Comparing two regexps means seeing if the regexps are identical\n          // (really!). Underscore knows how.\n          return _.isEqual(value, regexp);\n        }\n        // Regexps only work against strings.\n        if (typeof value !== 'string') return false;\n\n        // Reset regexp's state to avoid inconsistent matching for objects with the\n        // same value on consecutive calls of regexp.test. This happens only if the\n        // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n        // which we should *not* change the lastIndex but MongoDB doesn't support\n        // either of these flags.\n        regexp.lastIndex = 0;\n\n        return regexp.test(value);\n      };\n    };\n\n    // Takes something that is not an operator object and returns an element matcher\n    // for equality with that thing.\n    equalityElementMatcher = function equalityElementMatcher(elementSelector) {\n      if (isOperatorObject(elementSelector)) throw Error(\"Can't create equalityValueSelector for operator object\");\n\n      // Special-case: null and undefined are equal (if you got undefined in there\n      // somewhere, or if you got it due to some branch being non-existent in the\n      // weird special case), even though they aren't with EJSON.equals.\n      if (elementSelector == null) {\n        // undefined or null\n        return function (value) {\n          return value == null; // undefined or null\n        };\n      }\n\n      return function (value) {\n        return _LocalCollection._f._equal(elementSelector, value);\n      };\n    };\n\n    // Takes an operator object (an object with $ keys) and returns a branched\n    // matcher for it.\n    var operatorBranchedMatcher = function operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n      // Each valueSelector works separately on the various branches.  So one\n      // operator can match one branch and another can match another branch.  This\n      // is OK.\n\n      var operatorMatchers = [];\n      _.each(valueSelector, function (operand, operator) {\n        var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) && _.isNumber(operand);\n        var simpleEquality = _.contains(['$ne', '$eq'], operator) && !_.isObject(operand);\n        var simpleInclusion = _.contains(['$in', '$nin'], operator) && _.isArray(operand) && !_.any(operand, _.isObject);\n\n        if (!(simpleRange || simpleInclusion || simpleEquality)) {\n          matcher._isSimple = false;\n        }\n\n        if (_.has(VALUE_OPERATORS, operator)) {\n          operatorMatchers.push(VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));\n        } else if (_.has(ELEMENT_OPERATORS, operator)) {\n          var options = ELEMENT_OPERATORS[operator];\n          operatorMatchers.push(convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options));\n        } else {\n          throw new Error(\"Unrecognized operator: \" + operator);\n        }\n      });\n\n      return andBranchedMatchers(operatorMatchers);\n    };\n\n    var compileArrayOfDocumentSelectors = function compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n      if (!isArray(selectors) || _.isEmpty(selectors)) throw Error(\"$and/$or/$nor must be nonempty array\");\n      return _.map(selectors, function (subSelector) {\n        if (!isPlainObject(subSelector)) throw Error(\"$or/$and/$nor entries need to be full objects\");\n        return compileDocumentSelector(subSelector, matcher, { inElemMatch: inElemMatch });\n      });\n    };\n\n    // Operators that appear at the top level of a document selector.\n    var LOGICAL_OPERATORS = {\n      $and: function $and(subSelector, matcher, inElemMatch) {\n        var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);\n        return andDocumentMatchers(matchers);\n      },\n\n      $or: function $or(subSelector, matcher, inElemMatch) {\n        var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);\n\n        // Special case: if there is only one matcher, use it directly, *preserving*\n        // any arrayIndices it returns.\n        if (matchers.length === 1) return matchers[0];\n\n        return function (doc) {\n          var result = _.any(matchers, function (f) {\n            return f(doc).result;\n          });\n          // $or does NOT set arrayIndices when it has multiple\n          // sub-expressions. (Tested against MongoDB.)\n          return { result: result };\n        };\n      },\n\n      $nor: function $nor(subSelector, matcher, inElemMatch) {\n        var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);\n        return function (doc) {\n          var result = _.all(matchers, function (f) {\n            return !f(doc).result;\n          });\n          // Never set arrayIndices, because we only match if nothing in particular\n          // \"matched\" (and because this is consistent with MongoDB).\n          return { result: result };\n        };\n      },\n\n      $where: function $where(selectorValue, matcher) {\n        // Record that *any* path may be used.\n        matcher._recordPathUsed('');\n        matcher._hasWhere = true;\n        if (!(selectorValue instanceof Function)) {\n          // XXX MongoDB seems to have more complex logic to decide where or or not\n          // to add \"return\"; not sure exactly what it is.\n          selectorValue = Function(\"obj\", \"return \" + selectorValue);\n        }\n        return function (doc) {\n          // We make the document available as both `this` and `obj`.\n          // XXX not sure what we should do if this throws\n          return { result: selectorValue.call(doc, doc) };\n        };\n      },\n\n      // This is just used as a comment in the query (in MongoDB, it also ends up in\n      // query logs); it has no effect on the actual selection.\n      $comment: function $comment() {\n        return function () {\n          return { result: true };\n        };\n      }\n    };\n\n    // Returns a branched matcher that matches iff the given matcher does not.\n    // Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n    // means that ALL branch values need to fail to match innerBranchedMatcher.\n    var invertBranchedMatcher = function invertBranchedMatcher(branchedMatcher) {\n      return function (branchValues) {\n        var invertMe = branchedMatcher(branchValues);\n        // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n        // say \"update the array element that does not match something\", at least\n        // in mongo-land.\n        return { result: !invertMe.result };\n      };\n    };\n\n    // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n    // document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n    // \"match each branched value independently and combine with\n    // convertElementMatcherToBranchedMatcher\".\n    var VALUE_OPERATORS = {\n      $eq: function $eq(operand) {\n        return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));\n      },\n      $not: function $not(operand, valueSelector, matcher) {\n        return invertBranchedMatcher(compileValueSelector(operand, matcher));\n      },\n      $ne: function $ne(operand) {\n        return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));\n      },\n      $nin: function $nin(operand) {\n        return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n      },\n      $exists: function $exists(operand) {\n        var exists = convertElementMatcherToBranchedMatcher(function (value) {\n          return value !== undefined;\n        });\n        return operand ? exists : invertBranchedMatcher(exists);\n      },\n      // $options just provides options for $regex; its logic is inside $regex\n      $options: function $options(operand, valueSelector) {\n        if (!_.has(valueSelector, '$regex')) throw Error(\"$options needs a $regex\");\n        return everythingMatcher;\n      },\n      // $maxDistance is basically an argument to $near\n      $maxDistance: function $maxDistance(operand, valueSelector) {\n        if (!valueSelector.$near) throw Error(\"$maxDistance needs a $near\");\n        return everythingMatcher;\n      },\n      $all: function $all(operand, valueSelector, matcher) {\n        if (!isArray(operand)) throw Error(\"$all requires array\");\n        // Not sure why, but this seems to be what MongoDB does.\n        if (_.isEmpty(operand)) return nothingMatcher;\n\n        var branchedMatchers = [];\n        _.each(operand, function (criterion) {\n          // XXX handle $all/$elemMatch combination\n          if (isOperatorObject(criterion)) throw Error(\"no $ expressions in $all\");\n          // This is always a regexp or equality selector.\n          branchedMatchers.push(compileValueSelector(criterion, matcher));\n        });\n        // andBranchedMatchers does NOT require all selectors to return true on the\n        // SAME branch.\n        return andBranchedMatchers(branchedMatchers);\n      },\n      $near: function $near(operand, valueSelector, matcher, isRoot) {\n        if (!isRoot) throw Error(\"$near can't be inside another $ operator\");\n        matcher._hasGeoQuery = true;\n\n        // There are two kinds of geodata in MongoDB: coordinate pairs and\n        // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n        // marked with a $geometry property.\n\n        var maxDistance, point, distance;\n        if (isPlainObject(operand) && _.has(operand, '$geometry')) {\n          // GeoJSON \"2dsphere\" mode.\n          maxDistance = operand.$maxDistance;\n          point = operand.$geometry;\n          distance = function distance(value) {\n            // XXX: for now, we don't calculate the actual distance between, say,\n            // polygon and circle. If people care about this use-case it will get\n            // a priority.\n            if (!value || !value.type) return null;\n            if (value.type === \"Point\") {\n              return GeoJSON.pointDistance(point, value);\n            } else {\n              return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;\n            }\n          };\n        } else {\n          maxDistance = valueSelector.$maxDistance;\n          if (!isArray(operand) && !isPlainObject(operand)) throw Error(\"$near argument must be coordinate pair or GeoJSON\");\n          point = pointToArray(operand);\n          distance = function distance(value) {\n            if (!isArray(value) && !isPlainObject(value)) return null;\n            return distanceCoordinatePairs(point, value);\n          };\n        }\n\n        return function (branchedValues) {\n          // There might be multiple points in the document that match the given\n          // field. Only one of them needs to be within $maxDistance, but we need to\n          // evaluate all of them and use the nearest one for the implicit sort\n          // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n          //\n          // Note: This differs from MongoDB's implementation, where a document will\n          // actually show up *multiple times* in the result set, with one entry for\n          // each within-$maxDistance branching point.\n          branchedValues = expandArraysInBranches(branchedValues);\n          var result = { result: false };\n          _.each(branchedValues, function (branch) {\n            var curDistance = distance(branch.value);\n            // Skip branches that aren't real points or are too far away.\n            if (curDistance === null || curDistance > maxDistance) return;\n            // Skip anything that's a tie.\n            if (result.distance !== undefined && result.distance <= curDistance) return;\n            result.result = true;\n            result.distance = curDistance;\n            if (!branch.arrayIndices) delete result.arrayIndices;else result.arrayIndices = branch.arrayIndices;\n          });\n          return result;\n        };\n      }\n    };\n\n    // Helpers for $near.\n    var distanceCoordinatePairs = function distanceCoordinatePairs(a, b) {\n      a = pointToArray(a);\n      b = pointToArray(b);\n      var x = a[0] - b[0];\n      var y = a[1] - b[1];\n      if (_.isNaN(x) || _.isNaN(y)) return null;\n      return Math.sqrt(x * x + y * y);\n    };\n    // Makes sure we get 2 elements array and assume the first one to be x and\n    // the second one to y no matter what user passes.\n    // In case user passes { lon: x, lat: y } returns [x, y]\n    var pointToArray = function pointToArray(point) {\n      return _.map(point, _.identity);\n    };\n\n    // Helper for $lt/$gt/$lte/$gte.\n    var makeInequality = function makeInequality(cmpValueComparator) {\n      return {\n        compileElementSelector: function compileElementSelector(operand) {\n          // Arrays never compare false with non-arrays for any inequality.\n          // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n          //     it seems to have been reverted.\n          //     See https://jira.mongodb.org/browse/SERVER-11444\n          if (isArray(operand)) {\n            return function () {\n              return false;\n            };\n          }\n\n          // Special case: consider undefined and null the same (so true with\n          // $gte/$lte).\n          if (operand === undefined) operand = null;\n\n          var operandType = _LocalCollection._f._type(operand);\n\n          return function (value) {\n            if (value === undefined) value = null;\n            // Comparisons are never true among things of different type (except\n            // null vs undefined).\n            if (_LocalCollection._f._type(value) !== operandType) return false;\n            return cmpValueComparator(_LocalCollection._f._cmp(value, operand));\n          };\n        }\n      };\n    };\n\n    // Each element selector contains:\n    //  - compileElementSelector, a function with args:\n    //    - operand - the \"right hand side\" of the operator\n    //    - valueSelector - the \"context\" for the operator (so that $regex can find\n    //      $options)\n    //    - matcher - the Matcher this is going into (so that $elemMatch can compile\n    //      more things)\n    //    returning a function mapping a single value to bool.\n    //  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n    //    being called\n    //  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n    //    expandArraysInBranches if it is called\n    ELEMENT_OPERATORS = {\n      $lt: makeInequality(function (cmpValue) {\n        return cmpValue < 0;\n      }),\n      $gt: makeInequality(function (cmpValue) {\n        return cmpValue > 0;\n      }),\n      $lte: makeInequality(function (cmpValue) {\n        return cmpValue <= 0;\n      }),\n      $gte: makeInequality(function (cmpValue) {\n        return cmpValue >= 0;\n      }),\n      $mod: {\n        compileElementSelector: function compileElementSelector(operand) {\n          if (!(isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {\n            throw Error(\"argument to $mod must be an array of two numbers\");\n          }\n          // XXX could require to be ints or round or something\n          var divisor = operand[0];\n          var remainder = operand[1];\n          return function (value) {\n            return typeof value === 'number' && value % divisor === remainder;\n          };\n        }\n      },\n      $in: {\n        compileElementSelector: function compileElementSelector(operand) {\n          if (!isArray(operand)) throw Error(\"$in needs an array\");\n\n          var elementMatchers = [];\n          _.each(operand, function (option) {\n            if (option instanceof RegExp) elementMatchers.push(regexpElementMatcher(option));else if (isOperatorObject(option)) throw Error(\"cannot nest $ under $in\");else elementMatchers.push(equalityElementMatcher(option));\n          });\n\n          return function (value) {\n            // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n            if (value === undefined) value = null;\n            return _.any(elementMatchers, function (e) {\n              return e(value);\n            });\n          };\n        }\n      },\n      $size: {\n        // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n        // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n        // possible value.\n        dontExpandLeafArrays: true,\n        compileElementSelector: function compileElementSelector(operand) {\n          if (typeof operand === 'string') {\n            // Don't ask me why, but by experimentation, this seems to be what Mongo\n            // does.\n            operand = 0;\n          } else if (typeof operand !== 'number') {\n            throw Error(\"$size needs a number\");\n          }\n          return function (value) {\n            return isArray(value) && value.length === operand;\n          };\n        }\n      },\n      $type: {\n        // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n        // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n        // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n        // should *not* include it itself.\n        dontIncludeLeafArrays: true,\n        compileElementSelector: function compileElementSelector(operand) {\n          if (typeof operand !== 'number') throw Error(\"$type needs a number\");\n          return function (value) {\n            return value !== undefined && _LocalCollection._f._type(value) === operand;\n          };\n        }\n      },\n      $regex: {\n        compileElementSelector: function compileElementSelector(operand, valueSelector) {\n          if (!(typeof operand === 'string' || operand instanceof RegExp)) throw Error(\"$regex has to be a string or RegExp\");\n\n          var regexp;\n          if (valueSelector.$options !== undefined) {\n            // Options passed in $options (even the empty string) always overrides\n            // options in the RegExp object itself. (See also\n            // Mongo.Collection._rewriteSelector.)\n\n            // Be clear that we only support the JS-supported options, not extended\n            // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n            // by transforming the regexp, but not today...\n            if (/[^gim]/.test(valueSelector.$options)) throw new Error(\"Only the i, m, and g regexp options are supported\");\n\n            var regexSource = operand instanceof RegExp ? operand.source : operand;\n            regexp = new RegExp(regexSource, valueSelector.$options);\n          } else if (operand instanceof RegExp) {\n            regexp = operand;\n          } else {\n            regexp = new RegExp(operand);\n          }\n          return regexpElementMatcher(regexp);\n        }\n      },\n      $elemMatch: {\n        dontExpandLeafArrays: true,\n        compileElementSelector: function compileElementSelector(operand, valueSelector, matcher) {\n          if (!isPlainObject(operand)) throw Error(\"$elemMatch need an object\");\n\n          var subMatcher, isDocMatcher;\n          if (isOperatorObject(_.omit(operand, _.keys(LOGICAL_OPERATORS)), true)) {\n            subMatcher = compileValueSelector(operand, matcher);\n            isDocMatcher = false;\n          } else {\n            // This is NOT the same as compileValueSelector(operand), and not just\n            // because of the slightly different calling convention.\n            // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n            // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n            subMatcher = compileDocumentSelector(operand, matcher, { inElemMatch: true });\n            isDocMatcher = true;\n          }\n\n          return function (value) {\n            if (!isArray(value)) return false;\n            for (var i = 0; i < value.length; ++i) {\n              var arrayElement = value[i];\n              var arg;\n              if (isDocMatcher) {\n                // We can only match {$elemMatch: {b: 3}} against objects.\n                // (We can also match against arrays, if there's numeric indices,\n                // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n                if (!isPlainObject(arrayElement) && !isArray(arrayElement)) return false;\n                arg = arrayElement;\n              } else {\n                // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n                // {a: [8]} but not {a: [[8]]}\n                arg = [{ value: arrayElement, dontIterate: true }];\n              }\n              // XXX support $near in $elemMatch by propagating $distance?\n              if (subMatcher(arg).result) return i; // specially understood to mean \"use as arrayIndices\"\n            }\n            return false;\n          };\n        }\n      }\n    };\n\n    // makeLookupFunction(key) returns a lookup function.\n    //\n    // A lookup function takes in a document and returns an array of matching\n    // branches.  If no arrays are found while looking up the key, this array will\n    // have exactly one branches (possibly 'undefined', if some segment of the key\n    // was not found).\n    //\n    // If arrays are found in the middle, this can have more than one element, since\n    // we \"branch\". When we \"branch\", if there are more key segments to look up,\n    // then we only pursue branches that are plain objects (not arrays or scalars).\n    // This means we can actually end up with no branches!\n    //\n    // We do *NOT* branch on arrays that are found at the end (ie, at the last\n    // dotted member of the key). We just return that array; if you want to\n    // effectively \"branch\" over the array's values, post-process the lookup\n    // function with expandArraysInBranches.\n    //\n    // Each branch is an object with keys:\n    //  - value: the value at the branch\n    //  - dontIterate: an optional bool; if true, it means that 'value' is an array\n    //    that expandArraysInBranches should NOT expand. This specifically happens\n    //    when there is a numeric index in the key, and ensures the\n    //    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n    //    match {a: [[5]]}.\n    //  - arrayIndices: if any array indexing was done during lookup (either due to\n    //    explicit numeric indices or implicit branching), this will be an array of\n    //    the array indices used, from outermost to innermost; it is falsey or\n    //    absent if no array index is used. If an explicit numeric index is used,\n    //    the index will be followed in arrayIndices by the string 'x'.\n    //\n    //    Note: arrayIndices is used for two purposes. First, it is used to\n    //    implement the '$' modifier feature, which only ever looks at its first\n    //    element.\n    //\n    //    Second, it is used for sort key generation, which needs to be able to tell\n    //    the difference between different paths. Moreover, it needs to\n    //    differentiate between explicit and implicit branching, which is why\n    //    there's the somewhat hacky 'x' entry: this means that explicit and\n    //    implicit array lookups will have different full arrayIndices paths. (That\n    //    code only requires that different paths have different arrayIndices; it\n    //    doesn't actually \"parse\" arrayIndices. As an alternative, arrayIndices\n    //    could contain objects with flags like \"implicit\", but I think that only\n    //    makes the code surrounding them more complex.)\n    //\n    //    (By the way, this field ends up getting passed around a lot without\n    //    cloning, so never mutate any arrayIndices field/var in this package!)\n    //\n    //\n    // At the top level, you may only pass in a plain object or array.\n    //\n    // See the test 'minimongo - lookup' for some examples of what lookup functions\n    // return.\n    _makeLookupFunction = function makeLookupFunction(key, options) {\n      options = options || {};\n      var parts = key.split('.');\n      var firstPart = parts.length ? parts[0] : '';\n      var firstPartIsNumeric = isNumericKey(firstPart);\n      var nextPartIsNumeric = parts.length >= 2 && isNumericKey(parts[1]);\n      var lookupRest;\n      if (parts.length > 1) {\n        lookupRest = _makeLookupFunction(parts.slice(1).join('.'));\n      }\n\n      var omitUnnecessaryFields = function omitUnnecessaryFields(retVal) {\n        if (!retVal.dontIterate) delete retVal.dontIterate;\n        if (retVal.arrayIndices && !retVal.arrayIndices.length) delete retVal.arrayIndices;\n        return retVal;\n      };\n\n      // Doc will always be a plain object or an array.\n      // apply an explicit numeric index, an array.\n      return function (doc, arrayIndices) {\n        if (!arrayIndices) arrayIndices = [];\n\n        if (isArray(doc)) {\n          // If we're being asked to do an invalid lookup into an array (non-integer\n          // or out-of-bounds), return no results (which is different from returning\n          // a single undefined result, in that `null` equality checks won't match).\n          if (!(firstPartIsNumeric && firstPart < doc.length)) return [];\n\n          // Remember that we used this array index. Include an 'x' to indicate that\n          // the previous index came from being considered as an explicit array\n          // index (not branching).\n          arrayIndices = arrayIndices.concat(+firstPart, 'x');\n        }\n\n        // Do our first lookup.\n        var firstLevel = doc[firstPart];\n\n        // If there is no deeper to dig, return what we found.\n        //\n        // If what we found is an array, most value selectors will choose to treat\n        // the elements of the array as matchable values in their own right, but\n        // that's done outside of the lookup function. (Exceptions to this are $size\n        // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n        // [[1, 2]]}.)\n        //\n        // That said, if we just did an *explicit* array lookup (on doc) to find\n        // firstLevel, and firstLevel is an array too, we do NOT want value\n        // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n        // So in that case, we mark the return value as \"don't iterate\".\n        if (!lookupRest) {\n          return [omitUnnecessaryFields({\n            value: firstLevel,\n            dontIterate: isArray(doc) && isArray(firstLevel),\n            arrayIndices: arrayIndices })];\n        }\n\n        // We need to dig deeper.  But if we can't, because what we've found is not\n        // an array or plain object, we're done. If we just did a numeric index into\n        // an array, we return nothing here (this is a change in Mongo 2.5 from\n        // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n        // return a single `undefined` (which can, for example, match via equality\n        // with `null`).\n        if (!isIndexable(firstLevel)) {\n          if (isArray(doc)) return [];\n          return [omitUnnecessaryFields({ value: undefined,\n            arrayIndices: arrayIndices })];\n        }\n\n        var result = [];\n        var appendToResult = function appendToResult(more) {\n          Array.prototype.push.apply(result, more);\n        };\n\n        // Dig deeper: look up the rest of the parts on whatever we've found.\n        // (lookupRest is smart enough to not try to do invalid lookups into\n        // firstLevel if it's an array.)\n        appendToResult(lookupRest(firstLevel, arrayIndices));\n\n        // If we found an array, then in *addition* to potentially treating the next\n        // part as a literal integer lookup, we should also \"branch\": try to look up\n        // the rest of the parts on each array element in parallel.\n        //\n        // In this case, we *only* dig deeper into array elements that are plain\n        // objects. (Recall that we only got this far if we have further to dig.)\n        // This makes sense: we certainly don't dig deeper into non-indexable\n        // objects. And it would be weird to dig into an array: it's simpler to have\n        // a rule that explicit integer indexes only apply to an outer array, not to\n        // an array you find after a branching search.\n        //\n        // In the special case of a numeric part in a *sort selector* (not a query\n        // selector), we skip the branching: we ONLY allow the numeric part to mean\n        // \"look up this index\" in that case, not \"also look up this index in all\n        // the elements of the array\".\n        if (isArray(firstLevel) && !(nextPartIsNumeric && options.forSort)) {\n          _.each(firstLevel, function (branch, arrayIndex) {\n            if (isPlainObject(branch)) {\n              appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));\n            }\n          });\n        }\n\n        return result;\n      };\n    };\n    MinimongoTest.makeLookupFunction = _makeLookupFunction;\n\n    expandArraysInBranches = function expandArraysInBranches(branches, skipTheArrays) {\n      var branchesOut = [];\n      _.each(branches, function (branch) {\n        var thisIsArray = isArray(branch.value);\n        // We include the branch itself, *UNLESS* we it's an array that we're going\n        // to iterate and we're told to skip arrays.  (That's right, we include some\n        // arrays even skipTheArrays is true: these are arrays that were found via\n        // explicit numerical indices.)\n        if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n          branchesOut.push({\n            value: branch.value,\n            arrayIndices: branch.arrayIndices\n          });\n        }\n        if (thisIsArray && !branch.dontIterate) {\n          _.each(branch.value, function (leaf, i) {\n            branchesOut.push({\n              value: leaf,\n              arrayIndices: (branch.arrayIndices || []).concat(i)\n            });\n          });\n        }\n      });\n      return branchesOut;\n    };\n\n    var nothingMatcher = function nothingMatcher(docOrBranchedValues) {\n      return { result: false };\n    };\n\n    var everythingMatcher = function everythingMatcher(docOrBranchedValues) {\n      return { result: true };\n    };\n\n    // NB: We are cheating and using this function to implement \"AND\" for both\n    // \"document matchers\" and \"branched matchers\". They both return result objects\n    // but the argument is different: for the former it's a whole doc, whereas for\n    // the latter it's an array of \"branched values\".\n    var andSomeMatchers = function andSomeMatchers(subMatchers) {\n      if (subMatchers.length === 0) return everythingMatcher;\n      if (subMatchers.length === 1) return subMatchers[0];\n\n      return function (docOrBranches) {\n        var ret = {};\n        ret.result = _.all(subMatchers, function (f) {\n          var subResult = f(docOrBranches);\n          // Copy a 'distance' number out of the first sub-matcher that has\n          // one. Yes, this means that if there are multiple $near fields in a\n          // query, something arbitrary happens; this appears to be consistent with\n          // Mongo.\n          if (subResult.result && subResult.distance !== undefined && ret.distance === undefined) {\n            ret.distance = subResult.distance;\n          }\n          // Similarly, propagate arrayIndices from sub-matchers... but to match\n          // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n          // wins.\n          if (subResult.result && subResult.arrayIndices) {\n            ret.arrayIndices = subResult.arrayIndices;\n          }\n          return subResult.result;\n        });\n\n        // If we didn't actually match, forget any extra metadata we came up with.\n        if (!ret.result) {\n          delete ret.distance;\n          delete ret.arrayIndices;\n        }\n        return ret;\n      };\n    };\n\n    var andDocumentMatchers = andSomeMatchers;\n    var andBranchedMatchers = andSomeMatchers;\n\n    // helpers used by compiled selector code\n    _LocalCollection._f = {\n      // XXX for _all and _in, consider building 'inquery' at compile time..\n\n      _type: function _type(v) {\n        if (typeof v === \"number\") return 1;\n        if (typeof v === \"string\") return 2;\n        if (typeof v === \"boolean\") return 8;\n        if (isArray(v)) return 4;\n        if (v === null) return 10;\n        if (v instanceof RegExp)\n          // note that typeof(/x/) === \"object\"\n          return 11;\n        if (typeof v === \"function\") return 13;\n        if (v instanceof Date) return 9;\n        if (EJSON.isBinary(v)) return 5;\n        if (v instanceof MongoID.ObjectID) return 7;\n        return 3; // object\n\n        // XXX support some/all of these:\n        // 14, symbol\n        // 15, javascript code with scope\n        // 16, 18: 32-bit/64-bit integer\n        // 17, timestamp\n        // 255, minkey\n        // 127, maxkey\n      },\n\n      // deep equality test: use for literal document and array matches\n      _equal: function _equal(a, b) {\n        return EJSON.equals(a, b, { keyOrderSensitive: true });\n      },\n\n      // maps a type code to a value that can be used to sort values of\n      // different types\n      _typeorder: function _typeorder(t) {\n        // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n        // XXX what is the correct sort position for Javascript code?\n        // ('100' in the matrix below)\n        // XXX minkey/maxkey\n        return [-1, // (not a type)\n        1, // number\n        2, // string\n        3, // object\n        4, // array\n        5, // binary\n        -1, // deprecated\n        6, // ObjectID\n        7, // bool\n        8, // Date\n        0, // null\n        9, // RegExp\n        -1, // deprecated\n        100, // JS code\n        2, // deprecated (symbol)\n        100, // JS code\n        1, // 32-bit int\n        8, // Mongo timestamp\n        1 // 64-bit int\n        ][t];\n      },\n\n      // compare two values of unknown type according to BSON ordering\n      // semantics. (as an extension, consider 'undefined' to be less than\n      // any other value.) return negative if a is less, positive if b is\n      // less, or 0 if equal\n      _cmp: function _cmp(a, b) {\n        if (a === undefined) return b === undefined ? 0 : -1;\n        if (b === undefined) return 1;\n        var ta = _LocalCollection._f._type(a);\n        var tb = _LocalCollection._f._type(b);\n        var oa = _LocalCollection._f._typeorder(ta);\n        var ob = _LocalCollection._f._typeorder(tb);\n        if (oa !== ob) return oa < ob ? -1 : 1;\n        if (ta !== tb)\n          // XXX need to implement this if we implement Symbol or integers, or\n          // Timestamp\n          throw Error(\"Missing type coercion logic in _cmp\");\n        if (ta === 7) {\n          // ObjectID\n          // Convert to string.\n          ta = tb = 2;\n          a = a.toHexString();\n          b = b.toHexString();\n        }\n        if (ta === 9) {\n          // Date\n          // Convert to millis.\n          ta = tb = 1;\n          a = a.getTime();\n          b = b.getTime();\n        }\n\n        if (ta === 1) // double\n          return a - b;\n        if (tb === 2) // string\n          return a < b ? -1 : a === b ? 0 : 1;\n        if (ta === 3) {\n          // Object\n          // this could be much more efficient in the expected case ...\n          var to_array = function to_array(obj) {\n            var ret = [];\n            for (var key in obj) {\n              ret.push(key);\n              ret.push(obj[key]);\n            }\n            return ret;\n          };\n          return _LocalCollection._f._cmp(to_array(a), to_array(b));\n        }\n        if (ta === 4) {\n          // Array\n          for (var i = 0;; i++) {\n            if (i === a.length) return i === b.length ? 0 : -1;\n            if (i === b.length) return 1;\n            var s = _LocalCollection._f._cmp(a[i], b[i]);\n            if (s !== 0) return s;\n          }\n        }\n        if (ta === 5) {\n          // binary\n          // Surprisingly, a small binary blob is always less than a large one in\n          // Mongo.\n          if (a.length !== b.length) return a.length - b.length;\n          for (i = 0; i < a.length; i++) {\n            if (a[i] < b[i]) return -1;\n            if (a[i] > b[i]) return 1;\n          }\n          return 0;\n        }\n        if (ta === 8) {\n          // boolean\n          if (a) return b ? 0 : 1;\n          return b ? -1 : 0;\n        }\n        if (ta === 10) // null\n          return 0;\n        if (ta === 11) // regexp\n          throw Error(\"Sorting not supported on regular expression\"); // XXX\n        // 13: javascript code\n        // 14: symbol\n        // 15: javascript code with scope\n        // 16: 32-bit integer\n        // 17: timestamp\n        // 18: 64-bit integer\n        // 255: minkey\n        // 127: maxkey\n        if (ta === 13) // javascript code\n          throw Error(\"Sorting not supported on Javascript code\"); // XXX\n        throw Error(\"Unknown type to sort\");\n      }\n    };\n\n    // Oddball function used by upsert.\n    _LocalCollection._removeDollarOperators = function (selector) {\n      var selectorDoc = {};\n      for (var k in selector) {\n        if (k.substr(0, 1) !== '$') selectorDoc[k] = selector[k];\n      }return selectorDoc;\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/sort.js                                                                                 //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Give a sort spec, which can be in any of these forms:\n    //   {\"key1\": 1, \"key2\": -1}\n    //   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n    //   [\"key1\", [\"key2\", \"desc\"]]\n    //\n    // (.. with the first form being dependent on the key enumeration\n    // behavior of your javascript VM, which usually does what you mean in\n    // this case if the key names don't look like integers ..)\n    //\n    // return a function that takes two objects, and returns -1 if the\n    // first object comes first in order, 1 if the second object comes\n    // first, or 0 if neither object comes before the other.\n\n    Minimongo.Sorter = function (spec, options) {\n      var self = this;\n      options = options || {};\n\n      self._sortSpecParts = [];\n      self._sortFunction = null;\n\n      var addSpecPart = function addSpecPart(path, ascending) {\n        if (!path) throw Error(\"sort keys must be non-empty\");\n        if (path.charAt(0) === '$') throw Error(\"unsupported sort key: \" + path);\n        self._sortSpecParts.push({\n          path: path,\n          lookup: _makeLookupFunction(path, { forSort: true }),\n          ascending: ascending\n        });\n      };\n\n      if (spec instanceof Array) {\n        for (var i = 0; i < spec.length; i++) {\n          if (typeof spec[i] === \"string\") {\n            addSpecPart(spec[i], true);\n          } else {\n            addSpecPart(spec[i][0], spec[i][1] !== \"desc\");\n          }\n        }\n      } else if ((typeof spec === 'undefined' ? 'undefined' : _typeof(spec)) === \"object\") {\n        _.each(spec, function (value, key) {\n          addSpecPart(key, value >= 0);\n        });\n      } else if (typeof spec === \"function\") {\n        self._sortFunction = spec;\n      } else {\n        throw Error(\"Bad sort specification: \" + JSON.stringify(spec));\n      }\n\n      // If a function is specified for sorting, we skip the rest.\n      if (self._sortFunction) return;\n\n      // To implement affectedByModifier, we piggy-back on top of Matcher's\n      // affectedByModifier code; we create a selector that is affected by the same\n      // modifiers as this sort order. This is only implemented on the server.\n      if (self.affectedByModifier) {\n        var selector = {};\n        _.each(self._sortSpecParts, function (spec) {\n          selector[spec.path] = 1;\n        });\n        self._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n      }\n\n      self._keyComparator = composeComparators(_.map(self._sortSpecParts, function (spec, i) {\n        return self._keyFieldComparator(i);\n      }));\n\n      // If you specify a matcher for this Sorter, _keyFilter may be set to a\n      // function which selects whether or not a given \"sort key\" (tuple of values\n      // for the different sort spec fields) is compatible with the selector.\n      self._keyFilter = null;\n      options.matcher && self._useWithMatcher(options.matcher);\n    };\n\n    // In addition to these methods, sorter_project.js defines combineIntoProjection\n    // on the server only.\n    _.extend(Minimongo.Sorter.prototype, {\n      getComparator: function getComparator(options) {\n        var self = this;\n\n        // If we have no distances, just use the comparator from the source\n        // specification (which defaults to \"everything is equal\".\n        if (!options || !options.distances) {\n          return self._getBaseComparator();\n        }\n\n        var distances = options.distances;\n\n        // Return a comparator which first tries the sort specification, and if that\n        // says \"it's equal\", breaks ties using $near distances.\n        return composeComparators([self._getBaseComparator(), function (a, b) {\n          if (!distances.has(a._id)) throw Error(\"Missing distance for \" + a._id);\n          if (!distances.has(b._id)) throw Error(\"Missing distance for \" + b._id);\n          return distances.get(a._id) - distances.get(b._id);\n        }]);\n      },\n\n      _getPaths: function _getPaths() {\n        var self = this;\n        return _.pluck(self._sortSpecParts, 'path');\n      },\n\n      // Finds the minimum key from the doc, according to the sort specs.  (We say\n      // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n      // sort fields mean we're finding the max for that field.)\n      //\n      // Note that this is NOT \"find the minimum value of the first field, the\n      // minimum value of the second field, etc\"... it's \"choose the\n      // lexicographically minimum value of the key vector, allowing only keys which\n      // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n      // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n      // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n      _getMinKeyFromDoc: function _getMinKeyFromDoc(doc) {\n        var self = this;\n        var minKey = null;\n\n        self._generateKeysFromDoc(doc, function (key) {\n          if (!self._keyCompatibleWithSelector(key)) return;\n\n          if (minKey === null) {\n            minKey = key;\n            return;\n          }\n          if (self._compareKeys(key, minKey) < 0) {\n            minKey = key;\n          }\n        });\n\n        // This could happen if our key filter somehow filters out all the keys even\n        // though somehow the selector matches.\n        if (minKey === null) throw Error(\"sort selector found no keys in doc?\");\n        return minKey;\n      },\n\n      _keyCompatibleWithSelector: function _keyCompatibleWithSelector(key) {\n        var self = this;\n        return !self._keyFilter || self._keyFilter(key);\n      },\n\n      // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n      // 'cb' with the key.\n      _generateKeysFromDoc: function _generateKeysFromDoc(doc, cb) {\n        var self = this;\n\n        if (self._sortSpecParts.length === 0) throw new Error(\"can't generate keys without a spec\");\n\n        // maps index -> ({'' -> value} or {path -> value})\n        var valuesByIndexAndPath = [];\n\n        var pathFromIndices = function pathFromIndices(indices) {\n          return indices.join(',') + ',';\n        };\n\n        var knownPaths = null;\n\n        _.each(self._sortSpecParts, function (spec, whichField) {\n          // Expand any leaf arrays that we find, and ignore those arrays\n          // themselves.  (We never sort based on an array itself.)\n          var branches = expandArraysInBranches(spec.lookup(doc), true);\n\n          // If there are no values for a key (eg, key goes to an empty array),\n          // pretend we found one null value.\n          if (!branches.length) branches = [{ value: null }];\n\n          var usedPaths = false;\n          valuesByIndexAndPath[whichField] = {};\n          _.each(branches, function (branch) {\n            if (!branch.arrayIndices) {\n              // If there are no array indices for a branch, then it must be the\n              // only branch, because the only thing that produces multiple branches\n              // is the use of arrays.\n              if (branches.length > 1) throw Error(\"multiple branches but no array used?\");\n              valuesByIndexAndPath[whichField][''] = branch.value;\n              return;\n            }\n\n            usedPaths = true;\n            var path = pathFromIndices(branch.arrayIndices);\n            if (_.has(valuesByIndexAndPath[whichField], path)) throw Error(\"duplicate path: \" + path);\n            valuesByIndexAndPath[whichField][path] = branch.value;\n\n            // If two sort fields both go into arrays, they have to go into the\n            // exact same arrays and we have to find the same paths.  This is\n            // roughly the same condition that makes MongoDB throw this strange\n            // error message.  eg, the main thing is that if sort spec is {a: 1,\n            // b:1} then a and b cannot both be arrays.\n            //\n            // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n            // and 'a.x.y' are both arrays, but we don't allow this for now.\n            // #NestedArraySort\n            // XXX achieve full compatibility here\n            if (knownPaths && !_.has(knownPaths, path)) {\n              throw Error(\"cannot index parallel arrays\");\n            }\n          });\n\n          if (knownPaths) {\n            // Similarly to above, paths must match everywhere, unless this is a\n            // non-array field.\n            if (!_.has(valuesByIndexAndPath[whichField], '') && _.size(knownPaths) !== _.size(valuesByIndexAndPath[whichField])) {\n              throw Error(\"cannot index parallel arrays!\");\n            }\n          } else if (usedPaths) {\n            knownPaths = {};\n            _.each(valuesByIndexAndPath[whichField], function (x, path) {\n              knownPaths[path] = true;\n            });\n          }\n        });\n\n        if (!knownPaths) {\n          // Easy case: no use of arrays.\n          var soleKey = _.map(valuesByIndexAndPath, function (values) {\n            if (!_.has(values, '')) throw Error(\"no value in sole key case?\");\n            return values[''];\n          });\n          cb(soleKey);\n          return;\n        }\n\n        _.each(knownPaths, function (x, path) {\n          var key = _.map(valuesByIndexAndPath, function (values) {\n            if (_.has(values, '')) return values[''];\n            if (!_.has(values, path)) throw Error(\"missing path?\");\n            return values[path];\n          });\n          cb(key);\n        });\n      },\n\n      // Takes in two keys: arrays whose lengths match the number of spec\n      // parts. Returns negative, 0, or positive based on using the sort spec to\n      // compare fields.\n      _compareKeys: function _compareKeys(key1, key2) {\n        var self = this;\n        if (key1.length !== self._sortSpecParts.length || key2.length !== self._sortSpecParts.length) {\n          throw Error(\"Key has wrong length\");\n        }\n\n        return self._keyComparator(key1, key2);\n      },\n\n      // Given an index 'i', returns a comparator that compares two key arrays based\n      // on field 'i'.\n      _keyFieldComparator: function _keyFieldComparator(i) {\n        var self = this;\n        var invert = !self._sortSpecParts[i].ascending;\n        return function (key1, key2) {\n          var compare = _LocalCollection._f._cmp(key1[i], key2[i]);\n          if (invert) compare = -compare;\n          return compare;\n        };\n      },\n\n      // Returns a comparator that represents the sort specification (but not\n      // including a possible geoquery distance tie-breaker).\n      _getBaseComparator: function _getBaseComparator() {\n        var self = this;\n\n        if (self._sortFunction) return self._sortFunction;\n\n        // If we're only sorting on geoquery distance and no specs, just say\n        // everything is equal.\n        if (!self._sortSpecParts.length) {\n          return function (doc1, doc2) {\n            return 0;\n          };\n        }\n\n        return function (doc1, doc2) {\n          var key1 = self._getMinKeyFromDoc(doc1);\n          var key2 = self._getMinKeyFromDoc(doc2);\n          return self._compareKeys(key1, key2);\n        };\n      },\n\n      // In MongoDB, if you have documents\n      //    {_id: 'x', a: [1, 10]} and\n      //    {_id: 'y', a: [5, 15]},\n      // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).\n      // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not\n      // match the selector, and 5 comes before 10).\n      //\n      // The way this works is pretty subtle!  For example, if the documents\n      // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and\n      //             {_id: 'y', a: [{x: 5}, {x: 15}]}),\n      // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and\n      //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})\n      // both follow this rule (y before x).  (ie, you do have to apply this\n      // through $elemMatch.)\n      //\n      // So if you pass a matcher to this sorter's constructor, we will attempt to\n      // skip sort keys that don't match the selector. The logic here is pretty\n      // subtle and undocumented; we've gotten as close as we can figure out based\n      // on our understanding of Mongo's behavior.\n      _useWithMatcher: function _useWithMatcher(matcher) {\n        var self = this;\n\n        if (self._keyFilter) throw Error(\"called _useWithMatcher twice?\");\n\n        // If we are only sorting by distance, then we're not going to bother to\n        // build a key filter.\n        // XXX figure out how geoqueries interact with this stuff\n        if (_.isEmpty(self._sortSpecParts)) return;\n\n        var selector = matcher._selector;\n\n        // If the user just passed a literal function to find(), then we can't get a\n        // key filter from it.\n        if (selector instanceof Function) return;\n\n        var constraintsByPath = {};\n        _.each(self._sortSpecParts, function (spec, i) {\n          constraintsByPath[spec.path] = [];\n        });\n\n        _.each(selector, function (subSelector, key) {\n          // XXX support $and and $or\n\n          var constraints = constraintsByPath[key];\n          if (!constraints) return;\n\n          // XXX it looks like the real MongoDB implementation isn't \"does the\n          // regexp match\" but \"does the value fall into a range named by the\n          // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But\n          // \"does the regexp match\" is a good approximation.\n          if (subSelector instanceof RegExp) {\n            // As far as we can tell, using either of the options that both we and\n            // MongoDB support ('i' and 'm') disables use of the key filter. This\n            // makes sense: MongoDB mostly appears to be calculating ranges of an\n            // index to use, which means it only cares about regexps that match\n            // one range (with a literal prefix), and both 'i' and 'm' prevent the\n            // literal prefix of the regexp from actually meaning one range.\n            if (subSelector.ignoreCase || subSelector.multiline) return;\n            constraints.push(regexpElementMatcher(subSelector));\n            return;\n          }\n\n          if (isOperatorObject(subSelector)) {\n            _.each(subSelector, function (operand, operator) {\n              if (_.contains(['$lt', '$lte', '$gt', '$gte'], operator)) {\n                // XXX this depends on us knowing that these operators don't use any\n                // of the arguments to compileElementSelector other than operand.\n                constraints.push(ELEMENT_OPERATORS[operator].compileElementSelector(operand));\n              }\n\n              // See comments in the RegExp block above.\n              if (operator === '$regex' && !subSelector.$options) {\n                constraints.push(ELEMENT_OPERATORS.$regex.compileElementSelector(operand, subSelector));\n              }\n\n              // XXX support {$exists: true}, $mod, $type, $in, $elemMatch\n            });\n            return;\n          }\n\n          // OK, it's an equality thing.\n          constraints.push(equalityElementMatcher(subSelector));\n        });\n\n        // It appears that the first sort field is treated differently from the\n        // others; we shouldn't create a key filter unless the first sort field is\n        // restricted, though after that point we can restrict the other sort fields\n        // or not as we wish.\n        if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path])) return;\n\n        self._keyFilter = function (key) {\n          return _.all(self._sortSpecParts, function (specPart, index) {\n            return _.all(constraintsByPath[specPart.path], function (f) {\n              return f(key[index]);\n            });\n          });\n        };\n      }\n    });\n\n    // Given an array of comparators\n    // (functions (a,b)->(negative or positive or zero)), returns a single\n    // comparator which uses each comparator in order and returns the first\n    // non-zero value.\n    var composeComparators = function composeComparators(comparatorArray) {\n      return function (a, b) {\n        for (var i = 0; i < comparatorArray.length; ++i) {\n          var compare = comparatorArray[i](a, b);\n          if (compare !== 0) return compare;\n        }\n        return 0;\n      };\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/projection.js                                                                           //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Knows how to compile a fields projection to a predicate function.\n    // @returns - Function: a closure that filters out an object according to the\n    //            fields projection rules:\n    //            @param obj - Object: MongoDB-styled document\n    //            @returns - Object: a document with the fields filtered out\n    //                       according to projection rules. Doesn't retain subfields\n    //                       of passed argument.\n    _LocalCollection._compileProjection = function (fields) {\n      _LocalCollection._checkSupportedProjection(fields);\n\n      var _idProjection = _.isUndefined(fields._id) ? true : fields._id;\n      var details = projectionDetails(fields);\n\n      // returns transformed doc according to ruleTree\n      var transform = function transform(doc, ruleTree) {\n        // Special case for \"sets\"\n        if (_.isArray(doc)) return _.map(doc, function (subdoc) {\n          return transform(subdoc, ruleTree);\n        });\n\n        var res = details.including ? {} : EJSON.clone(doc);\n        _.each(ruleTree, function (rule, key) {\n          if (!_.has(doc, key)) return;\n          if (_.isObject(rule)) {\n            // For sub-objects/subsets we branch\n            if (_.isObject(doc[key])) res[key] = transform(doc[key], rule);\n            // Otherwise we don't even touch this subfield\n          } else if (details.including) res[key] = EJSON.clone(doc[key]);else delete res[key];\n        });\n\n        return res;\n      };\n\n      return function (obj) {\n        var res = transform(obj, details.tree);\n\n        if (_idProjection && _.has(obj, '_id')) res._id = obj._id;\n        if (!_idProjection && _.has(res, '_id')) delete res._id;\n        return res;\n      };\n    };\n\n    // Traverses the keys of passed projection and constructs a tree where all\n    // leaves are either all True or all False\n    // @returns Object:\n    //  - tree - Object - tree representation of keys involved in projection\n    //  (exception for '_id' as it is a special case handled separately)\n    //  - including - Boolean - \"take only certain fields\" type of projection\n    projectionDetails = function projectionDetails(fields) {\n      // Find the non-_id keys (_id is handled specially because it is included unless\n      // explicitly excluded). Sort the keys, so that our code to detect overlaps\n      // like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n      var fieldsKeys = _.keys(fields).sort();\n\n      // If _id is the only field in the projection, do not remove it, since it is\n      // required to determine if this is an exclusion or exclusion. Also keep an\n      // inclusive _id, since inclusive _id follows the normal rules about mixing\n      // inclusive and exclusive fields. If _id is not the only field in the\n      // projection and is exclusive, remove it so it can be handled later by a\n      // special case, since exclusive _id is always allowed.\n      if (fieldsKeys.length > 0 && !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(_.contains(fieldsKeys, '_id') && fields['_id'])) fieldsKeys = _.reject(fieldsKeys, function (key) {\n        return key === '_id';\n      });\n\n      var including = null; // Unknown\n\n      _.each(fieldsKeys, function (keyPath) {\n        var rule = !!fields[keyPath];\n        if (including === null) including = rule;\n        if (including !== rule)\n          // This error message is copied from MongoDB shell\n          throw MinimongoError(\"You cannot currently mix including and excluding fields.\");\n      });\n\n      var projectionRulesTree = pathsToTree(fieldsKeys, function (path) {\n        return including;\n      }, function (node, path, fullPath) {\n        // Check passed projection fields' keys: If you have two rules such as\n        // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n        // that happens, there is a probability you are doing something wrong,\n        // framework should notify you about such mistake earlier on cursor\n        // compilation step than later during runtime.  Note, that real mongo\n        // doesn't do anything about it and the later rule appears in projection\n        // project, more priority it takes.\n        //\n        // Example, assume following in mongo shell:\n        // > db.coll.insert({ a: { b: 23, c: 44 } })\n        // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n        // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23 } }\n        // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n        // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23, \"c\" : 44 } }\n        //\n        // Note, how second time the return set of keys is different.\n\n        var currentPath = fullPath;\n        var anotherPath = path;\n        throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath + \" found in fields option, using both of them may trigger \" + \"unexpected behavior. Did you mean to use only one of them?\");\n      });\n\n      return {\n        tree: projectionRulesTree,\n        including: including\n      };\n    };\n\n    // paths - Array: list of mongo style paths\n    // newLeafFn - Function: of form function(path) should return a scalar value to\n    //                       put into list created for that path\n    // conflictFn - Function: of form function(node, path, fullPath) is called\n    //                        when building a tree path for 'fullPath' node on\n    //                        'path' was already a leaf with a value. Must return a\n    //                        conflict resolution.\n    // initial tree - Optional Object: starting tree.\n    // @returns - Object: tree represented as a set of nested objects\n    pathsToTree = function pathsToTree(paths, newLeafFn, conflictFn, tree) {\n      tree = tree || {};\n      _.each(paths, function (keyPath) {\n        var treePos = tree;\n        var pathArr = keyPath.split('.');\n\n        // use _.all just for iteration with break\n        var success = _.all(pathArr.slice(0, -1), function (key, idx) {\n          if (!_.has(treePos, key)) treePos[key] = {};else if (!_.isObject(treePos[key])) {\n            treePos[key] = conflictFn(treePos[key], pathArr.slice(0, idx + 1).join('.'), keyPath);\n            // break out of loop if we are failing for this path\n            if (!_.isObject(treePos[key])) return false;\n          }\n\n          treePos = treePos[key];\n          return true;\n        });\n\n        if (success) {\n          var lastKey = _.last(pathArr);\n          if (!_.has(treePos, lastKey)) treePos[lastKey] = newLeafFn(keyPath);else treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);\n        }\n      });\n\n      return tree;\n    };\n\n    _LocalCollection._checkSupportedProjection = function (fields) {\n      if (!_.isObject(fields) || _.isArray(fields)) throw MinimongoError(\"fields option must be an object\");\n\n      _.each(fields, function (val, keyPath) {\n        if (_.contains(keyPath.split('.'), '$')) throw MinimongoError(\"Minimongo doesn't support $ operator in projections yet.\");\n        if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && _.intersection(['$elemMatch', '$meta', '$slice'], _.keys(val)).length > 0) throw MinimongoError(\"Minimongo doesn't support operators in projections yet.\");\n        if (_.indexOf([1, 0, true, false], val) === -1) throw MinimongoError(\"Projection values should be one of 1, 0, true, or false\");\n      });\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/modify.js                                                                               //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // XXX need a strategy for passing the binding of $ into this\n    // function, from the compiled selector\n    //\n    // maybe just {key.up.to.just.before.dollarsign: array_index}\n    //\n    // XXX atomicity: if one modification fails, do we roll back the whole\n    // change?\n    //\n    // options:\n    //   - isInsert is set when _modify is being called to compute the document to\n    //     insert as part of an upsert operation. We use this primarily to figure\n    //     out when to set the fields in $setOnInsert, if present.\n    _LocalCollection._modify = function (doc, mod, options) {\n      options = options || {};\n      if (!isPlainObject(mod)) throw MinimongoError(\"Modifier must be an object\");\n\n      // Make sure the caller can't mutate our data structures.\n      mod = EJSON.clone(mod);\n\n      var isModifier = isOperatorObject(mod);\n\n      var newDoc;\n\n      if (!isModifier) {\n        if (mod._id && !EJSON.equals(doc._id, mod._id)) throw MinimongoError(\"Cannot change the _id of a document\");\n\n        // replace the whole document\n        for (var k in mod) {\n          if (/\\./.test(k)) throw MinimongoError(\"When replacing document, field name may not contain '.'\");\n        }\n        newDoc = mod;\n      } else {\n        // apply modifiers to the doc.\n        newDoc = EJSON.clone(doc);\n\n        _.each(mod, function (operand, op) {\n          var modFunc = MODIFIERS[op];\n          // Treat $setOnInsert as $set if this is an insert.\n          if (options.isInsert && op === '$setOnInsert') modFunc = MODIFIERS['$set'];\n          if (!modFunc) throw MinimongoError(\"Invalid modifier specified \" + op);\n          _.each(operand, function (arg, keypath) {\n            if (keypath === '') {\n              throw MinimongoError(\"An empty update path is not valid.\");\n            }\n\n            if (keypath === '_id' && op !== '$setOnInsert') {\n              throw MinimongoError(\"Mod on _id not allowed\");\n            }\n\n            var keyparts = keypath.split('.');\n\n            if (!_.all(keyparts, _.identity)) {\n              throw MinimongoError(\"The update path '\" + keypath + \"' contains an empty field name, which is not allowed.\");\n            }\n\n            var noCreate = _.has(NO_CREATE_MODIFIERS, op);\n            var forbidArray = op === \"$rename\";\n            var target = findModTarget(newDoc, keyparts, {\n              noCreate: NO_CREATE_MODIFIERS[op],\n              forbidArray: op === \"$rename\",\n              arrayIndices: options.arrayIndices\n            });\n            var field = keyparts.pop();\n            modFunc(target, field, arg, keypath, newDoc);\n          });\n        });\n      }\n\n      // move new document into place.\n      _.each(_.keys(doc), function (k) {\n        // Note: this used to be for (var k in doc) however, this does not\n        // work right in Opera. Deleting from a doc while iterating over it\n        // would sometimes cause opera to skip some keys.\n        if (k !== '_id') delete doc[k];\n      });\n      _.each(newDoc, function (v, k) {\n        doc[k] = v;\n      });\n    };\n\n    // for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n    // and then you would operate on the 'e' property of the returned\n    // object.\n    //\n    // if options.noCreate is falsey, creates intermediate levels of\n    // structure as necessary, like mkdir -p (and raises an exception if\n    // that would mean giving a non-numeric property to an array.) if\n    // options.noCreate is true, return undefined instead.\n    //\n    // may modify the last element of keyparts to signal to the caller that it needs\n    // to use a different value to index into the returned object (for example,\n    // ['a', '01'] -> ['a', 1]).\n    //\n    // if forbidArray is true, return null if the keypath goes through an array.\n    //\n    // if options.arrayIndices is set, use its first element for the (first) '$' in\n    // the path.\n    var findModTarget = function findModTarget(doc, keyparts, options) {\n      options = options || {};\n      var usedArrayIndex = false;\n      for (var i = 0; i < keyparts.length; i++) {\n        var last = i === keyparts.length - 1;\n        var keypart = keyparts[i];\n        var indexable = isIndexable(doc);\n        if (!indexable) {\n          if (options.noCreate) return undefined;\n          var e = MinimongoError(\"cannot use the part '\" + keypart + \"' to traverse \" + doc);\n          e.setPropertyError = true;\n          throw e;\n        }\n        if (doc instanceof Array) {\n          if (options.forbidArray) return null;\n          if (keypart === '$') {\n            if (usedArrayIndex) throw MinimongoError(\"Too many positional (i.e. '$') elements\");\n            if (!options.arrayIndices || !options.arrayIndices.length) {\n              throw MinimongoError(\"The positional operator did not find the \" + \"match needed from the query\");\n            }\n            keypart = options.arrayIndices[0];\n            usedArrayIndex = true;\n          } else if (isNumericKey(keypart)) {\n            keypart = parseInt(keypart);\n          } else {\n            if (options.noCreate) return undefined;\n            throw MinimongoError(\"can't append to array using string field name [\" + keypart + \"]\");\n          }\n          if (last)\n            // handle 'a.01'\n            keyparts[i] = keypart;\n          if (options.noCreate && keypart >= doc.length) return undefined;\n          while (doc.length < keypart) {\n            doc.push(null);\n          }if (!last) {\n            if (doc.length === keypart) doc.push({});else if (_typeof(doc[keypart]) !== \"object\") throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] + \"' of list value \" + JSON.stringify(doc[keypart]));\n          }\n        } else {\n          if (keypart.length && keypart.substr(0, 1) === '$') throw MinimongoError(\"can't set field named \" + keypart);\n          if (!(keypart in doc)) {\n            if (options.noCreate) return undefined;\n            if (!last) doc[keypart] = {};\n          }\n        }\n\n        if (last) return doc;\n        doc = doc[keypart];\n      }\n\n      // notreached\n    };\n\n    var NO_CREATE_MODIFIERS = {\n      $unset: true,\n      $pop: true,\n      $rename: true,\n      $pull: true,\n      $pullAll: true\n    };\n\n    var MODIFIERS = {\n      $inc: function $inc(target, field, arg) {\n        if (typeof arg !== \"number\") throw MinimongoError(\"Modifier $inc allowed for numbers only\");\n        if (field in target) {\n          if (typeof target[field] !== \"number\") throw MinimongoError(\"Cannot apply $inc modifier to non-number\");\n          target[field] += arg;\n        } else {\n          target[field] = arg;\n        }\n      },\n      $set: function $set(target, field, arg) {\n        if (!_.isObject(target)) {\n          // not an array or an object\n          var e = MinimongoError(\"Cannot set property on non-object field\");\n          e.setPropertyError = true;\n          throw e;\n        }\n        if (target === null) {\n          var e = MinimongoError(\"Cannot set property on null\");\n          e.setPropertyError = true;\n          throw e;\n        }\n        target[field] = arg;\n      },\n      $setOnInsert: function $setOnInsert(target, field, arg) {\n        // converted to `$set` in `_modify`\n      },\n      $unset: function $unset(target, field, arg) {\n        if (target !== undefined) {\n          if (target instanceof Array) {\n            if (field in target) target[field] = null;\n          } else delete target[field];\n        }\n      },\n      $push: function $push(target, field, arg) {\n        if (target[field] === undefined) target[field] = [];\n        if (!(target[field] instanceof Array)) throw MinimongoError(\"Cannot apply $push modifier to non-array\");\n\n        if (!(arg && arg.$each)) {\n          // Simple mode: not $each\n          target[field].push(arg);\n          return;\n        }\n\n        // Fancy mode: $each (and maybe $slice and $sort and $position)\n        var toPush = arg.$each;\n        if (!(toPush instanceof Array)) throw MinimongoError(\"$each must be an array\");\n\n        // Parse $position\n        var position = undefined;\n        if ('$position' in arg) {\n          if (typeof arg.$position !== \"number\") throw MinimongoError(\"$position must be a numeric value\");\n          // XXX should check to make sure integer\n          if (arg.$position < 0) throw MinimongoError(\"$position in $push must be zero or positive\");\n          position = arg.$position;\n        }\n\n        // Parse $slice.\n        var slice = undefined;\n        if ('$slice' in arg) {\n          if (typeof arg.$slice !== \"number\") throw MinimongoError(\"$slice must be a numeric value\");\n          // XXX should check to make sure integer\n          if (arg.$slice > 0) throw MinimongoError(\"$slice in $push must be zero or negative\");\n          slice = arg.$slice;\n        }\n\n        // Parse $sort.\n        var sortFunction = undefined;\n        if (arg.$sort) {\n          if (slice === undefined) throw MinimongoError(\"$sort requires $slice to be present\");\n          // XXX this allows us to use a $sort whose value is an array, but that's\n          // actually an extension of the Node driver, so it won't work\n          // server-side. Could be confusing!\n          // XXX is it correct that we don't do geo-stuff here?\n          sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n          for (var i = 0; i < toPush.length; i++) {\n            if (_LocalCollection._f._type(toPush[i]) !== 3) {\n              throw MinimongoError(\"$push like modifiers using $sort \" + \"require all elements to be objects\");\n            }\n          }\n        }\n\n        // Actually push.\n        if (position === undefined) {\n          for (var j = 0; j < toPush.length; j++) {\n            target[field].push(toPush[j]);\n          }\n        } else {\n          var spliceArguments = [position, 0];\n          for (var j = 0; j < toPush.length; j++) {\n            spliceArguments.push(toPush[j]);\n          }Array.prototype.splice.apply(target[field], spliceArguments);\n        }\n\n        // Actually sort.\n        if (sortFunction) target[field].sort(sortFunction);\n\n        // Actually slice.\n        if (slice !== undefined) {\n          if (slice === 0) target[field] = []; // differs from Array.slice!\n          else target[field] = target[field].slice(slice);\n        }\n      },\n      $pushAll: function $pushAll(target, field, arg) {\n        if (!((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === \"object\" && arg instanceof Array)) throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\n        var x = target[field];\n        if (x === undefined) target[field] = arg;else if (!(x instanceof Array)) throw MinimongoError(\"Cannot apply $pushAll modifier to non-array\");else {\n          for (var i = 0; i < arg.length; i++) {\n            x.push(arg[i]);\n          }\n        }\n      },\n      $addToSet: function $addToSet(target, field, arg) {\n        var isEach = false;\n        if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === \"object\") {\n          //check if first key is '$each'\n          for (var k in arg) {\n            if (k === \"$each\") isEach = true;\n            break;\n          }\n        }\n        var values = isEach ? arg[\"$each\"] : [arg];\n        var x = target[field];\n        if (x === undefined) target[field] = values;else if (!(x instanceof Array)) throw MinimongoError(\"Cannot apply $addToSet modifier to non-array\");else {\n          _.each(values, function (value) {\n            for (var i = 0; i < x.length; i++) {\n              if (_LocalCollection._f._equal(value, x[i])) return;\n            }x.push(value);\n          });\n        }\n      },\n      $pop: function $pop(target, field, arg) {\n        if (target === undefined) return;\n        var x = target[field];\n        if (x === undefined) return;else if (!(x instanceof Array)) throw MinimongoError(\"Cannot apply $pop modifier to non-array\");else {\n          if (typeof arg === 'number' && arg < 0) x.splice(0, 1);else x.pop();\n        }\n      },\n      $pull: function $pull(target, field, arg) {\n        if (target === undefined) return;\n        var x = target[field];\n        if (x === undefined) return;else if (!(x instanceof Array)) throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");else {\n          var out = [];\n          if (arg != null && (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === \"object\" && !(arg instanceof Array)) {\n            // XXX would be much nicer to compile this once, rather than\n            // for each document we modify.. but usually we're not\n            // modifying that many documents, so we'll let it slide for\n            // now\n\n            // XXX Minimongo.Matcher isn't up for the job, because we need\n            // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n            // like {$gt: 4} is not normally a complete selector.\n            // same issue as $elemMatch possibly?\n            var matcher = new Minimongo.Matcher(arg);\n            for (var i = 0; i < x.length; i++) {\n              if (!matcher.documentMatches(x[i]).result) out.push(x[i]);\n            }\n          } else {\n            for (var i = 0; i < x.length; i++) {\n              if (!_LocalCollection._f._equal(x[i], arg)) out.push(x[i]);\n            }\n          }\n          target[field] = out;\n        }\n      },\n      $pullAll: function $pullAll(target, field, arg) {\n        if (!((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === \"object\" && arg instanceof Array)) throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\n        if (target === undefined) return;\n        var x = target[field];\n        if (x === undefined) return;else if (!(x instanceof Array)) throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");else {\n          var out = [];\n          for (var i = 0; i < x.length; i++) {\n            var exclude = false;\n            for (var j = 0; j < arg.length; j++) {\n              if (_LocalCollection._f._equal(x[i], arg[j])) {\n                exclude = true;\n                break;\n              }\n            }\n            if (!exclude) out.push(x[i]);\n          }\n          target[field] = out;\n        }\n      },\n      $rename: function $rename(target, field, arg, keypath, doc) {\n        if (keypath === arg)\n          // no idea why mongo has this restriction..\n          throw MinimongoError(\"$rename source must differ from target\");\n        if (target === null) throw MinimongoError(\"$rename source field invalid\");\n        if (typeof arg !== \"string\") throw MinimongoError(\"$rename target must be a string\");\n        if (target === undefined) return;\n        var v = target[field];\n        delete target[field];\n\n        var keyparts = arg.split('.');\n        var target2 = findModTarget(doc, keyparts, { forbidArray: true });\n        if (target2 === null) throw MinimongoError(\"$rename target field invalid\");\n        var field2 = keyparts.pop();\n        target2[field2] = v;\n      },\n      $bit: function $bit(target, field, arg) {\n        // XXX mongo only supports $bit on integers, and we only support\n        // native javascript numbers (doubles) so far, so we can't support $bit\n        throw MinimongoError(\"$bit is not supported\");\n      }\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/diff.js                                                                                 //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // ordered: bool.\n    // old_results and new_results: collections of documents.\n    //    if ordered, they are arrays.\n    //    if unordered, they are IdMaps\n    _LocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {\n      return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);\n    };\n\n    _LocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {\n      return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);\n    };\n\n    _LocalCollection._diffQueryOrderedChanges = function (oldResults, newResults, observer, options) {\n      return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);\n    };\n\n    _LocalCollection._diffObjects = function (left, right, callbacks) {\n      return DiffSequence.diffObjects(left, right, callbacks);\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/id_map.js                                                                               //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    _LocalCollection._IdMap = function () {\n      var self = this;\n      IdMap.call(self, MongoID.idStringify, MongoID.idParse);\n    };\n\n    Meteor._inherits(_LocalCollection._IdMap, IdMap);\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/observe.js                                                                              //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // XXX maybe move these into another ObserveHelpers package or something\n\n    // _CachingChangeObserver is an object which receives observeChanges callbacks\n    // and keeps a cache of the current cursor state up to date in self.docs. Users\n    // of this class should read the docs field but not modify it. You should pass\n    // the \"applyChange\" field as the callbacks to the underlying observeChanges\n    // call. Optionally, you can specify your own observeChanges callbacks which are\n    // invoked immediately before the docs field is updated; this object is made\n    // available as `this` to those callbacks.\n    _LocalCollection._CachingChangeObserver = function (options) {\n      var self = this;\n      options = options || {};\n\n      var orderedFromCallbacks = options.callbacks && _LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n      if (_.has(options, 'ordered')) {\n        self.ordered = options.ordered;\n        if (options.callbacks && options.ordered !== orderedFromCallbacks) throw Error(\"ordered option doesn't match callbacks\");\n      } else if (options.callbacks) {\n        self.ordered = orderedFromCallbacks;\n      } else {\n        throw Error(\"must provide ordered or callbacks\");\n      }\n      var callbacks = options.callbacks || {};\n\n      if (self.ordered) {\n        self.docs = new OrderedDict(MongoID.idStringify);\n        self.applyChange = {\n          addedBefore: function addedBefore(id, fields, before) {\n            var doc = EJSON.clone(fields);\n            doc._id = id;\n            callbacks.addedBefore && callbacks.addedBefore.call(self, id, fields, before);\n            // This line triggers if we provide added with movedBefore.\n            callbacks.added && callbacks.added.call(self, id, fields);\n            // XXX could `before` be a falsy ID?  Technically\n            // idStringify seems to allow for them -- though\n            // OrderedDict won't call stringify on a falsy arg.\n            self.docs.putBefore(id, doc, before || null);\n          },\n          movedBefore: function movedBefore(id, before) {\n            var doc = self.docs.get(id);\n            callbacks.movedBefore && callbacks.movedBefore.call(self, id, before);\n            self.docs.moveBefore(id, before || null);\n          }\n        };\n      } else {\n        self.docs = new _LocalCollection._IdMap();\n        self.applyChange = {\n          added: function added(id, fields) {\n            var doc = EJSON.clone(fields);\n            callbacks.added && callbacks.added.call(self, id, fields);\n            doc._id = id;\n            self.docs.set(id, doc);\n          }\n        };\n      }\n\n      // The methods in _IdMap and OrderedDict used by these callbacks are\n      // identical.\n      self.applyChange.changed = function (id, fields) {\n        var doc = self.docs.get(id);\n        if (!doc) throw new Error(\"Unknown id for changed: \" + id);\n        callbacks.changed && callbacks.changed.call(self, id, EJSON.clone(fields));\n        DiffSequence.applyChanges(doc, fields);\n      };\n      self.applyChange.removed = function (id) {\n        callbacks.removed && callbacks.removed.call(self, id);\n        self.docs.remove(id);\n      };\n    };\n\n    _LocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {\n      var transform = cursor.getTransform() || function (doc) {\n        return doc;\n      };\n      var suppressed = !!observeCallbacks._suppress_initial;\n\n      var observeChangesCallbacks;\n      if (_LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n        // The \"_no_indices\" option sets all index arguments to -1 and skips the\n        // linear scans required to generate them.  This lets observers that don't\n        // need absolute indices benefit from the other features of this API --\n        // relative order, transforms, and applyChanges -- without the speed hit.\n        var indices = !observeCallbacks._no_indices;\n        observeChangesCallbacks = {\n          addedBefore: function addedBefore(id, fields, before) {\n            var self = this;\n            if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) return;\n            var doc = transform(_.extend(fields, { _id: id }));\n            if (observeCallbacks.addedAt) {\n              var index = indices ? before ? self.docs.indexOf(before) : self.docs.size() : -1;\n              observeCallbacks.addedAt(doc, index, before);\n            } else {\n              observeCallbacks.added(doc);\n            }\n          },\n          changed: function changed(id, fields) {\n            var self = this;\n            if (!(observeCallbacks.changedAt || observeCallbacks.changed)) return;\n            var doc = EJSON.clone(self.docs.get(id));\n            if (!doc) throw new Error(\"Unknown id for changed: \" + id);\n            var oldDoc = transform(EJSON.clone(doc));\n            DiffSequence.applyChanges(doc, fields);\n            doc = transform(doc);\n            if (observeCallbacks.changedAt) {\n              var index = indices ? self.docs.indexOf(id) : -1;\n              observeCallbacks.changedAt(doc, oldDoc, index);\n            } else {\n              observeCallbacks.changed(doc, oldDoc);\n            }\n          },\n          movedBefore: function movedBefore(id, before) {\n            var self = this;\n            if (!observeCallbacks.movedTo) return;\n            var from = indices ? self.docs.indexOf(id) : -1;\n\n            var to = indices ? before ? self.docs.indexOf(before) : self.docs.size() : -1;\n            // When not moving backwards, adjust for the fact that removing the\n            // document slides everything back one slot.\n            if (to > from) --to;\n            observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))), from, to, before || null);\n          },\n          removed: function removed(id) {\n            var self = this;\n            if (!(observeCallbacks.removedAt || observeCallbacks.removed)) return;\n            // technically maybe there should be an EJSON.clone here, but it's about\n            // to be removed from self.docs!\n            var doc = transform(self.docs.get(id));\n            if (observeCallbacks.removedAt) {\n              var index = indices ? self.docs.indexOf(id) : -1;\n              observeCallbacks.removedAt(doc, index);\n            } else {\n              observeCallbacks.removed(doc);\n            }\n          }\n        };\n      } else {\n        observeChangesCallbacks = {\n          added: function added(id, fields) {\n            if (!suppressed && observeCallbacks.added) {\n              var doc = _.extend(fields, { _id: id });\n              observeCallbacks.added(transform(doc));\n            }\n          },\n          changed: function changed(id, fields) {\n            var self = this;\n            if (observeCallbacks.changed) {\n              var oldDoc = self.docs.get(id);\n              var doc = EJSON.clone(oldDoc);\n              DiffSequence.applyChanges(doc, fields);\n              observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));\n            }\n          },\n          removed: function removed(id) {\n            var self = this;\n            if (observeCallbacks.removed) {\n              observeCallbacks.removed(transform(self.docs.get(id)));\n            }\n          }\n        };\n      }\n\n      var changeObserver = new _LocalCollection._CachingChangeObserver({ callbacks: observeChangesCallbacks });\n      var handle = cursor.observeChanges(changeObserver.applyChange);\n      suppressed = false;\n\n      return handle;\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/objectid.js                                                                             //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Is this selector just shorthand for lookup by _id?\n    _LocalCollection._selectorIsId = function (selector) {\n      return typeof selector === \"string\" || typeof selector === \"number\" || selector instanceof MongoID.ObjectID;\n    };\n\n    // Is the selector just lookup by _id (shorthand or not)?\n    _LocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\n      return _LocalCollection._selectorIsId(selector) || selector && (typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) === \"object\" && selector._id && _LocalCollection._selectorIsId(selector._id) && _.size(selector) === 1;\n    };\n\n    // If this is a selector which explicitly constrains the match by ID to a finite\n    // number of documents, returns a list of their IDs.  Otherwise returns\n    // null. Note that the selector may have other restrictions so it may not even\n    // match those document!  We care about $in and $and since those are generated\n    // access-controlled update and remove.\n    _LocalCollection._idsMatchedBySelector = function (selector) {\n      // Is the selector just an ID?\n      if (_LocalCollection._selectorIsId(selector)) return [selector];\n      if (!selector) return null;\n\n      // Do we have an _id clause?\n      if (_.has(selector, '_id')) {\n        // Is the _id clause just an ID?\n        if (_LocalCollection._selectorIsId(selector._id)) return [selector._id];\n        // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n        if (selector._id && selector._id.$in && _.isArray(selector._id.$in) && !_.isEmpty(selector._id.$in) && _.all(selector._id.$in, _LocalCollection._selectorIsId)) {\n          return selector._id.$in;\n        }\n        return null;\n      }\n\n      // If this is a top-level $and, and any of the clauses constrain their\n      // documents, then the whole selector is constrained by any one clause's\n      // constraint. (Well, by their intersection, but that seems unlikely.)\n      if (selector.$and && _.isArray(selector.$and)) {\n        for (var i = 0; i < selector.$and.length; ++i) {\n          var subIds = _LocalCollection._idsMatchedBySelector(selector.$and[i]);\n          if (subIds) return subIds;\n        }\n      }\n\n      return null;\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/selector_projection.js                                                                  //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Knows how to combine a mongo selector and a fields projection to a new fields\n    // projection taking into account active fields from the passed selector.\n    // @returns Object - projection object (same as fields option of mongo cursor)\n    Minimongo.Matcher.prototype.combineIntoProjection = function (projection) {\n      var self = this;\n      var selectorPaths = Minimongo._pathsElidingNumericKeys(self._getPaths());\n\n      // Special case for $where operator in the selector - projection should depend\n      // on all fields of the document. getSelectorPaths returns a list of paths\n      // selector depends on. If one of the paths is '' (empty string) representing\n      // the root or the whole document, complete projection should be returned.\n      if (_.contains(selectorPaths, '')) return {};\n\n      return combineImportantPathsIntoProjection(selectorPaths, projection);\n    };\n\n    Minimongo._pathsElidingNumericKeys = function (paths) {\n      var self = this;\n      return _.map(paths, function (path) {\n        return _.reject(path.split('.'), isNumericKey).join('.');\n      });\n    };\n\n    combineImportantPathsIntoProjection = function combineImportantPathsIntoProjection(paths, projection) {\n      var prjDetails = projectionDetails(projection);\n      var tree = prjDetails.tree;\n      var mergedProjection = {};\n\n      // merge the paths to include\n      tree = pathsToTree(paths, function (path) {\n        return true;\n      }, function (node, path, fullPath) {\n        return true;\n      }, tree);\n      mergedProjection = treeToPaths(tree);\n      if (prjDetails.including) {\n        // both selector and projection are pointing on fields to include\n        // so we can just return the merged tree\n        return mergedProjection;\n      } else {\n        // selector is pointing at fields to include\n        // projection is pointing at fields to exclude\n        // make sure we don't exclude important paths\n        var mergedExclProjection = {};\n        _.each(mergedProjection, function (incl, path) {\n          if (!incl) mergedExclProjection[path] = false;\n        });\n\n        return mergedExclProjection;\n      }\n    };\n\n    // Returns a set of key paths similar to\n    // { 'foo.bar': 1, 'a.b.c': 1 }\n    var treeToPaths = function treeToPaths(tree, prefix) {\n      prefix = prefix || '';\n      var result = {};\n\n      _.each(tree, function (val, key) {\n        if (_.isObject(val)) _.extend(result, treeToPaths(val, prefix + key + '.'));else result[prefix + key] = val;\n      });\n\n      return result;\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/selector_modifier.js                                                                    //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Returns true if the modifier applied to some document may change the result\n    // of matching the document by selector\n    // The modifier is always in a form of Object:\n    //  - $set\n    //    - 'a.b.22.z': value\n    //    - 'foo.bar': 42\n    //  - $unset\n    //    - 'abc.d': 1\n    Minimongo.Matcher.prototype.affectedByModifier = function (modifier) {\n      var self = this;\n      // safe check for $set/$unset being objects\n      modifier = _.extend({ $set: {}, $unset: {} }, modifier);\n      var modifiedPaths = _.keys(modifier.$set).concat(_.keys(modifier.$unset));\n      var meaningfulPaths = self._getPaths();\n\n      return _.any(modifiedPaths, function (path) {\n        var mod = path.split('.');\n        return _.any(meaningfulPaths, function (meaningfulPath) {\n          var sel = meaningfulPath.split('.');\n          var i = 0,\n              j = 0;\n\n          while (i < sel.length && j < mod.length) {\n            if (isNumericKey(sel[i]) && isNumericKey(mod[j])) {\n              // foo.4.bar selector affected by foo.4 modifier\n              // foo.3.bar selector unaffected by foo.4 modifier\n              if (sel[i] === mod[j]) i++, j++;else return false;\n            } else if (isNumericKey(sel[i])) {\n              // foo.4.bar selector unaffected by foo.bar modifier\n              return false;\n            } else if (isNumericKey(mod[j])) {\n              j++;\n            } else if (sel[i] === mod[j]) i++, j++;else return false;\n          }\n\n          // One is a prefix of another, taking numeric fields into account\n          return true;\n        });\n      });\n    };\n\n    // Minimongo.Sorter gets a similar method, which delegates to a Matcher it made\n    // for this exact purpose.\n    Minimongo.Sorter.prototype.affectedByModifier = function (modifier) {\n      var self = this;\n      return self._selectorForAffectedByModifier.affectedByModifier(modifier);\n    };\n\n    // @param modifier - Object: MongoDB-styled modifier with `$set`s and `$unsets`\n    //                           only. (assumed to come from oplog)\n    // @returns - Boolean: if after applying the modifier, selector can start\n    //                     accepting the modified value.\n    // NOTE: assumes that document affected by modifier didn't match this Matcher\n    // before, so if modifier can't convince selector in a positive change it would\n    // stay 'false'.\n    // Currently doesn't support $-operators and numeric indices precisely.\n    Minimongo.Matcher.prototype.canBecomeTrueByModifier = function (modifier) {\n      var self = this;\n      if (!this.affectedByModifier(modifier)) return false;\n\n      modifier = _.extend({ $set: {}, $unset: {} }, modifier);\n      var modifierPaths = _.keys(modifier.$set).concat(_.keys(modifier.$unset));\n\n      if (!self.isSimple()) return true;\n\n      if (_.any(self._getPaths(), pathHasNumericKeys) || _.any(modifierPaths, pathHasNumericKeys)) return true;\n\n      // check if there is a $set or $unset that indicates something is an\n      // object rather than a scalar in the actual object where we saw $-operator\n      // NOTE: it is correct since we allow only scalars in $-operators\n      // Example: for selector {'a.b': {$gt: 5}} the modifier {'a.b.c':7} would\n      // definitely set the result to false as 'a.b' appears to be an object.\n      var expectedScalarIsObject = _.any(self._selector, function (sel, path) {\n        if (!isOperatorObject(sel)) return false;\n        return _.any(modifierPaths, function (modifierPath) {\n          return startsWith(modifierPath, path + '.');\n        });\n      });\n\n      if (expectedScalarIsObject) return false;\n\n      // See if we can apply the modifier on the ideally matching object. If it\n      // still matches the selector, then the modifier could have turned the real\n      // object in the database into something matching.\n      var matchingDocument = EJSON.clone(self.matchingDocument());\n\n      // The selector is too complex, anything can happen.\n      if (matchingDocument === null) return true;\n\n      try {\n        _LocalCollection._modify(matchingDocument, modifier);\n      } catch (e) {\n        // Couldn't set a property on a field which is a scalar or null in the\n        // selector.\n        // Example:\n        // real document: { 'a.b': 3 }\n        // selector: { 'a': 12 }\n        // converted selector (ideal document): { 'a': 12 }\n        // modifier: { $set: { 'a.b': 4 } }\n        // We don't know what real document was like but from the error raised by\n        // $set on a scalar field we can reason that the structure of real document\n        // is completely different.\n        if (e.name === \"MinimongoError\" && e.setPropertyError) return false;\n        throw e;\n      }\n\n      return self.documentMatches(matchingDocument).result;\n    };\n\n    // Returns an object that would match the selector if possible or null if the\n    // selector is too complex for us to analyze\n    // { 'a.b': { ans: 42 }, 'foo.bar': null, 'foo.baz': \"something\" }\n    // => { a: { b: { ans: 42 } }, foo: { bar: null, baz: \"something\" } }\n    Minimongo.Matcher.prototype.matchingDocument = function () {\n      var self = this;\n\n      // check if it was computed before\n      if (self._matchingDocument !== undefined) return self._matchingDocument;\n\n      // If the analysis of this selector is too hard for our implementation\n      // fallback to \"YES\"\n      var fallback = false;\n      self._matchingDocument = pathsToTree(self._getPaths(), function (path) {\n        var valueSelector = self._selector[path];\n        if (isOperatorObject(valueSelector)) {\n          // if there is a strict equality, there is a good\n          // chance we can use one of those as \"matching\"\n          // dummy value\n          if (valueSelector.$eq) {\n            return valueSelector.$eq;\n          } else if (valueSelector.$in) {\n            var matcher = new Minimongo.Matcher({ placeholder: valueSelector });\n\n            // Return anything from $in that matches the whole selector for this\n            // path. If nothing matches, returns `undefined` as nothing can make\n            // this selector into `true`.\n            return _.find(valueSelector.$in, function (x) {\n              return matcher.documentMatches({ placeholder: x }).result;\n            });\n          } else if (onlyContainsKeys(valueSelector, ['$gt', '$gte', '$lt', '$lte'])) {\n            var lowerBound = -Infinity,\n                upperBound = Infinity;\n            _.each(['$lte', '$lt'], function (op) {\n              if (_.has(valueSelector, op) && valueSelector[op] < upperBound) upperBound = valueSelector[op];\n            });\n            _.each(['$gte', '$gt'], function (op) {\n              if (_.has(valueSelector, op) && valueSelector[op] > lowerBound) lowerBound = valueSelector[op];\n            });\n\n            var middle = (lowerBound + upperBound) / 2;\n            var matcher = new Minimongo.Matcher({ placeholder: valueSelector });\n            if (!matcher.documentMatches({ placeholder: middle }).result && (middle === lowerBound || middle === upperBound)) fallback = true;\n\n            return middle;\n          } else if (onlyContainsKeys(valueSelector, ['$nin', '$ne'])) {\n            // Since self._isSimple makes sure $nin and $ne are not combined with\n            // objects or arrays, we can confidently return an empty object as it\n            // never matches any scalar.\n            return {};\n          } else {\n            fallback = true;\n          }\n        }\n        return self._selector[path];\n      }, _.identity /*conflict resolution is no resolution*/);\n\n      if (fallback) self._matchingDocument = null;\n\n      return self._matchingDocument;\n    };\n\n    var getPaths = function getPaths(sel) {\n      return _.keys(new Minimongo.Matcher(sel)._paths);\n      return _.chain(sel).map(function (v, k) {\n        // we don't know how to handle $where because it can be anything\n        if (k === \"$where\") return ''; // matches everything\n        // we branch from $or/$and/$nor operator\n        if (_.contains(['$or', '$and', '$nor'], k)) return _.map(v, getPaths);\n        // the value is a literal or some comparison operator\n        return k;\n      }).flatten().uniq().value();\n    };\n\n    // A helper to ensure object has only certain keys\n    var onlyContainsKeys = function onlyContainsKeys(obj, keys) {\n      return _.all(obj, function (v, k) {\n        return _.contains(keys, k);\n      });\n    };\n\n    var pathHasNumericKeys = function pathHasNumericKeys(path) {\n      return _.any(path.split('.'), isNumericKey);\n    };\n\n    // XXX from Underscore.String (http://epeli.github.com/underscore.string/)\n    var startsWith = function startsWith(str, starts) {\n      return str.length >= starts.length && str.substring(0, starts.length) === starts;\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                                            //\n    // packages/minimongo/sorter_projection.js                                                                    //\n    //                                                                                                            //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    Minimongo.Sorter.prototype.combineIntoProjection = function (projection) {\n      var self = this;\n      var specPaths = Minimongo._pathsElidingNumericKeys(self._getPaths());\n      return combineImportantPathsIntoProjection(specPaths, projection);\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  (function (pkg, symbols) {\n    for (var s in symbols) {\n      s in pkg || (pkg[s] = symbols[s]);\n    }\n  })(Package.minimongo = {}, {\n    LocalCollection: _LocalCollection,\n    Minimongo: Minimongo,\n    MinimongoTest: MinimongoTest\n  });\n})();\n\n//# sourceMappingURL=minimongo.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/minimongo.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/minimongo.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar IdMap = Package['id-map'].IdMap;\nvar OrderedDict = Package['ordered-dict'].OrderedDict;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar MongoID = Package['mongo-id'].MongoID;\nvar Random = Package.random.Random;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar GeoJSON = Package['geojson-utils'].GeoJSON;\n\n/* Package-scope variables */\nvar LocalCollection, Minimongo, MinimongoTest, MinimongoError, isArray, isPlainObject, isIndexable, isOperatorObject, isNumericKey, regexpElementMatcher, equalityElementMatcher, ELEMENT_OPERATORS, makeLookupFunction, expandArraysInBranches, projectionDetails, pathsToTree, combineImportantPathsIntoProjection;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/minimongo.js                                                                            //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\n\n// Cursor: a specification for a particular subset of documents, w/\n// a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),\n\n// ObserveHandle: the return value of a live query.\n\nLocalCollection = function (name) {\n  var self = this;\n  self.name = name;\n  // _id -> document (also containing id)\n  self._docs = new LocalCollection._IdMap;\n\n  self._observeQueue = new Meteor._SynchronousQueue();\n\n  self.next_qid = 1; // live query id generator\n\n  // qid -> live query object. keys:\n  //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n  //  results: array (ordered) or object (unordered) of current results\n  //    (aliased with self._docs!)\n  //  resultsSnapshot: snapshot of results. null if not paused.\n  //  cursor: Cursor object for the query.\n  //  selector, sorter, (callbacks): functions\n  self.queries = {};\n\n  // null if not saving originals; an IdMap from id to original document value if\n  // saving originals. See comments before saveOriginals().\n  self._savedOriginals = null;\n\n  // True when observers are paused and we should not send callbacks.\n  self.paused = false;\n};\n\nMinimongo = {};\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {};\n\nMinimongoError = function (message) {\n  var e = new Error(message);\n  e.name = \"MinimongoError\";\n  return e;\n};\n\n\n// options may include sort, skip, limit, reactive\n// sort may be any of these forms:\n//     {a: 1, b: -1}\n//     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n//     [\"a\", [\"b\", \"desc\"]]\n//   (in the first form you're beholden to key enumeration order in\n//   your javascript VM)\n//\n// reactive: if given, and false, don't register with Tracker (default\n// is true)\n//\n// XXX possibly should support retrieving a subset of fields? and\n// have it be a hint (ignored on the client, when not copying the\n// doc?)\n//\n// XXX sort does not yet support subkeys ('a.b') .. fix that!\n// XXX add one more sort form: \"key\"\n// XXX tests\nLocalCollection.prototype.find = function (selector, options) {\n  // default syntax for everything is to omit the selector argument.\n  // but if selector is explicitly passed in as false or undefined, we\n  // want a selector that matches nothing.\n  if (arguments.length === 0)\n    selector = {};\n\n  return new LocalCollection.Cursor(this, selector, options);\n};\n\n// don't call this ctor directly.  use LocalCollection.find().\n\nLocalCollection.Cursor = function (collection, selector, options) {\n  var self = this;\n  if (!options) options = {};\n\n  self.collection = collection;\n  self.sorter = null;\n  self.matcher = new Minimongo.Matcher(selector);\n\n  if (LocalCollection._selectorIsId(selector)) {\n    // stash for fast path\n    self._selectorId = selector;\n  } else if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n    // also do the fast path for { _id: idString }\n    self._selectorId = selector._id;\n  } else {\n    self._selectorId = undefined;\n    if (self.matcher.hasGeoQuery() || options.sort) {\n      self.sorter = new Minimongo.Sorter(options.sort || [],\n                                         { matcher: self.matcher });\n    }\n  }\n\n  self.skip = options.skip;\n  self.limit = options.limit;\n  self.fields = options.fields;\n\n  self._projectionFn = LocalCollection._compileProjection(self.fields || {});\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  // by default, queries register w/ Tracker when it is available.\n  if (typeof Tracker !== \"undefined\")\n    self.reactive = (options.reactive === undefined) ? true : options.reactive;\n};\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nLocalCollection.Cursor.prototype.rewind = function () {\n};\n\nLocalCollection.prototype.findOne = function (selector, options) {\n  if (arguments.length === 0)\n    selector = {};\n\n  // NOTE: by setting limit 1 here, we end up using very inefficient\n  // code that recomputes the whole query on each update. The upside is\n  // that when you reactively depend on a findOne you only get\n  // invalidated when the found object changes, not any object in the\n  // collection. Most findOne will be by id, which has a fast path, so\n  // this might not be a big deal. In most cases, invalidation causes\n  // the called to re-query anyway, so this should be a net performance\n  // improvement.\n  options = options || {};\n  options.limit = 1;\n\n  return this.find(selector, options).fetch()[0];\n};\n\n/**\n * @callback IterationCallback\n * @param {Object} doc\n * @param {Number} index\n */\n/**\n * @summary Call `callback` once for each matching document, sequentially and synchronously.\n * @locus Anywhere\n * @method  forEach\n * @instance\n * @memberOf Mongo.Cursor\n * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.\n * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.\n */\nLocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {\n  var self = this;\n\n  var objects = self._getRawObjects({ordered: true});\n\n  if (self.reactive) {\n    self._depend({\n      addedBefore: true,\n      removed: true,\n      changed: true,\n      movedBefore: true});\n  }\n\n  _.each(objects, function (elt, i) {\n    // This doubles as a clone operation.\n    elt = self._projectionFn(elt);\n\n    if (self._transform)\n      elt = self._transform(elt);\n    callback.call(thisArg, elt, i, self);\n  });\n};\n\nLocalCollection.Cursor.prototype.getTransform = function () {\n  return this._transform;\n};\n\n/**\n * @summary Map callback over all matching documents.  Returns an Array.\n * @locus Anywhere\n * @method map\n * @instance\n * @memberOf Mongo.Cursor\n * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.\n * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.\n */\nLocalCollection.Cursor.prototype.map = function (callback, thisArg) {\n  var self = this;\n  var res = [];\n  self.forEach(function (doc, index) {\n    res.push(callback.call(thisArg, doc, index, self));\n  });\n  return res;\n};\n\n/**\n * @summary Return all matching documents as an Array.\n * @memberOf Mongo.Cursor\n * @method  fetch\n * @instance\n * @locus Anywhere\n * @returns {Object[]}\n */\nLocalCollection.Cursor.prototype.fetch = function () {\n  var self = this;\n  var res = [];\n  self.forEach(function (doc) {\n    res.push(doc);\n  });\n  return res;\n};\n\n/**\n * @summary Returns the number of documents that match a query.\n * @memberOf Mongo.Cursor\n * @method  count\n * @instance\n * @locus Anywhere\n * @returns {Number}\n */\nLocalCollection.Cursor.prototype.count = function () {\n  var self = this;\n\n  if (self.reactive)\n    self._depend({added: true, removed: true},\n                 true /* allow the observe to be unordered */);\n\n  return self._getRawObjects({ordered: true}).length;\n};\n\nLocalCollection.Cursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  if (! self.collection.name)\n    throw new Error(\"Can't publish a cursor from a collection without a name.\");\n  var collection = self.collection.name;\n\n  // XXX minimongo should not depend on mongo-livedata!\n  if (! Package.mongo) {\n    throw new Error(\"Can't publish from Minimongo without the `mongo` package.\");\n  }\n\n  return Package.mongo.Mongo.Collection._publishCursor(self, sub, collection);\n};\n\nLocalCollection.Cursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self.collection.name;\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedBefore)\n    throw new Error(\"Please specify only one of added() and addedBefore()\");\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._observeCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.addedAt && callbacks.added)\n    throw new Error(\"Please specify only one of added() and addedAt()\");\n  if (callbacks.changedAt && callbacks.changed)\n    throw new Error(\"Please specify only one of changed() and changedAt()\");\n  if (callbacks.removed && callbacks.removedAt)\n    throw new Error(\"Please specify only one of removed() and removedAt()\");\n\n  return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt\n            || callbacks.removedAt);\n};\n\n// the handle that comes back from observe.\nLocalCollection.ObserveHandle = function () {};\n\n// options to contain:\n//  * callbacks for observe():\n//    - addedAt (document, atIndex)\n//    - added (document)\n//    - changedAt (newDocument, oldDocument, atIndex)\n//    - changed (newDocument, oldDocument)\n//    - removedAt (document, atIndex)\n//    - removed (document)\n//    - movedTo (document, oldIndex, newIndex)\n//\n// attributes available on returned query handle:\n//  * stop(): end updates\n//  * collection: the collection this query is querying\n//\n// iff x is a returned query handle, (x instanceof\n// LocalCollection.ObserveHandle) is true\n//\n// initial results delivered through added callback\n// XXX maybe callbacks should take a list of objects, to expose transactions?\n// XXX maybe support field limiting (to limit what you're notified on)\n\n_.extend(LocalCollection.Cursor.prototype, {\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it changes\n   */\n  observe: function (options) {\n    var self = this;\n    return LocalCollection._observeFromObserveChanges(self, options);\n  },\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.  Only the differences between the old and new documents are passed to the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it changes\n   */\n  observeChanges: function (options) {\n    var self = this;\n\n    var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (self.skip || self.limit))\n      throw new Error(\"must use ordered observe (ie, 'addedBefore' instead of 'added') with skip or limit\");\n\n    if (self.fields && (self.fields._id === 0 || self.fields._id === false))\n      throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n\n    var query = {\n      dirty: false,\n      matcher: self.matcher, // not fast pathed\n      sorter: ordered && self.sorter,\n      distances: (\n        self.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap),\n      resultsSnapshot: null,\n      ordered: ordered,\n      cursor: self,\n      projectionFn: self._projectionFn\n    };\n    var qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (self.reactive) {\n      qid = self.collection.next_qid++;\n      self.collection.queries[qid] = query;\n    }\n    query.results = self._getRawObjects({\n      ordered: ordered, distances: query.distances});\n    if (self.collection.paused)\n      query.resultsSnapshot = (ordered ? [] : new LocalCollection._IdMap);\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    var wrapCallback = function (f) {\n      if (!f)\n        return function () {};\n      return function (/*args*/) {\n        var context = this;\n        var args = arguments;\n\n        if (self.collection.paused)\n          return;\n\n        self.collection._observeQueue.queueTask(function () {\n          f.apply(context, args);\n        });\n      };\n    };\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !self.collection.paused) {\n      // XXX unify ordered and unordered interface\n      var each = ordered\n            ? _.bind(_.each, null, query.results)\n            : _.bind(query.results.forEach, query.results);\n      each(function (doc) {\n        var fields = EJSON.clone(doc);\n\n        delete fields._id;\n        if (ordered)\n          query.addedBefore(doc._id, self._projectionFn(fields), null);\n        query.added(doc._id, self._projectionFn(fields));\n      });\n    }\n\n    var handle = new LocalCollection.ObserveHandle;\n    _.extend(handle, {\n      collection: self.collection,\n      stop: function () {\n        if (self.reactive)\n          delete self.collection.queries[qid];\n      }\n    });\n\n    if (self.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(function () {\n        handle.stop();\n      });\n    }\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    self.collection._observeQueue.drain();\n\n    return handle;\n  }\n});\n\n// Returns a collection of matching objects, but doesn't deep copy them.\n//\n// If ordered is set, returns a sorted array, respecting sorter, skip, and limit\n// properties of the query.  if sorter is falsey, no sort -- you get the natural\n// order.\n//\n// If ordered is not set, returns an object mapping from ID to doc (sorter, skip\n// and limit should not be set).\n//\n// If ordered is set and this cursor is a $near geoquery, then this function\n// will use an _IdMap to track each distance from the $near argument point in\n// order to use it as a sort key. If an _IdMap is passed in the 'distances'\n// argument, this function will clear it and use it for this purpose (otherwise\n// it will just create its own _IdMap). The observeChanges implementation uses\n// this to remember the distances after this function returns.\nLocalCollection.Cursor.prototype._getRawObjects = function (options) {\n  var self = this;\n  options = options || {};\n\n  // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n  // compatible\n  var results = options.ordered ? [] : new LocalCollection._IdMap;\n\n  // fast path for single ID value\n  if (self._selectorId !== undefined) {\n    // If you have non-zero skip and ask for a single id, you get\n    // nothing. This is so it matches the behavior of the '{_id: foo}'\n    // path.\n    if (self.skip)\n      return results;\n\n    var selectedDoc = self.collection._docs.get(self._selectorId);\n    if (selectedDoc) {\n      if (options.ordered)\n        results.push(selectedDoc);\n      else\n        results.set(self._selectorId, selectedDoc);\n    }\n    return results;\n  }\n\n  // slow path for arbitrary selector, sort, skip, limit\n\n  // in the observeChanges case, distances is actually part of the \"query\" (ie,\n  // live results set) object.  in other cases, distances is only used inside\n  // this function.\n  var distances;\n  if (self.matcher.hasGeoQuery() && options.ordered) {\n    if (options.distances) {\n      distances = options.distances;\n      distances.clear();\n    } else {\n      distances = new LocalCollection._IdMap();\n    }\n  }\n\n  self.collection._docs.forEach(function (doc, id) {\n    var matchResult = self.matcher.documentMatches(doc);\n    if (matchResult.result) {\n      if (options.ordered) {\n        results.push(doc);\n        if (distances && matchResult.distance !== undefined)\n          distances.set(id, matchResult.distance);\n      } else {\n        results.set(id, doc);\n      }\n    }\n    // Fast path for limited unsorted queries.\n    // XXX 'length' check here seems wrong for ordered\n    if (self.limit && !self.skip && !self.sorter &&\n        results.length === self.limit)\n      return false;  // break\n    return true;  // continue\n  });\n\n  if (!options.ordered)\n    return results;\n\n  if (self.sorter) {\n    var comparator = self.sorter.getComparator({distances: distances});\n    results.sort(comparator);\n  }\n\n  var idx_start = self.skip || 0;\n  var idx_end = self.limit ? (self.limit + idx_start) : results.length;\n  return results.slice(idx_start, idx_end);\n};\n\n// XXX Maybe we need a version of observe that just calls a callback if\n// anything changed.\nLocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {\n  var self = this;\n\n  if (Tracker.active) {\n    var v = new Tracker.Dependency;\n    v.depend();\n    var notifyChange = _.bind(v.changed, v);\n\n    var options = {\n      _suppress_initial: true,\n      _allow_unordered: _allow_unordered\n    };\n    _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'],\n           function (fnName) {\n             if (changers[fnName])\n               options[fnName] = notifyChange;\n           });\n\n    // observeChanges will stop() when this computation is invalidated\n    self.observeChanges(options);\n  }\n};\n\n// XXX enforce rule that field names can't start with '$' or contain '.'\n// (real mongodb does in fact enforce this)\n// XXX possibly enforce that 'undefined' does not appear (we assume\n// this in our handling of null and $exists)\nLocalCollection.prototype.insert = function (doc, callback) {\n  var self = this;\n  doc = EJSON.clone(doc);\n\n  if (!_.has(doc, '_id')) {\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    doc._id = LocalCollection._useOID ? new MongoID.ObjectID()\n                                      : Random.id();\n  }\n  var id = doc._id;\n\n  if (self._docs.has(id))\n    throw MinimongoError(\"Duplicate _id '\" + id + \"'\");\n\n  self._saveOriginal(id, undefined);\n  self._docs.set(id, doc);\n\n  var queriesToRecompute = [];\n  // trigger live queries that match\n  for (var qid in self.queries) {\n    var query = self.queries[qid];\n    if (query.dirty) continue;\n    var matchResult = query.matcher.documentMatches(doc);\n    if (matchResult.result) {\n      if (query.distances && matchResult.distance !== undefined)\n        query.distances.set(id, matchResult.distance);\n      if (query.cursor.skip || query.cursor.limit)\n        queriesToRecompute.push(qid);\n      else\n        LocalCollection._insertInResults(query, doc);\n    }\n  }\n\n  _.each(queriesToRecompute, function (qid) {\n    if (self.queries[qid])\n      self._recomputeResults(self.queries[qid]);\n  });\n  self._observeQueue.drain();\n\n  // Defer because the caller likely doesn't expect the callback to be run\n  // immediately.\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, id);\n    });\n  return id;\n};\n\n// Iterates over a subset of documents that could match selector; calls\n// f(doc, id) on each of them.  Specifically, if selector specifies\n// specific _id's, it only looks at those.  doc is *not* cloned: it is the\n// same object that is in _docs.\nLocalCollection.prototype._eachPossiblyMatchingDoc = function (selector, f) {\n  var self = this;\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    for (var i = 0; i < specificIds.length; ++i) {\n      var id = specificIds[i];\n      var doc = self._docs.get(id);\n      if (doc) {\n        var breakIfFalse = f(doc, id);\n        if (breakIfFalse === false)\n          break;\n      }\n    }\n  } else {\n    self._docs.forEach(f);\n  }\n};\n\nLocalCollection.prototype.remove = function (selector, callback) {\n  var self = this;\n\n  // Easy special case: if we're not calling observeChanges callbacks and we're\n  // not saving originals and we got asked to remove everything, then just empty\n  // everything directly.\n  if (self.paused && !self._savedOriginals && EJSON.equals(selector, {})) {\n    var result = self._docs.size();\n    self._docs.clear();\n    _.each(self.queries, function (query) {\n      if (query.ordered) {\n        query.results = [];\n      } else {\n        query.results.clear();\n      }\n    });\n    if (callback) {\n      Meteor.defer(function () {\n        callback(null, result);\n      });\n    }\n    return result;\n  }\n\n  var matcher = new Minimongo.Matcher(selector);\n  var remove = [];\n  self._eachPossiblyMatchingDoc(selector, function (doc, id) {\n    if (matcher.documentMatches(doc).result)\n      remove.push(id);\n  });\n\n  var queriesToRecompute = [];\n  var queryRemove = [];\n  for (var i = 0; i < remove.length; i++) {\n    var removeId = remove[i];\n    var removeDoc = self._docs.get(removeId);\n    _.each(self.queries, function (query, qid) {\n      if (query.dirty) return;\n\n      if (query.matcher.documentMatches(removeDoc).result) {\n        if (query.cursor.skip || query.cursor.limit)\n          queriesToRecompute.push(qid);\n        else\n          queryRemove.push({qid: qid, doc: removeDoc});\n      }\n    });\n    self._saveOriginal(removeId, removeDoc);\n    self._docs.remove(removeId);\n  }\n\n  // run live query callbacks _after_ we've removed the documents.\n  _.each(queryRemove, function (remove) {\n    var query = self.queries[remove.qid];\n    if (query) {\n      query.distances && query.distances.remove(remove.doc._id);\n      LocalCollection._removeFromResults(query, remove.doc);\n    }\n  });\n  _.each(queriesToRecompute, function (qid) {\n    var query = self.queries[qid];\n    if (query)\n      self._recomputeResults(query);\n  });\n  self._observeQueue.drain();\n  result = remove.length;\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, result);\n    });\n  return result;\n};\n\n// XXX atomicity: if multi is true, and one modification fails, do\n// we rollback the whole operation, or what?\nLocalCollection.prototype.update = function (selector, mod, options, callback) {\n  var self = this;\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n  if (!options) options = {};\n\n  var matcher = new Minimongo.Matcher(selector);\n\n  // Save the original results of any query that we might need to\n  // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n  // it. (We don't need to save the original results of paused queries because\n  // they already have a resultsSnapshot and we won't be diffing in\n  // _recomputeResults.)\n  var qidToOriginalResults = {};\n  // We should only clone each document once, even if it appears in multiple queries\n  var docMap = new LocalCollection._IdMap;\n  var idsMatchedBySelector = LocalCollection._idsMatchedBySelector(selector);\n\n  _.each(self.queries, function (query, qid) {\n    if ((query.cursor.skip || query.cursor.limit) && ! self.paused) {\n      // Catch the case of a reactive `count()` on a cursor with skip\n      // or limit, which registers an unordered observe. This is a\n      // pretty rare case, so we just clone the entire result set with\n      // no optimizations for documents that appear in these result\n      // sets and other queries.\n      if (query.results instanceof LocalCollection._IdMap) {\n        qidToOriginalResults[qid] = query.results.clone();\n        return;\n      }\n\n      if (!(query.results instanceof Array)) {\n        throw new Error(\"Assertion failed: query.results not an array\");\n      }\n\n      // Clones a document to be stored in `qidToOriginalResults`\n      // because it may be modified before the new and old result sets\n      // are diffed. But if we know exactly which document IDs we're\n      // going to modify, then we only need to clone those.\n      var memoizedCloneIfNeeded = function(doc) {\n        if (docMap.has(doc._id)) {\n          return docMap.get(doc._id);\n        } else {\n          var docToMemoize;\n\n          if (idsMatchedBySelector && !_.any(idsMatchedBySelector, function(id) {\n            return EJSON.equals(id, doc._id);\n          })) {\n            docToMemoize = doc;\n          } else {\n            docToMemoize = EJSON.clone(doc);\n          }\n\n          docMap.set(doc._id, docToMemoize);\n          return docToMemoize;\n        }\n      };\n\n      qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n    }\n  });\n  var recomputeQids = {};\n\n  var updateCount = 0;\n\n  self._eachPossiblyMatchingDoc(selector, function (doc, id) {\n    var queryResult = matcher.documentMatches(doc);\n    if (queryResult.result) {\n      // XXX Should we save the original even if mod ends up being a no-op?\n      self._saveOriginal(id, doc);\n      self._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);\n      ++updateCount;\n      if (!options.multi)\n        return false;  // break\n    }\n    return true;\n  });\n\n  _.each(recomputeQids, function (dummy, qid) {\n    var query = self.queries[qid];\n    if (query)\n      self._recomputeResults(query, qidToOriginalResults[qid]);\n  });\n  self._observeQueue.drain();\n\n  // If we are doing an upsert, and we didn't modify any documents yet, then\n  // it's time to do an insert. Figure out what document we are inserting, and\n  // generate an id for it.\n  var insertedId;\n  if (updateCount === 0 && options.upsert) {\n    var newDoc = LocalCollection._removeDollarOperators(selector);\n    LocalCollection._modify(newDoc, mod, {isInsert: true});\n    if (! newDoc._id && options.insertedId)\n      newDoc._id = options.insertedId;\n    insertedId = self.insert(newDoc);\n    updateCount = 1;\n  }\n\n  // Return the number of affected documents, or in the upsert case, an object\n  // containing the number of affected docs and the id of the doc that was\n  // inserted, if any.\n  var result;\n  if (options._returnObject) {\n    result = {\n      numberAffected: updateCount\n    };\n    if (insertedId !== undefined)\n      result.insertedId = insertedId;\n  } else {\n    result = updateCount;\n  }\n\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, result);\n    });\n  return result;\n};\n\n// A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n// equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:\n// true }).\nLocalCollection.prototype.upsert = function (selector, mod, options, callback) {\n  var self = this;\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  return self.update(selector, mod, _.extend({}, options, {\n    upsert: true,\n    _returnObject: true\n  }), callback);\n};\n\nLocalCollection.prototype._modifyAndNotify = function (\n    doc, mod, recomputeQids, arrayIndices) {\n  var self = this;\n\n  var matched_before = {};\n  for (var qid in self.queries) {\n    var query = self.queries[qid];\n    if (query.dirty) continue;\n\n    if (query.ordered) {\n      matched_before[qid] = query.matcher.documentMatches(doc).result;\n    } else {\n      // Because we don't support skip or limit (yet) in unordered queries, we\n      // can just do a direct lookup.\n      matched_before[qid] = query.results.has(doc._id);\n    }\n  }\n\n  var old_doc = EJSON.clone(doc);\n\n  LocalCollection._modify(doc, mod, {arrayIndices: arrayIndices});\n\n  for (qid in self.queries) {\n    query = self.queries[qid];\n    if (query.dirty) continue;\n\n    var before = matched_before[qid];\n    var afterMatch = query.matcher.documentMatches(doc);\n    var after = afterMatch.result;\n    if (after && query.distances && afterMatch.distance !== undefined)\n      query.distances.set(doc._id, afterMatch.distance);\n\n    if (query.cursor.skip || query.cursor.limit) {\n      // We need to recompute any query where the doc may have been in the\n      // cursor's window either before or after the update. (Note that if skip\n      // or limit is set, \"before\" and \"after\" being true do not necessarily\n      // mean that the document is in the cursor's output after skip/limit is\n      // applied... but if they are false, then the document definitely is NOT\n      // in the output. So it's safe to skip recompute if neither before or\n      // after are true.)\n      if (before || after)\n        recomputeQids[qid] = true;\n    } else if (before && !after) {\n      LocalCollection._removeFromResults(query, doc);\n    } else if (!before && after) {\n      LocalCollection._insertInResults(query, doc);\n    } else if (before && after) {\n      LocalCollection._updateInResults(query, doc, old_doc);\n    }\n  }\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\nLocalCollection._insertInResults = function (query, doc) {\n  var fields = EJSON.clone(doc);\n  delete fields._id;\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      var i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results, doc);\n      var next = query.results[i+1];\n      if (next)\n        next = next._id;\n      else\n        next = null;\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._removeFromResults = function (query, doc) {\n  if (query.ordered) {\n    var i = LocalCollection._findInOrderedResults(query, doc);\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    var id = doc._id;  // in case callback mutates doc\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\nLocalCollection._updateInResults = function (query, doc, old_doc) {\n  if (!EJSON.equals(doc._id, old_doc._id))\n    throw new Error(\"Can't change a doc's _id while updating\");\n  var projectionFn = query.projectionFn;\n  var changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc), projectionFn(old_doc));\n\n  if (!query.ordered) {\n    if (!_.isEmpty(changedFields)) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n    return;\n  }\n\n  var orig_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (!_.isEmpty(changedFields))\n    query.changed(doc._id, changedFields);\n  if (!query.sorter)\n    return;\n\n  // just take it out and put it back in again, and see if the index\n  // changes\n  query.results.splice(orig_idx, 1);\n  var new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results, doc);\n  if (orig_idx !== new_idx) {\n    var next = query.results[new_idx+1];\n    if (next)\n      next = next._id;\n    else\n      next = null;\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\n// Recomputes the results of a query and runs observe callbacks for the\n// difference between the previous results and the current results (unless\n// paused). Used for skip/limit queries.\n//\n// When this is used by insert or remove, it can just use query.results for the\n// old results (and there's no need to pass in oldResults), because these\n// operations don't mutate the documents in the collection. Update needs to pass\n// in an oldResults which was deep-copied before the modifier was applied.\n//\n// oldResults is guaranteed to be ignored if the query is not paused.\nLocalCollection.prototype._recomputeResults = function (query, oldResults) {\n  var self = this;\n  if (self.paused) {\n    // There's no reason to recompute the results now as we're still paused.\n    // By flagging the query as \"dirty\", the recompute will be performed\n    // when resumeObservers is called.\n    query.dirty = true;\n    return;\n  }\n\n  if (! self.paused && ! oldResults)\n    oldResults = query.results;\n  if (query.distances)\n    query.distances.clear();\n  query.results = query.cursor._getRawObjects({\n    ordered: query.ordered, distances: query.distances});\n\n  if (! self.paused) {\n    LocalCollection._diffQueryChanges(\n      query.ordered, oldResults, query.results, query,\n      { projectionFn: query.projectionFn });\n  }\n};\n\n\nLocalCollection._findInOrderedResults = function (query, doc) {\n  if (!query.ordered)\n    throw new Error(\"Can't call _findInOrderedResults on unordered query\");\n  for (var i = 0; i < query.results.length; i++)\n    if (query.results[i] === doc)\n      return i;\n  throw Error(\"object missing from query\");\n};\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = function (cmp, array, value) {\n  var first = 0, rangeLength = array.length;\n\n  while (rangeLength > 0) {\n    var halfRange = Math.floor(rangeLength/2);\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      rangeLength -= halfRange + 1;\n    } else {\n      rangeLength = halfRange;\n    }\n  }\n  return first;\n};\n\nLocalCollection._insertInSortedList = function (cmp, array, value) {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  var idx = LocalCollection._binarySearch(cmp, array, value);\n  array.splice(idx, 0, value);\n  return idx;\n};\n\n// To track what documents are affected by a piece of code, call saveOriginals()\n// before it and retrieveOriginals() after it. retrieveOriginals returns an\n// object whose keys are the ids of the documents that were affected since the\n// call to saveOriginals(), and the values are equal to the document's contents\n// at the time of saveOriginals. (In the case of an inserted document, undefined\n// is the value.) You must alternate between calls to saveOriginals() and\n// retrieveOriginals().\nLocalCollection.prototype.saveOriginals = function () {\n  var self = this;\n  if (self._savedOriginals)\n    throw new Error(\"Called saveOriginals twice without retrieveOriginals\");\n  self._savedOriginals = new LocalCollection._IdMap;\n};\nLocalCollection.prototype.retrieveOriginals = function () {\n  var self = this;\n  if (!self._savedOriginals)\n    throw new Error(\"Called retrieveOriginals without saveOriginals\");\n\n  var originals = self._savedOriginals;\n  self._savedOriginals = null;\n  return originals;\n};\n\nLocalCollection.prototype._saveOriginal = function (id, doc) {\n  var self = this;\n  // Are we even trying to save originals?\n  if (!self._savedOriginals)\n    return;\n  // Have we previously mutated the original (and so 'doc' is not actually\n  // original)?  (Note the 'has' check rather than truth: we store undefined\n  // here for inserted docs!)\n  if (self._savedOriginals.has(id))\n    return;\n  self._savedOriginals.set(id, EJSON.clone(doc));\n};\n\n// Pause the observers. No callbacks from observers will fire until\n// 'resumeObservers' is called.\nLocalCollection.prototype.pauseObservers = function () {\n  // No-op if already paused.\n  if (this.paused)\n    return;\n\n  // Set the 'paused' flag such that new observer messages don't fire.\n  this.paused = true;\n\n  // Take a snapshot of the query results for each query.\n  for (var qid in this.queries) {\n    var query = this.queries[qid];\n\n    query.resultsSnapshot = EJSON.clone(query.results);\n  }\n};\n\n// Resume the observers. Observers immediately receive change\n// notifications to bring them to the current state of the\n// database. Note that this is not just replaying all the changes that\n// happened during the pause, it is a smarter 'coalesced' diff.\nLocalCollection.prototype.resumeObservers = function () {\n  var self = this;\n  // No-op if not paused.\n  if (!this.paused)\n    return;\n\n  // Unset the 'paused' flag. Make sure to do this first, otherwise\n  // observer methods won't actually fire when we trigger them.\n  this.paused = false;\n\n  for (var qid in this.queries) {\n    var query = self.queries[qid];\n    if (query.dirty) {\n      query.dirty = false;\n      // re-compute results will perform `LocalCollection._diffQueryChanges` automatically.\n      self._recomputeResults(query, query.resultsSnapshot);\n    } else {\n      // Diff the current results against the snapshot and send to observers.\n      // pass the query object for its observer callbacks.\n      LocalCollection._diffQueryChanges(\n        query.ordered, query.resultsSnapshot, query.results, query,\n        {projectionFn: query.projectionFn});\n    }\n    query.resultsSnapshot = null;\n  }\n  self._observeQueue.drain();\n};\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/wrap_transform.js                                                                       //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = function (transform) {\n  if (! transform)\n    return null;\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__)\n    return transform;\n\n  var wrapped = function (doc) {\n    if (!_.has(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error(\"can only transform documents with _id\");\n    }\n\n    var id = doc._id;\n    // XXX consider making tracker a weak dependency and checking Package.tracker here\n    var transformed = Tracker.nonreactive(function () {\n      return transform(doc);\n    });\n\n    if (!isPlainObject(transformed)) {\n      throw new Error(\"transform must return object\");\n    }\n\n    if (_.has(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error(\"transformed document can't have different _id\");\n      }\n    } else {\n      transformed._id = id;\n    }\n    return transformed;\n  };\n  wrapped.__wrappedTransform__ = true;\n  return wrapped;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/helpers.js                                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as\n// arrays.\n// XXX maybe this should be EJSON.isArray\nisArray = function (x) {\n  return _.isArray(x) && !EJSON.isBinary(x);\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nisPlainObject = LocalCollection._isPlainObject = function (x) {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\nisIndexable = function (x) {\n  return isArray(x) || isPlainObject(x);\n};\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nisOperatorObject = function (valueSelector, inconsistentOK) {\n  if (!isPlainObject(valueSelector))\n    return false;\n\n  var theseAreOperators = undefined;\n  _.each(valueSelector, function (value, selKey) {\n    var thisIsOperator = selKey.substr(0, 1) === '$';\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK)\n        throw new Error(\"Inconsistent operator: \" +\n                        JSON.stringify(valueSelector));\n      theseAreOperators = false;\n    }\n  });\n  return !!theseAreOperators;  // {} has no operators\n};\n\n\n// string can be converted to integer\nisNumericKey = function (s) {\n  return /^[0-9]+$/.test(s);\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/selector.js                                                                             //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// The minimongo selector compiler!\n\n// Terminology:\n//  - a \"selector\" is the EJSON object representing a selector\n//  - a \"matcher\" is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a \"result object\" is an object with a \"result\" field and maybe\n//    distance and arrayIndices.\n//  - a \"branched value\" is an object with a \"value\" field and maybe\n//    \"dontIterate\" and \"arrayIndices\".\n//  - a \"document\" is a top-level object that can be stored in a collection.\n//  - a \"lookup function\" is a function that takes in a document and returns\n//    an array of \"branched values\".\n//  - a \"branched matcher\" maps from an array of branched values to a result\n//    object.\n//  - an \"element matcher\" maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nMinimongo.Matcher = function (selector) {\n  var self = this;\n  // A set (object mapping string -> *) of all of the document paths looked\n  // at by the selector. Also includes the empty string if it may look at any\n  // path (eg, $where).\n  self._paths = {};\n  // Set to true if compilation finds a $near.\n  self._hasGeoQuery = false;\n  // Set to true if compilation finds a $where.\n  self._hasWhere = false;\n  // Set to false if compilation finds anything other than a simple equality or\n  // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with\n  // scalars as operands.\n  self._isSimple = true;\n  // Set to a dummy document which always matches this Matcher. Or set to null\n  // if such document is too hard to find.\n  self._matchingDocument = undefined;\n  // A clone of the original selector. It may just be a function if the user\n  // passed in a function; otherwise is definitely an object (eg, IDs are\n  // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n  // Sorter._useWithMatcher.\n  self._selector = null;\n  self._docMatcher = self._compileSelector(selector);\n};\n\n_.extend(Minimongo.Matcher.prototype, {\n  documentMatches: function (doc) {\n    if (!doc || typeof doc !== \"object\") {\n      throw Error(\"documentMatches needs a document\");\n    }\n    return this._docMatcher(doc);\n  },\n  hasGeoQuery: function () {\n    return this._hasGeoQuery;\n  },\n  hasWhere: function () {\n    return this._hasWhere;\n  },\n  isSimple: function () {\n    return this._isSimple;\n  },\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector: function (selector) {\n    var self = this;\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      self._isSimple = false;\n      self._selector = selector;\n      self._recordPathUsed('');\n      return function (doc) {\n        return {result: !!selector.call(doc)};\n      };\n    }\n\n    // shorthand -- scalars match _id\n    if (LocalCollection._selectorIsId(selector)) {\n      self._selector = {_id: selector};\n      self._recordPathUsed('_id');\n      return function (doc) {\n        return {result: EJSON.equals(doc._id, selector)};\n      };\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || (('_id' in selector) && !selector._id)) {\n      self._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (typeof(selector) === 'boolean' || isArray(selector) ||\n        EJSON.isBinary(selector))\n      throw new Error(\"Invalid selector: \" + selector);\n\n    self._selector = EJSON.clone(selector);\n    return compileDocumentSelector(selector, self, {isRoot: true});\n  },\n  _recordPathUsed: function (path) {\n    this._paths[path] = true;\n  },\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths: function () {\n    return _.keys(this._paths);\n  }\n});\n\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nvar compileDocumentSelector = function (docSelector, matcher, options) {\n  options = options || {};\n  var docMatchers = [];\n  _.each(docSelector, function (subSelector, key) {\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!_.has(LOGICAL_OPERATORS, key))\n        throw new Error(\"Unrecognized logical operator: \" + key);\n      matcher._isSimple = false;\n      docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher,\n                                              options.inElemMatch));\n    } else {\n      // Record this path, but only if we aren't in an elemMatcher, since in an\n      // elemMatch this is a path inside an object in an array, not in the doc\n      // root.\n      if (!options.inElemMatch)\n        matcher._recordPathUsed(key);\n      var lookUpByIndex = makeLookupFunction(key);\n      var valueMatcher =\n        compileValueSelector(subSelector, matcher, options.isRoot);\n      docMatchers.push(function (doc) {\n        var branchValues = lookUpByIndex(doc);\n        return valueMatcher(branchValues);\n      });\n    }\n  });\n\n  return andDocumentMatchers(docMatchers);\n};\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nvar compileValueSelector = function (valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector));\n  } else if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  } else {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(valueSelector));\n  }\n};\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nvar convertElementMatcherToBranchedMatcher = function (\n    elementMatcher, options) {\n  options = options || {};\n  return function (branches) {\n    var expanded = branches;\n    if (!options.dontExpandLeafArrays) {\n      expanded = expandArraysInBranches(\n        branches, options.dontIncludeLeafArrays);\n    }\n    var ret = {};\n    ret.result = _.any(expanded, function (element) {\n      var matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices)\n          element.arrayIndices = [matched];\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices)\n        ret.arrayIndices = element.arrayIndices;\n\n      return matched;\n    });\n    return ret;\n  };\n};\n\n// Takes a RegExp object and returns an element matcher.\nregexpElementMatcher = function (regexp) {\n  return function (value) {\n    if (value instanceof RegExp) {\n      // Comparing two regexps means seeing if the regexps are identical\n      // (really!). Underscore knows how.\n      return _.isEqual(value, regexp);\n    }\n    // Regexps only work against strings.\n    if (typeof value !== 'string')\n      return false;\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n};\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nequalityElementMatcher = function (elementSelector) {\n  if (isOperatorObject(elementSelector))\n    throw Error(\"Can't create equalityValueSelector for operator object\");\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  if (elementSelector == null) {  // undefined or null\n    return function (value) {\n      return value == null;  // undefined or null\n    };\n  }\n\n  return function (value) {\n    return LocalCollection._f._equal(elementSelector, value);\n  };\n};\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nvar operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n\n  var operatorMatchers = [];\n  _.each(valueSelector, function (operand, operator) {\n    var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) &&\n      _.isNumber(operand);\n    var simpleEquality = _.contains(['$ne', '$eq'], operator) && !_.isObject(operand);\n    var simpleInclusion = _.contains(['$in', '$nin'], operator) &&\n      _.isArray(operand) && !_.any(operand, _.isObject);\n\n    if (! (simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (_.has(VALUE_OPERATORS, operator)) {\n      operatorMatchers.push(\n        VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));\n    } else if (_.has(ELEMENT_OPERATORS, operator)) {\n      var options = ELEMENT_OPERATORS[operator];\n      operatorMatchers.push(\n        convertElementMatcherToBranchedMatcher(\n          options.compileElementSelector(\n            operand, valueSelector, matcher),\n          options));\n    } else {\n      throw new Error(\"Unrecognized operator: \" + operator);\n    }\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n};\n\nvar compileArrayOfDocumentSelectors = function (\n    selectors, matcher, inElemMatch) {\n  if (!isArray(selectors) || _.isEmpty(selectors))\n    throw Error(\"$and/$or/$nor must be nonempty array\");\n  return _.map(selectors, function (subSelector) {\n    if (!isPlainObject(subSelector))\n      throw Error(\"$or/$and/$nor entries need to be full objects\");\n    return compileDocumentSelector(\n      subSelector, matcher, {inElemMatch: inElemMatch});\n  });\n};\n\n// Operators that appear at the top level of a document selector.\nvar LOGICAL_OPERATORS = {\n  $and: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n    return andDocumentMatchers(matchers);\n  },\n\n  $or: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1)\n      return matchers[0];\n\n    return function (doc) {\n      var result = _.any(matchers, function (f) {\n        return f(doc).result;\n      });\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result: result};\n    };\n  },\n\n  $nor: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n    return function (doc) {\n      var result = _.all(matchers, function (f) {\n        return !f(doc).result;\n      });\n      // Never set arrayIndices, because we only match if nothing in particular\n      // \"matched\" (and because this is consistent with MongoDB).\n      return {result: result};\n    };\n  },\n\n  $where: function (selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add \"return\"; not sure exactly what it is.\n      selectorValue = Function(\"obj\", \"return \" + selectorValue);\n    }\n    return function (doc) {\n      // We make the document available as both `this` and `obj`.\n      // XXX not sure what we should do if this throws\n      return {result: selectorValue.call(doc, doc)};\n    };\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment: function () {\n    return function () {\n      return {result: true};\n    };\n  }\n};\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nvar invertBranchedMatcher = function (branchedMatcher) {\n  return function (branchValues) {\n    var invertMe = branchedMatcher(branchValues);\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !invertMe.result};\n  };\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nvar VALUE_OPERATORS = {\n  $eq: function (operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand));\n  },\n  $not: function (operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)));\n  },\n  $nin: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(\n      ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n  },\n  $exists: function (operand) {\n    var exists = convertElementMatcherToBranchedMatcher(function (value) {\n      return value !== undefined;\n    });\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options: function (operand, valueSelector) {\n    if (!_.has(valueSelector, '$regex'))\n      throw Error(\"$options needs a $regex\");\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance: function (operand, valueSelector) {\n    if (!valueSelector.$near)\n      throw Error(\"$maxDistance needs a $near\");\n    return everythingMatcher;\n  },\n  $all: function (operand, valueSelector, matcher) {\n    if (!isArray(operand))\n      throw Error(\"$all requires array\");\n    // Not sure why, but this seems to be what MongoDB does.\n    if (_.isEmpty(operand))\n      return nothingMatcher;\n\n    var branchedMatchers = [];\n    _.each(operand, function (criterion) {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion))\n        throw Error(\"no $ expressions in $all\");\n      // This is always a regexp or equality selector.\n      branchedMatchers.push(compileValueSelector(criterion, matcher));\n    });\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near: function (operand, valueSelector, matcher, isRoot) {\n    if (!isRoot)\n      throw Error(\"$near can't be inside another $ operator\");\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property.\n\n    var maxDistance, point, distance;\n    if (isPlainObject(operand) && _.has(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = function (value) {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value || !value.type)\n          return null;\n        if (value.type === \"Point\") {\n          return GeoJSON.pointDistance(point, value);\n        } else {\n          return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n            ? 0 : maxDistance + 1;\n        }\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n      if (!isArray(operand) && !isPlainObject(operand))\n        throw Error(\"$near argument must be coordinate pair or GeoJSON\");\n      point = pointToArray(operand);\n      distance = function (value) {\n        if (!isArray(value) && !isPlainObject(value))\n          return null;\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return function (branchedValues) {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      branchedValues = expandArraysInBranches(branchedValues);\n      var result = {result: false};\n      _.each(branchedValues, function (branch) {\n        var curDistance = distance(branch.value);\n        // Skip branches that aren't real points or are too far away.\n        if (curDistance === null || curDistance > maxDistance)\n          return;\n        // Skip anything that's a tie.\n        if (result.distance !== undefined && result.distance <= curDistance)\n          return;\n        result.result = true;\n        result.distance = curDistance;\n        if (!branch.arrayIndices)\n          delete result.arrayIndices;\n        else\n          result.arrayIndices = branch.arrayIndices;\n      });\n      return result;\n    };\n  }\n};\n\n// Helpers for $near.\nvar distanceCoordinatePairs = function (a, b) {\n  a = pointToArray(a);\n  b = pointToArray(b);\n  var x = a[0] - b[0];\n  var y = a[1] - b[1];\n  if (_.isNaN(x) || _.isNaN(y))\n    return null;\n  return Math.sqrt(x * x + y * y);\n};\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nvar pointToArray = function (point) {\n  return _.map(point, _.identity);\n};\n\n// Helper for $lt/$gt/$lte/$gte.\nvar makeInequality = function (cmpValueComparator) {\n  return {\n    compileElementSelector: function (operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (isArray(operand)) {\n        return function () {\n          return false;\n        };\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined)\n        operand = null;\n\n      var operandType = LocalCollection._f._type(operand);\n\n      return function (value) {\n        if (value === undefined)\n          value = null;\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType)\n          return false;\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    }\n  };\n};\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nELEMENT_OPERATORS = {\n  $lt: makeInequality(function (cmpValue) {\n    return cmpValue < 0;\n  }),\n  $gt: makeInequality(function (cmpValue) {\n    return cmpValue > 0;\n  }),\n  $lte: makeInequality(function (cmpValue) {\n    return cmpValue <= 0;\n  }),\n  $gte: makeInequality(function (cmpValue) {\n    return cmpValue >= 0;\n  }),\n  $mod: {\n    compileElementSelector: function (operand) {\n      if (!(isArray(operand) && operand.length === 2\n            && typeof(operand[0]) === 'number'\n            && typeof(operand[1]) === 'number')) {\n        throw Error(\"argument to $mod must be an array of two numbers\");\n      }\n      // XXX could require to be ints or round or something\n      var divisor = operand[0];\n      var remainder = operand[1];\n      return function (value) {\n        return typeof value === 'number' && value % divisor === remainder;\n      };\n    }\n  },\n  $in: {\n    compileElementSelector: function (operand) {\n      if (!isArray(operand))\n        throw Error(\"$in needs an array\");\n\n      var elementMatchers = [];\n      _.each(operand, function (option) {\n        if (option instanceof RegExp)\n          elementMatchers.push(regexpElementMatcher(option));\n        else if (isOperatorObject(option))\n          throw Error(\"cannot nest $ under $in\");\n        else\n          elementMatchers.push(equalityElementMatcher(option));\n      });\n\n      return function (value) {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined)\n          value = null;\n        return _.any(elementMatchers, function (e) {\n          return e(value);\n        });\n      };\n    }\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error(\"$size needs a number\");\n      }\n      return function (value) {\n        return isArray(value) && value.length === operand;\n      };\n    }\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand !== 'number')\n        throw Error(\"$type needs a number\");\n      return function (value) {\n        return value !== undefined\n          && LocalCollection._f._type(value) === operand;\n      };\n    }\n  },\n  $regex: {\n    compileElementSelector: function (operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp))\n        throw Error(\"$regex has to be a string or RegExp\");\n\n      var regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself. (See also\n        // Mongo.Collection._rewriteSelector.)\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options))\n          throw new Error(\"Only the i, m, and g regexp options are supported\");\n\n        var regexSource = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(regexSource, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n      return regexpElementMatcher(regexp);\n    }\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isPlainObject(operand))\n        throw Error(\"$elemMatch need an object\");\n\n      var subMatcher, isDocMatcher;\n      if (isOperatorObject(_.omit(operand, _.keys(LOGICAL_OPERATORS)), true)) {\n        subMatcher = compileValueSelector(operand, matcher);\n        isDocMatcher = false;\n      } else {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher = compileDocumentSelector(operand, matcher,\n                                             {inElemMatch: true});\n        isDocMatcher = true;\n      }\n\n      return function (value) {\n        if (!isArray(value))\n          return false;\n        for (var i = 0; i < value.length; ++i) {\n          var arrayElement = value[i];\n          var arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isPlainObject(arrayElement) && !isArray(arrayElement))\n              return false;\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result)\n            return i;   // specially understood to mean \"use as arrayIndices\"\n        }\n        return false;\n      };\n    }\n  }\n};\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we \"branch\". When we \"branch\", if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively \"branch\" over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually \"parse\" arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like \"implicit\", but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nmakeLookupFunction = function (key, options) {\n  options = options || {};\n  var parts = key.split('.');\n  var firstPart = parts.length ? parts[0] : '';\n  var firstPartIsNumeric = isNumericKey(firstPart);\n  var nextPartIsNumeric = parts.length >= 2 && isNumericKey(parts[1]);\n  var lookupRest;\n  if (parts.length > 1) {\n    lookupRest = makeLookupFunction(parts.slice(1).join('.'));\n  }\n\n  var omitUnnecessaryFields = function (retVal) {\n    if (!retVal.dontIterate)\n      delete retVal.dontIterate;\n    if (retVal.arrayIndices && !retVal.arrayIndices.length)\n      delete retVal.arrayIndices;\n    return retVal;\n  };\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return function (doc, arrayIndices) {\n    if (!arrayIndices)\n      arrayIndices = [];\n\n    if (isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(firstPartIsNumeric && firstPart < doc.length))\n        return [];\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    }\n\n    // Do our first lookup.\n    var firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as \"don't iterate\".\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        value: firstLevel,\n        dontIterate: isArray(doc) && isArray(firstLevel),\n        arrayIndices: arrayIndices})];\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (isArray(doc))\n        return [];\n      return [omitUnnecessaryFields({value: undefined,\n                                      arrayIndices: arrayIndices})];\n    }\n\n    var result = [];\n    var appendToResult = function (more) {\n      Array.prototype.push.apply(result, more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also \"branch\": try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // \"look up this index\" in that case, not \"also look up this index in all\n    // the elements of the array\".\n    if (isArray(firstLevel) && !(nextPartIsNumeric && options.forSort)) {\n      _.each(firstLevel, function (branch, arrayIndex) {\n        if (isPlainObject(branch)) {\n          appendToResult(lookupRest(\n            branch,\n            arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n};\nMinimongoTest.makeLookupFunction = makeLookupFunction;\n\nexpandArraysInBranches = function (branches, skipTheArrays) {\n  var branchesOut = [];\n  _.each(branches, function (branch) {\n    var thisIsArray = isArray(branch.value);\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({\n        value: branch.value,\n        arrayIndices: branch.arrayIndices\n      });\n    }\n    if (thisIsArray && !branch.dontIterate) {\n      _.each(branch.value, function (leaf, i) {\n        branchesOut.push({\n          value: leaf,\n          arrayIndices: (branch.arrayIndices || []).concat(i)\n        });\n      });\n    }\n  });\n  return branchesOut;\n};\n\nvar nothingMatcher = function (docOrBranchedValues) {\n  return {result: false};\n};\n\nvar everythingMatcher = function (docOrBranchedValues) {\n  return {result: true};\n};\n\n\n// NB: We are cheating and using this function to implement \"AND\" for both\n// \"document matchers\" and \"branched matchers\". They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of \"branched values\".\nvar andSomeMatchers = function (subMatchers) {\n  if (subMatchers.length === 0)\n    return everythingMatcher;\n  if (subMatchers.length === 1)\n    return subMatchers[0];\n\n  return function (docOrBranches) {\n    var ret = {};\n    ret.result = _.all(subMatchers, function (f) {\n      var subResult = f(docOrBranches);\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result && subResult.distance !== undefined\n          && ret.distance === undefined) {\n        ret.distance = subResult.distance;\n      }\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        ret.arrayIndices = subResult.arrayIndices;\n      }\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!ret.result) {\n      delete ret.distance;\n      delete ret.arrayIndices;\n    }\n    return ret;\n  };\n};\n\nvar andDocumentMatchers = andSomeMatchers;\nvar andBranchedMatchers = andSomeMatchers;\n\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n\n  _type: function (v) {\n    if (typeof v === \"number\")\n      return 1;\n    if (typeof v === \"string\")\n      return 2;\n    if (typeof v === \"boolean\")\n      return 8;\n    if (isArray(v))\n      return 4;\n    if (v === null)\n      return 10;\n    if (v instanceof RegExp)\n      // note that typeof(/x/) === \"object\"\n      return 11;\n    if (typeof v === \"function\")\n      return 13;\n    if (v instanceof Date)\n      return 9;\n    if (EJSON.isBinary(v))\n      return 5;\n    if (v instanceof MongoID.ObjectID)\n      return 7;\n    return 3; // object\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal: function (a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of\n  // different types\n  _typeorder: function (t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [-1,  // (not a type)\n            1,   // number\n            2,   // string\n            3,   // object\n            4,   // array\n            5,   // binary\n            -1,  // deprecated\n            6,   // ObjectID\n            7,   // bool\n            8,   // Date\n            0,   // null\n            9,   // RegExp\n            -1,  // deprecated\n            100, // JS code\n            2,   // deprecated (symbol)\n            100, // JS code\n            1,   // 32-bit int\n            8,   // Mongo timestamp\n            1    // 64-bit int\n           ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp: function (a, b) {\n    if (a === undefined)\n      return b === undefined ? 0 : -1;\n    if (b === undefined)\n      return 1;\n    var ta = LocalCollection._f._type(a);\n    var tb = LocalCollection._f._type(b);\n    var oa = LocalCollection._f._typeorder(ta);\n    var ob = LocalCollection._f._typeorder(tb);\n    if (oa !== ob)\n      return oa < ob ? -1 : 1;\n    if (ta !== tb)\n      // XXX need to implement this if we implement Symbol or integers, or\n      // Timestamp\n      throw Error(\"Missing type coercion logic in _cmp\");\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n    if (tb === 2) // string\n      return a < b ? -1 : (a === b ? 0 : 1);\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      var to_array = function (obj) {\n        var ret = [];\n        for (var key in obj) {\n          ret.push(key);\n          ret.push(obj[key]);\n        }\n        return ret;\n      };\n      return LocalCollection._f._cmp(to_array(a), to_array(b));\n    }\n    if (ta === 4) { // Array\n      for (var i = 0; ; i++) {\n        if (i === a.length)\n          return (i === b.length) ? 0 : -1;\n        if (i === b.length)\n          return 1;\n        var s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0)\n          return s;\n      }\n    }\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length)\n        return a.length - b.length;\n      for (i = 0; i < a.length; i++) {\n        if (a[i] < b[i])\n          return -1;\n        if (a[i] > b[i])\n          return 1;\n      }\n      return 0;\n    }\n    if (ta === 8) { // boolean\n      if (a) return b ? 0 : 1;\n      return b ? -1 : 0;\n    }\n    if (ta === 10) // null\n      return 0;\n    if (ta === 11) // regexp\n      throw Error(\"Sorting not supported on regular expression\"); // XXX\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error(\"Sorting not supported on Javascript code\"); // XXX\n    throw Error(\"Unknown type to sort\");\n  }\n};\n\n// Oddball function used by upsert.\nLocalCollection._removeDollarOperators = function (selector) {\n  var selectorDoc = {};\n  for (var k in selector)\n    if (k.substr(0, 1) !== '$')\n      selectorDoc[k] = selector[k];\n  return selectorDoc;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/sort.js                                                                                 //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nMinimongo.Sorter = function (spec, options) {\n  var self = this;\n  options = options || {};\n\n  self._sortSpecParts = [];\n  self._sortFunction = null;\n\n  var addSpecPart = function (path, ascending) {\n    if (!path)\n      throw Error(\"sort keys must be non-empty\");\n    if (path.charAt(0) === '$')\n      throw Error(\"unsupported sort key: \" + path);\n    self._sortSpecParts.push({\n      path: path,\n      lookup: makeLookupFunction(path, {forSort: true}),\n      ascending: ascending\n    });\n  };\n\n  if (spec instanceof Array) {\n    for (var i = 0; i < spec.length; i++) {\n      if (typeof spec[i] === \"string\") {\n        addSpecPart(spec[i], true);\n      } else {\n        addSpecPart(spec[i][0], spec[i][1] !== \"desc\");\n      }\n    }\n  } else if (typeof spec === \"object\") {\n    _.each(spec, function (value, key) {\n      addSpecPart(key, value >= 0);\n    });\n  } else if (typeof spec === \"function\") {\n    self._sortFunction = spec;\n  } else {\n    throw Error(\"Bad sort specification: \" + JSON.stringify(spec));\n  }\n\n  // If a function is specified for sorting, we skip the rest.\n  if (self._sortFunction)\n    return;\n\n  // To implement affectedByModifier, we piggy-back on top of Matcher's\n  // affectedByModifier code; we create a selector that is affected by the same\n  // modifiers as this sort order. This is only implemented on the server.\n  if (self.affectedByModifier) {\n    var selector = {};\n    _.each(self._sortSpecParts, function (spec) {\n      selector[spec.path] = 1;\n    });\n    self._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n  }\n\n  self._keyComparator = composeComparators(\n    _.map(self._sortSpecParts, function (spec, i) {\n      return self._keyFieldComparator(i);\n    }));\n\n  // If you specify a matcher for this Sorter, _keyFilter may be set to a\n  // function which selects whether or not a given \"sort key\" (tuple of values\n  // for the different sort spec fields) is compatible with the selector.\n  self._keyFilter = null;\n  options.matcher && self._useWithMatcher(options.matcher);\n};\n\n// In addition to these methods, sorter_project.js defines combineIntoProjection\n// on the server only.\n_.extend(Minimongo.Sorter.prototype, {\n  getComparator: function (options) {\n    var self = this;\n\n    // If we have no distances, just use the comparator from the source\n    // specification (which defaults to \"everything is equal\".\n    if (!options || !options.distances) {\n      return self._getBaseComparator();\n    }\n\n    var distances = options.distances;\n\n    // Return a comparator which first tries the sort specification, and if that\n    // says \"it's equal\", breaks ties using $near distances.\n    return composeComparators([self._getBaseComparator(), function (a, b) {\n      if (!distances.has(a._id))\n        throw Error(\"Missing distance for \" + a._id);\n      if (!distances.has(b._id))\n        throw Error(\"Missing distance for \" + b._id);\n      return distances.get(a._id) - distances.get(b._id);\n    }]);\n  },\n\n  _getPaths: function () {\n    var self = this;\n    return _.pluck(self._sortSpecParts, 'path');\n  },\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc: function (doc) {\n    var self = this;\n    var minKey = null;\n\n    self._generateKeysFromDoc(doc, function (key) {\n      if (!self._keyCompatibleWithSelector(key))\n        return;\n\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n      if (self._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    // This could happen if our key filter somehow filters out all the keys even\n    // though somehow the selector matches.\n    if (minKey === null)\n      throw Error(\"sort selector found no keys in doc?\");\n    return minKey;\n  },\n\n  _keyCompatibleWithSelector: function (key) {\n    var self = this;\n    return !self._keyFilter || self._keyFilter(key);\n  },\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc: function (doc, cb) {\n    var self = this;\n\n    if (self._sortSpecParts.length === 0)\n      throw new Error(\"can't generate keys without a spec\");\n\n    // maps index -> ({'' -> value} or {path -> value})\n    var valuesByIndexAndPath = [];\n\n    var pathFromIndices = function (indices) {\n      return indices.join(',') + ',';\n    };\n\n    var knownPaths = null;\n\n    _.each(self._sortSpecParts, function (spec, whichField) {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      var branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one null value.\n      if (!branches.length)\n        branches = [{value: null}];\n\n      var usedPaths = false;\n      valuesByIndexAndPath[whichField] = {};\n      _.each(branches, function (branch) {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1)\n            throw Error(\"multiple branches but no array used?\");\n          valuesByIndexAndPath[whichField][''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n        var path = pathFromIndices(branch.arrayIndices);\n        if (_.has(valuesByIndexAndPath[whichField], path))\n          throw Error(\"duplicate path: \" + path);\n        valuesByIndexAndPath[whichField][path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !_.has(knownPaths, path)) {\n          throw Error(\"cannot index parallel arrays\");\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!_.has(valuesByIndexAndPath[whichField], '') &&\n            _.size(knownPaths) !== _.size(valuesByIndexAndPath[whichField])) {\n          throw Error(\"cannot index parallel arrays!\");\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n        _.each(valuesByIndexAndPath[whichField], function (x, path) {\n          knownPaths[path] = true;\n        });\n      }\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      var soleKey = _.map(valuesByIndexAndPath, function (values) {\n        if (!_.has(values, ''))\n          throw Error(\"no value in sole key case?\");\n        return values[''];\n      });\n      cb(soleKey);\n      return;\n    }\n\n    _.each(knownPaths, function (x, path) {\n      var key = _.map(valuesByIndexAndPath, function (values) {\n        if (_.has(values, ''))\n          return values[''];\n        if (!_.has(values, path))\n          throw Error(\"missing path?\");\n        return values[path];\n      });\n      cb(key);\n    });\n  },\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys: function (key1, key2) {\n    var self = this;\n    if (key1.length !== self._sortSpecParts.length ||\n        key2.length !== self._sortSpecParts.length) {\n      throw Error(\"Key has wrong length\");\n    }\n\n    return self._keyComparator(key1, key2);\n  },\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator: function (i) {\n    var self = this;\n    var invert = !self._sortSpecParts[i].ascending;\n    return function (key1, key2) {\n      var compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      if (invert)\n        compare = -compare;\n      return compare;\n    };\n  },\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator: function () {\n    var self = this;\n\n    if (self._sortFunction)\n      return self._sortFunction;\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!self._sortSpecParts.length) {\n      return function (doc1, doc2) {\n        return 0;\n      };\n    }\n\n    return function (doc1, doc2) {\n      var key1 = self._getMinKeyFromDoc(doc1);\n      var key2 = self._getMinKeyFromDoc(doc2);\n      return self._compareKeys(key1, key2);\n    };\n  },\n\n  // In MongoDB, if you have documents\n  //    {_id: 'x', a: [1, 10]} and\n  //    {_id: 'y', a: [5, 15]},\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not\n  // match the selector, and 5 comes before 10).\n  //\n  // The way this works is pretty subtle!  For example, if the documents\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})\n  // both follow this rule (y before x).  (ie, you do have to apply this\n  // through $elemMatch.)\n  //\n  // So if you pass a matcher to this sorter's constructor, we will attempt to\n  // skip sort keys that don't match the selector. The logic here is pretty\n  // subtle and undocumented; we've gotten as close as we can figure out based\n  // on our understanding of Mongo's behavior.\n  _useWithMatcher: function (matcher) {\n    var self = this;\n\n    if (self._keyFilter)\n      throw Error(\"called _useWithMatcher twice?\");\n\n    // If we are only sorting by distance, then we're not going to bother to\n    // build a key filter.\n    // XXX figure out how geoqueries interact with this stuff\n    if (_.isEmpty(self._sortSpecParts))\n      return;\n\n    var selector = matcher._selector;\n\n    // If the user just passed a literal function to find(), then we can't get a\n    // key filter from it.\n    if (selector instanceof Function)\n      return;\n\n    var constraintsByPath = {};\n    _.each(self._sortSpecParts, function (spec, i) {\n      constraintsByPath[spec.path] = [];\n    });\n\n    _.each(selector, function (subSelector, key) {\n      // XXX support $and and $or\n\n      var constraints = constraintsByPath[key];\n      if (!constraints)\n        return;\n\n      // XXX it looks like the real MongoDB implementation isn't \"does the\n      // regexp match\" but \"does the value fall into a range named by the\n      // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But\n      // \"does the regexp match\" is a good approximation.\n      if (subSelector instanceof RegExp) {\n        // As far as we can tell, using either of the options that both we and\n        // MongoDB support ('i' and 'm') disables use of the key filter. This\n        // makes sense: MongoDB mostly appears to be calculating ranges of an\n        // index to use, which means it only cares about regexps that match\n        // one range (with a literal prefix), and both 'i' and 'm' prevent the\n        // literal prefix of the regexp from actually meaning one range.\n        if (subSelector.ignoreCase || subSelector.multiline)\n          return;\n        constraints.push(regexpElementMatcher(subSelector));\n        return;\n      }\n\n      if (isOperatorObject(subSelector)) {\n        _.each(subSelector, function (operand, operator) {\n          if (_.contains(['$lt', '$lte', '$gt', '$gte'], operator)) {\n            // XXX this depends on us knowing that these operators don't use any\n            // of the arguments to compileElementSelector other than operand.\n            constraints.push(\n              ELEMENT_OPERATORS[operator].compileElementSelector(operand));\n          }\n\n          // See comments in the RegExp block above.\n          if (operator === '$regex' && !subSelector.$options) {\n            constraints.push(\n              ELEMENT_OPERATORS.$regex.compileElementSelector(\n                operand, subSelector));\n          }\n\n          // XXX support {$exists: true}, $mod, $type, $in, $elemMatch\n        });\n        return;\n      }\n\n      // OK, it's an equality thing.\n      constraints.push(equalityElementMatcher(subSelector));\n    });\n\n    // It appears that the first sort field is treated differently from the\n    // others; we shouldn't create a key filter unless the first sort field is\n    // restricted, though after that point we can restrict the other sort fields\n    // or not as we wish.\n    if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path]))\n      return;\n\n    self._keyFilter = function (key) {\n      return _.all(self._sortSpecParts, function (specPart, index) {\n        return _.all(constraintsByPath[specPart.path], function (f) {\n          return f(key[index]);\n        });\n      });\n    };\n  }\n});\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nvar composeComparators = function (comparatorArray) {\n  return function (a, b) {\n    for (var i = 0; i < comparatorArray.length; ++i) {\n      var compare = comparatorArray[i](a, b);\n      if (compare !== 0)\n        return compare;\n    }\n    return 0;\n  };\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/projection.js                                                                           //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = function (fields) {\n  LocalCollection._checkSupportedProjection(fields);\n\n  var _idProjection = _.isUndefined(fields._id) ? true : fields._id;\n  var details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  var transform = function (doc, ruleTree) {\n    // Special case for \"sets\"\n    if (_.isArray(doc))\n      return _.map(doc, function (subdoc) { return transform(subdoc, ruleTree); });\n\n    var res = details.including ? {} : EJSON.clone(doc);\n    _.each(ruleTree, function (rule, key) {\n      if (!_.has(doc, key))\n        return;\n      if (_.isObject(rule)) {\n        // For sub-objects/subsets we branch\n        if (_.isObject(doc[key]))\n          res[key] = transform(doc[key], rule);\n        // Otherwise we don't even touch this subfield\n      } else if (details.including)\n        res[key] = EJSON.clone(doc[key]);\n      else\n        delete res[key];\n    });\n\n    return res;\n  };\n\n  return function (obj) {\n    var res = transform(obj, details.tree);\n\n    if (_idProjection && _.has(obj, '_id'))\n      res._id = obj._id;\n    if (!_idProjection && _.has(res, '_id'))\n      delete res._id;\n    return res;\n  };\n};\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nprojectionDetails = function (fields) {\n  // Find the non-_id keys (_id is handled specially because it is included unless\n  // explicitly excluded). Sort the keys, so that our code to detect overlaps\n  // like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  var fieldsKeys = _.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (fieldsKeys.length > 0 &&\n      !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(_.contains(fieldsKeys, '_id') && fields['_id']))\n    fieldsKeys = _.reject(fieldsKeys, function (key) { return key === '_id'; });\n\n  var including = null; // Unknown\n\n  _.each(fieldsKeys, function (keyPath) {\n    var rule = !!fields[keyPath];\n    if (including === null)\n      including = rule;\n    if (including !== rule)\n      // This error message is copied from MongoDB shell\n      throw MinimongoError(\"You cannot currently mix including and excluding fields.\");\n  });\n\n\n  var projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    function (path) { return including; },\n    function (node, path, fullPath) {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23 } }\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23, \"c\" : 44 } }\n      //\n      // Note, how second time the return set of keys is different.\n\n      var currentPath = fullPath;\n      var anotherPath = path;\n      throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath +\n                           \" found in fields option, using both of them may trigger \" +\n                           \"unexpected behavior. Did you mean to use only one of them?\");\n    });\n\n  return {\n    tree: projectionRulesTree,\n    including: including\n  };\n};\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\npathsToTree = function (paths, newLeafFn, conflictFn, tree) {\n  tree = tree || {};\n  _.each(paths, function (keyPath) {\n    var treePos = tree;\n    var pathArr = keyPath.split('.');\n\n    // use _.all just for iteration with break\n    var success = _.all(pathArr.slice(0, -1), function (key, idx) {\n      if (!_.has(treePos, key))\n        treePos[key] = {};\n      else if (!_.isObject(treePos[key])) {\n        treePos[key] = conflictFn(treePos[key],\n                                  pathArr.slice(0, idx + 1).join('.'),\n                                  keyPath);\n        // break out of loop if we are failing for this path\n        if (!_.isObject(treePos[key]))\n          return false;\n      }\n\n      treePos = treePos[key];\n      return true;\n    });\n\n    if (success) {\n      var lastKey = _.last(pathArr);\n      if (!_.has(treePos, lastKey))\n        treePos[lastKey] = newLeafFn(keyPath);\n      else\n        treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);\n    }\n  });\n\n  return tree;\n};\n\nLocalCollection._checkSupportedProjection = function (fields) {\n  if (!_.isObject(fields) || _.isArray(fields))\n    throw MinimongoError(\"fields option must be an object\");\n\n  _.each(fields, function (val, keyPath) {\n    if (_.contains(keyPath.split('.'), '$'))\n      throw MinimongoError(\"Minimongo doesn't support $ operator in projections yet.\");\n    if (typeof val === 'object' && _.intersection(['$elemMatch', '$meta', '$slice'], _.keys(val)).length > 0)\n      throw MinimongoError(\"Minimongo doesn't support operators in projections yet.\");\n    if (_.indexOf([1, 0, true, false], val) === -1)\n      throw MinimongoError(\"Projection values should be one of 1, 0, true, or false\");\n  });\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/modify.js                                                                               //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = function (doc, mod, options) {\n  options = options || {};\n  if (!isPlainObject(mod))\n    throw MinimongoError(\"Modifier must be an object\");\n\n  // Make sure the caller can't mutate our data structures.\n  mod = EJSON.clone(mod);\n\n  var isModifier = isOperatorObject(mod);\n\n  var newDoc;\n\n  if (!isModifier) {\n    if (mod._id && !EJSON.equals(doc._id, mod._id))\n      throw MinimongoError(\"Cannot change the _id of a document\");\n\n    // replace the whole document\n    for (var k in mod) {\n      if (/\\./.test(k))\n        throw MinimongoError(\n          \"When replacing document, field name may not contain '.'\");\n    }\n    newDoc = mod;\n  } else {\n    // apply modifiers to the doc.\n    newDoc = EJSON.clone(doc);\n\n    _.each(mod, function (operand, op) {\n      var modFunc = MODIFIERS[op];\n      // Treat $setOnInsert as $set if this is an insert.\n      if (options.isInsert && op === '$setOnInsert')\n        modFunc = MODIFIERS['$set'];\n      if (!modFunc)\n        throw MinimongoError(\"Invalid modifier specified \" + op);\n      _.each(operand, function (arg, keypath) {\n        if (keypath === '') {\n          throw MinimongoError(\"An empty update path is not valid.\");\n        }\n\n        if (keypath === '_id' && op !== '$setOnInsert') {\n          throw MinimongoError(\"Mod on _id not allowed\");\n        }\n\n        var keyparts = keypath.split('.');\n\n        if (! _.all(keyparts, _.identity)) {\n          throw MinimongoError(\n            \"The update path '\" + keypath +\n              \"' contains an empty field name, which is not allowed.\");\n        }\n\n        var noCreate = _.has(NO_CREATE_MODIFIERS, op);\n        var forbidArray = (op === \"$rename\");\n        var target = findModTarget(newDoc, keyparts, {\n          noCreate: NO_CREATE_MODIFIERS[op],\n          forbidArray: (op === \"$rename\"),\n          arrayIndices: options.arrayIndices\n        });\n        var field = keyparts.pop();\n        modFunc(target, field, arg, keypath, newDoc);\n      });\n    });\n  }\n\n  // move new document into place.\n  _.each(_.keys(doc), function (k) {\n    // Note: this used to be for (var k in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (k !== '_id')\n      delete doc[k];\n  });\n  _.each(newDoc, function (v, k) {\n    doc[k] = v;\n  });\n};\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nvar findModTarget = function (doc, keyparts, options) {\n  options = options || {};\n  var usedArrayIndex = false;\n  for (var i = 0; i < keyparts.length; i++) {\n    var last = (i === keyparts.length - 1);\n    var keypart = keyparts[i];\n    var indexable = isIndexable(doc);\n    if (!indexable) {\n      if (options.noCreate)\n        return undefined;\n      var e = MinimongoError(\n        \"cannot use the part '\" + keypart + \"' to traverse \" + doc);\n      e.setPropertyError = true;\n      throw e;\n    }\n    if (doc instanceof Array) {\n      if (options.forbidArray)\n        return null;\n      if (keypart === '$') {\n        if (usedArrayIndex)\n          throw MinimongoError(\"Too many positional (i.e. '$') elements\");\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\"The positional operator did not find the \" +\n                               \"match needed from the query\");\n        }\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate)\n          return undefined;\n        throw MinimongoError(\n          \"can't append to array using string field name [\"\n                    + keypart + \"]\");\n      }\n      if (last)\n        // handle 'a.01'\n        keyparts[i] = keypart;\n      if (options.noCreate && keypart >= doc.length)\n        return undefined;\n      while (doc.length < keypart)\n        doc.push(null);\n      if (!last) {\n        if (doc.length === keypart)\n          doc.push({});\n        else if (typeof doc[keypart] !== \"object\")\n          throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] +\n                      \"' of list value \" + JSON.stringify(doc[keypart]));\n      }\n    } else {\n      if (keypart.length && keypart.substr(0, 1) === '$')\n        throw MinimongoError(\"can't set field named \" + keypart);\n      if (!(keypart in doc)) {\n        if (options.noCreate)\n          return undefined;\n        if (!last)\n          doc[keypart] = {};\n      }\n    }\n\n    if (last)\n      return doc;\n    doc = doc[keypart];\n  }\n\n  // notreached\n};\n\nvar NO_CREATE_MODIFIERS = {\n  $unset: true,\n  $pop: true,\n  $rename: true,\n  $pull: true,\n  $pullAll: true\n};\n\nvar MODIFIERS = {\n  $inc: function (target, field, arg) {\n    if (typeof arg !== \"number\")\n      throw MinimongoError(\"Modifier $inc allowed for numbers only\");\n    if (field in target) {\n      if (typeof target[field] !== \"number\")\n        throw MinimongoError(\"Cannot apply $inc modifier to non-number\");\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $set: function (target, field, arg) {\n    if (!_.isObject(target)) { // not an array or an object\n      var e = MinimongoError(\"Cannot set property on non-object field\");\n      e.setPropertyError = true;\n      throw e;\n    }\n    if (target === null) {\n      var e = MinimongoError(\"Cannot set property on null\");\n      e.setPropertyError = true;\n      throw e;\n    }\n    target[field] = arg;\n  },\n  $setOnInsert: function (target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset: function (target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target)\n          target[field] = null;\n      } else\n        delete target[field];\n    }\n  },\n  $push: function (target, field, arg) {\n    if (target[field] === undefined)\n      target[field] = [];\n    if (!(target[field] instanceof Array))\n      throw MinimongoError(\"Cannot apply $push modifier to non-array\");\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      target[field].push(arg);\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    var toPush = arg.$each;\n    if (!(toPush instanceof Array))\n      throw MinimongoError(\"$each must be an array\");\n\n    // Parse $position\n    var position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== \"number\")\n        throw MinimongoError(\"$position must be a numeric value\");\n      // XXX should check to make sure integer\n      if (arg.$position < 0)\n        throw MinimongoError(\"$position in $push must be zero or positive\");\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    var slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== \"number\")\n        throw MinimongoError(\"$slice must be a numeric value\");\n      // XXX should check to make sure integer\n      if (arg.$slice > 0)\n        throw MinimongoError(\"$slice in $push must be zero or negative\");\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    var sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined)\n        throw MinimongoError(\"$sort requires $slice to be present\");\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n      for (var i = 0; i < toPush.length; i++) {\n        if (LocalCollection._f._type(toPush[i]) !== 3) {\n          throw MinimongoError(\"$push like modifiers using $sort \" +\n                      \"require all elements to be objects\");\n        }\n      }\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      for (var j = 0; j < toPush.length; j++)\n        target[field].push(toPush[j]);\n    } else {\n      var spliceArguments = [position, 0];\n      for (var j = 0; j < toPush.length; j++)\n        spliceArguments.push(toPush[j]);\n      Array.prototype.splice.apply(target[field], spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction)\n      target[field].sort(sortFunction);\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0)\n        target[field] = [];  // differs from Array.slice!\n      else\n        target[field] = target[field].slice(slice);\n    }\n  },\n  $pushAll: function (target, field, arg) {\n    if (!(typeof arg === \"object\" && arg instanceof Array))\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\n    var x = target[field];\n    if (x === undefined)\n      target[field] = arg;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pushAll modifier to non-array\");\n    else {\n      for (var i = 0; i < arg.length; i++)\n        x.push(arg[i]);\n    }\n  },\n  $addToSet: function (target, field, arg) {\n    var isEach = false;\n    if (typeof arg === \"object\") {\n      //check if first key is '$each'\n      for (var k in arg) {\n        if (k === \"$each\")\n          isEach = true;\n        break;\n      }\n    }\n    var values = isEach ? arg[\"$each\"] : [arg];\n    var x = target[field];\n    if (x === undefined)\n      target[field] = values;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $addToSet modifier to non-array\");\n    else {\n      _.each(values, function (value) {\n        for (var i = 0; i < x.length; i++)\n          if (LocalCollection._f._equal(value, x[i]))\n            return;\n        x.push(value);\n      });\n    }\n  },\n  $pop: function (target, field, arg) {\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pop modifier to non-array\");\n    else {\n      if (typeof arg === 'number' && arg < 0)\n        x.splice(0, 1);\n      else\n        x.pop();\n    }\n  },\n  $pull: function (target, field, arg) {\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");\n    else {\n      var out = [];\n      if (arg != null && typeof arg === \"object\" && !(arg instanceof Array)) {\n        // XXX would be much nicer to compile this once, rather than\n        // for each document we modify.. but usually we're not\n        // modifying that many documents, so we'll let it slide for\n        // now\n\n        // XXX Minimongo.Matcher isn't up for the job, because we need\n        // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n        // like {$gt: 4} is not normally a complete selector.\n        // same issue as $elemMatch possibly?\n        var matcher = new Minimongo.Matcher(arg);\n        for (var i = 0; i < x.length; i++)\n          if (!matcher.documentMatches(x[i]).result)\n            out.push(x[i]);\n      } else {\n        for (var i = 0; i < x.length; i++)\n          if (!LocalCollection._f._equal(x[i], arg))\n            out.push(x[i]);\n      }\n      target[field] = out;\n    }\n  },\n  $pullAll: function (target, field, arg) {\n    if (!(typeof arg === \"object\" && arg instanceof Array))\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");\n    else {\n      var out = [];\n      for (var i = 0; i < x.length; i++) {\n        var exclude = false;\n        for (var j = 0; j < arg.length; j++) {\n          if (LocalCollection._f._equal(x[i], arg[j])) {\n            exclude = true;\n            break;\n          }\n        }\n        if (!exclude)\n          out.push(x[i]);\n      }\n      target[field] = out;\n    }\n  },\n  $rename: function (target, field, arg, keypath, doc) {\n    if (keypath === arg)\n      // no idea why mongo has this restriction..\n      throw MinimongoError(\"$rename source must differ from target\");\n    if (target === null)\n      throw MinimongoError(\"$rename source field invalid\");\n    if (typeof arg !== \"string\")\n      throw MinimongoError(\"$rename target must be a string\");\n    if (target === undefined)\n      return;\n    var v = target[field];\n    delete target[field];\n\n    var keyparts = arg.split('.');\n    var target2 = findModTarget(doc, keyparts, {forbidArray: true});\n    if (target2 === null)\n      throw MinimongoError(\"$rename target field invalid\");\n    var field2 = keyparts.pop();\n    target2[field2] = v;\n  },\n  $bit: function (target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError(\"$bit is not supported\");\n  }\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/diff.js                                                                                 //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);\n};\n\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);\n};\n\n\nLocalCollection._diffQueryOrderedChanges =\n  function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);\n};\n\nLocalCollection._diffObjects = function (left, right, callbacks) {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/id_map.js                                                                               //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nLocalCollection._IdMap = function () {\n  var self = this;\n  IdMap.call(self, MongoID.idStringify, MongoID.idParse);\n};\n\nMeteor._inherits(LocalCollection._IdMap, IdMap);\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/observe.js                                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in self.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = function (options) {\n  var self = this;\n  options = options || {};\n\n  var orderedFromCallbacks = options.callbacks &&\n        LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n  if (_.has(options, 'ordered')) {\n    self.ordered = options.ordered;\n    if (options.callbacks && options.ordered !== orderedFromCallbacks)\n      throw Error(\"ordered option doesn't match callbacks\");\n  } else if (options.callbacks) {\n    self.ordered = orderedFromCallbacks;\n  } else {\n    throw Error(\"must provide ordered or callbacks\");\n  }\n  var callbacks = options.callbacks || {};\n\n  if (self.ordered) {\n    self.docs = new OrderedDict(MongoID.idStringify);\n    self.applyChange = {\n      addedBefore: function (id, fields, before) {\n        var doc = EJSON.clone(fields);\n        doc._id = id;\n        callbacks.addedBefore && callbacks.addedBefore.call(\n          self, id, fields, before);\n        // This line triggers if we provide added with movedBefore.\n        callbacks.added && callbacks.added.call(self, id, fields);\n        // XXX could `before` be a falsy ID?  Technically\n        // idStringify seems to allow for them -- though\n        // OrderedDict won't call stringify on a falsy arg.\n        self.docs.putBefore(id, doc, before || null);\n      },\n      movedBefore: function (id, before) {\n        var doc = self.docs.get(id);\n        callbacks.movedBefore && callbacks.movedBefore.call(self, id, before);\n        self.docs.moveBefore(id, before || null);\n      }\n    };\n  } else {\n    self.docs = new LocalCollection._IdMap;\n    self.applyChange = {\n      added: function (id, fields) {\n        var doc = EJSON.clone(fields);\n        callbacks.added && callbacks.added.call(self, id, fields);\n        doc._id = id;\n        self.docs.set(id,  doc);\n      }\n    };\n  }\n\n  // The methods in _IdMap and OrderedDict used by these callbacks are\n  // identical.\n  self.applyChange.changed = function (id, fields) {\n    var doc = self.docs.get(id);\n    if (!doc)\n      throw new Error(\"Unknown id for changed: \" + id);\n    callbacks.changed && callbacks.changed.call(\n      self, id, EJSON.clone(fields));\n    DiffSequence.applyChanges(doc, fields);\n  };\n  self.applyChange.removed = function (id) {\n    callbacks.removed && callbacks.removed.call(self, id);\n    self.docs.remove(id);\n  };\n};\n\nLocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {\n  var transform = cursor.getTransform() || function (doc) {return doc;};\n  var suppressed = !!observeCallbacks._suppress_initial;\n\n  var observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    var indices = !observeCallbacks._no_indices;\n    observeChangesCallbacks = {\n      addedBefore: function (id, fields, before) {\n        var self = this;\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added))\n          return;\n        var doc = transform(_.extend(fields, {_id: id}));\n        if (observeCallbacks.addedAt) {\n          var index = indices\n                ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;\n          observeCallbacks.addedAt(doc, index, before);\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed: function (id, fields) {\n        var self = this;\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed))\n          return;\n        var doc = EJSON.clone(self.docs.get(id));\n        if (!doc)\n          throw new Error(\"Unknown id for changed: \" + id);\n        var oldDoc = transform(EJSON.clone(doc));\n        DiffSequence.applyChanges(doc, fields);\n        doc = transform(doc);\n        if (observeCallbacks.changedAt) {\n          var index = indices ? self.docs.indexOf(id) : -1;\n          observeCallbacks.changedAt(doc, oldDoc, index);\n        } else {\n          observeCallbacks.changed(doc, oldDoc);\n        }\n      },\n      movedBefore: function (id, before) {\n        var self = this;\n        if (!observeCallbacks.movedTo)\n          return;\n        var from = indices ? self.docs.indexOf(id) : -1;\n\n        var to = indices\n              ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from)\n          --to;\n        observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))),\n                                 from, to, before || null);\n      },\n      removed: function (id) {\n        var self = this;\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed))\n          return;\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from self.docs!\n        var doc = transform(self.docs.get(id));\n        if (observeCallbacks.removedAt) {\n          var index = indices ? self.docs.indexOf(id) : -1;\n          observeCallbacks.removedAt(doc, index);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      }\n    };\n  } else {\n    observeChangesCallbacks = {\n      added: function (id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          var doc = _.extend(fields, {_id:  id});\n          observeCallbacks.added(transform(doc));\n        }\n      },\n      changed: function (id, fields) {\n        var self = this;\n        if (observeCallbacks.changed) {\n          var oldDoc = self.docs.get(id);\n          var doc = EJSON.clone(oldDoc);\n          DiffSequence.applyChanges(doc, fields);\n          observeCallbacks.changed(transform(doc),\n                                   transform(EJSON.clone(oldDoc)));\n        }\n      },\n      removed: function (id) {\n        var self = this;\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(self.docs.get(id)));\n        }\n      }\n    };\n  }\n\n  var changeObserver = new LocalCollection._CachingChangeObserver(\n    {callbacks: observeChangesCallbacks});\n  var handle = cursor.observeChanges(changeObserver.applyChange);\n  suppressed = false;\n\n  return handle;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/objectid.js                                                                             //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = function (selector) {\n  return (typeof selector === \"string\") ||\n    (typeof selector === \"number\") ||\n    selector instanceof MongoID.ObjectID;\n};\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\n  return LocalCollection._selectorIsId(selector) ||\n    (selector && typeof selector === \"object\" &&\n     selector._id && LocalCollection._selectorIsId(selector._id) &&\n     _.size(selector) === 1);\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = function (selector) {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector))\n    return [selector];\n  if (!selector)\n    return null;\n\n  // Do we have an _id clause?\n  if (_.has(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id))\n      return [selector._id];\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id && selector._id.$in\n        && _.isArray(selector._id.$in)\n        && !_.isEmpty(selector._id.$in)\n        && _.all(selector._id.$in, LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (selector.$and && _.isArray(selector.$and)) {\n    for (var i = 0; i < selector.$and.length; ++i) {\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n      if (subIds)\n        return subIds;\n    }\n  }\n\n  return null;\n};\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/selector_projection.js                                                                  //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Knows how to combine a mongo selector and a fields projection to a new fields\n// projection taking into account active fields from the passed selector.\n// @returns Object - projection object (same as fields option of mongo cursor)\nMinimongo.Matcher.prototype.combineIntoProjection = function (projection) {\n  var self = this;\n  var selectorPaths = Minimongo._pathsElidingNumericKeys(self._getPaths());\n\n  // Special case for $where operator in the selector - projection should depend\n  // on all fields of the document. getSelectorPaths returns a list of paths\n  // selector depends on. If one of the paths is '' (empty string) representing\n  // the root or the whole document, complete projection should be returned.\n  if (_.contains(selectorPaths, ''))\n    return {};\n\n  return combineImportantPathsIntoProjection(selectorPaths, projection);\n};\n\nMinimongo._pathsElidingNumericKeys = function (paths) {\n  var self = this;\n  return _.map(paths, function (path) {\n    return _.reject(path.split('.'), isNumericKey).join('.');\n  });\n};\n\ncombineImportantPathsIntoProjection = function (paths, projection) {\n  var prjDetails = projectionDetails(projection);\n  var tree = prjDetails.tree;\n  var mergedProjection = {};\n\n  // merge the paths to include\n  tree = pathsToTree(paths,\n                     function (path) { return true; },\n                     function (node, path, fullPath) { return true; },\n                     tree);\n  mergedProjection = treeToPaths(tree);\n  if (prjDetails.including) {\n    // both selector and projection are pointing on fields to include\n    // so we can just return the merged tree\n    return mergedProjection;\n  } else {\n    // selector is pointing at fields to include\n    // projection is pointing at fields to exclude\n    // make sure we don't exclude important paths\n    var mergedExclProjection = {};\n    _.each(mergedProjection, function (incl, path) {\n      if (!incl)\n        mergedExclProjection[path] = false;\n    });\n\n    return mergedExclProjection;\n  }\n};\n\n// Returns a set of key paths similar to\n// { 'foo.bar': 1, 'a.b.c': 1 }\nvar treeToPaths = function (tree, prefix) {\n  prefix = prefix || '';\n  var result = {};\n\n  _.each(tree, function (val, key) {\n    if (_.isObject(val))\n      _.extend(result, treeToPaths(val, prefix + key + '.'));\n    else\n      result[prefix + key] = val;\n  });\n\n  return result;\n};\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/selector_modifier.js                                                                    //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Returns true if the modifier applied to some document may change the result\n// of matching the document by selector\n// The modifier is always in a form of Object:\n//  - $set\n//    - 'a.b.22.z': value\n//    - 'foo.bar': 42\n//  - $unset\n//    - 'abc.d': 1\nMinimongo.Matcher.prototype.affectedByModifier = function (modifier) {\n  var self = this;\n  // safe check for $set/$unset being objects\n  modifier = _.extend({ $set: {}, $unset: {} }, modifier);\n  var modifiedPaths = _.keys(modifier.$set).concat(_.keys(modifier.$unset));\n  var meaningfulPaths = self._getPaths();\n\n  return _.any(modifiedPaths, function (path) {\n    var mod = path.split('.');\n    return _.any(meaningfulPaths, function (meaningfulPath) {\n      var sel = meaningfulPath.split('.');\n      var i = 0, j = 0;\n\n      while (i < sel.length && j < mod.length) {\n        if (isNumericKey(sel[i]) && isNumericKey(mod[j])) {\n          // foo.4.bar selector affected by foo.4 modifier\n          // foo.3.bar selector unaffected by foo.4 modifier\n          if (sel[i] === mod[j])\n            i++, j++;\n          else\n            return false;\n        } else if (isNumericKey(sel[i])) {\n          // foo.4.bar selector unaffected by foo.bar modifier\n          return false;\n        } else if (isNumericKey(mod[j])) {\n          j++;\n        } else if (sel[i] === mod[j])\n          i++, j++;\n        else\n          return false;\n      }\n\n      // One is a prefix of another, taking numeric fields into account\n      return true;\n    });\n  });\n};\n\n// Minimongo.Sorter gets a similar method, which delegates to a Matcher it made\n// for this exact purpose.\nMinimongo.Sorter.prototype.affectedByModifier = function (modifier) {\n  var self = this;\n  return self._selectorForAffectedByModifier.affectedByModifier(modifier);\n};\n\n// @param modifier - Object: MongoDB-styled modifier with `$set`s and `$unsets`\n//                           only. (assumed to come from oplog)\n// @returns - Boolean: if after applying the modifier, selector can start\n//                     accepting the modified value.\n// NOTE: assumes that document affected by modifier didn't match this Matcher\n// before, so if modifier can't convince selector in a positive change it would\n// stay 'false'.\n// Currently doesn't support $-operators and numeric indices precisely.\nMinimongo.Matcher.prototype.canBecomeTrueByModifier = function (modifier) {\n  var self = this;\n  if (!this.affectedByModifier(modifier))\n    return false;\n\n  modifier = _.extend({$set:{}, $unset:{}}, modifier);\n  var modifierPaths = _.keys(modifier.$set).concat(_.keys(modifier.$unset));\n\n  if (!self.isSimple())\n    return true;\n\n  if (_.any(self._getPaths(), pathHasNumericKeys) ||\n      _.any(modifierPaths, pathHasNumericKeys))\n    return true;\n\n  // check if there is a $set or $unset that indicates something is an\n  // object rather than a scalar in the actual object where we saw $-operator\n  // NOTE: it is correct since we allow only scalars in $-operators\n  // Example: for selector {'a.b': {$gt: 5}} the modifier {'a.b.c':7} would\n  // definitely set the result to false as 'a.b' appears to be an object.\n  var expectedScalarIsObject = _.any(self._selector, function (sel, path) {\n    if (! isOperatorObject(sel))\n      return false;\n    return _.any(modifierPaths, function (modifierPath) {\n      return startsWith(modifierPath, path + '.');\n    });\n  });\n\n  if (expectedScalarIsObject)\n    return false;\n\n  // See if we can apply the modifier on the ideally matching object. If it\n  // still matches the selector, then the modifier could have turned the real\n  // object in the database into something matching.\n  var matchingDocument = EJSON.clone(self.matchingDocument());\n\n  // The selector is too complex, anything can happen.\n  if (matchingDocument === null)\n    return true;\n\n  try {\n    LocalCollection._modify(matchingDocument, modifier);\n  } catch (e) {\n    // Couldn't set a property on a field which is a scalar or null in the\n    // selector.\n    // Example:\n    // real document: { 'a.b': 3 }\n    // selector: { 'a': 12 }\n    // converted selector (ideal document): { 'a': 12 }\n    // modifier: { $set: { 'a.b': 4 } }\n    // We don't know what real document was like but from the error raised by\n    // $set on a scalar field we can reason that the structure of real document\n    // is completely different.\n    if (e.name === \"MinimongoError\" && e.setPropertyError)\n      return false;\n    throw e;\n  }\n\n  return self.documentMatches(matchingDocument).result;\n};\n\n// Returns an object that would match the selector if possible or null if the\n// selector is too complex for us to analyze\n// { 'a.b': { ans: 42 }, 'foo.bar': null, 'foo.baz': \"something\" }\n// => { a: { b: { ans: 42 } }, foo: { bar: null, baz: \"something\" } }\nMinimongo.Matcher.prototype.matchingDocument = function () {\n  var self = this;\n\n  // check if it was computed before\n  if (self._matchingDocument !== undefined)\n    return self._matchingDocument;\n\n  // If the analysis of this selector is too hard for our implementation\n  // fallback to \"YES\"\n  var fallback = false;\n  self._matchingDocument = pathsToTree(self._getPaths(),\n    function (path) {\n      var valueSelector = self._selector[path];\n      if (isOperatorObject(valueSelector)) {\n        // if there is a strict equality, there is a good\n        // chance we can use one of those as \"matching\"\n        // dummy value\n        if (valueSelector.$eq) {\n          return valueSelector.$eq;\n        } else if (valueSelector.$in) {\n          var matcher = new Minimongo.Matcher({ placeholder: valueSelector });\n\n          // Return anything from $in that matches the whole selector for this\n          // path. If nothing matches, returns `undefined` as nothing can make\n          // this selector into `true`.\n          return _.find(valueSelector.$in, function (x) {\n            return matcher.documentMatches({ placeholder: x }).result;\n          });\n        } else if (onlyContainsKeys(valueSelector, ['$gt', '$gte', '$lt', '$lte'])) {\n          var lowerBound = -Infinity, upperBound = Infinity;\n          _.each(['$lte', '$lt'], function (op) {\n            if (_.has(valueSelector, op) && valueSelector[op] < upperBound)\n              upperBound = valueSelector[op];\n          });\n          _.each(['$gte', '$gt'], function (op) {\n            if (_.has(valueSelector, op) && valueSelector[op] > lowerBound)\n              lowerBound = valueSelector[op];\n          });\n\n          var middle = (lowerBound + upperBound) / 2;\n          var matcher = new Minimongo.Matcher({ placeholder: valueSelector });\n          if (!matcher.documentMatches({ placeholder: middle }).result &&\n              (middle === lowerBound || middle === upperBound))\n            fallback = true;\n\n          return middle;\n        } else if (onlyContainsKeys(valueSelector, ['$nin', '$ne'])) {\n          // Since self._isSimple makes sure $nin and $ne are not combined with\n          // objects or arrays, we can confidently return an empty object as it\n          // never matches any scalar.\n          return {};\n        } else {\n          fallback = true;\n        }\n      }\n      return self._selector[path];\n    },\n    _.identity /*conflict resolution is no resolution*/);\n\n  if (fallback)\n    self._matchingDocument = null;\n\n  return self._matchingDocument;\n};\n\nvar getPaths = function (sel) {\n  return _.keys(new Minimongo.Matcher(sel)._paths);\n  return _.chain(sel).map(function (v, k) {\n    // we don't know how to handle $where because it can be anything\n    if (k === \"$where\")\n      return ''; // matches everything\n    // we branch from $or/$and/$nor operator\n    if (_.contains(['$or', '$and', '$nor'], k))\n      return _.map(v, getPaths);\n    // the value is a literal or some comparison operator\n    return k;\n  }).flatten().uniq().value();\n};\n\n// A helper to ensure object has only certain keys\nvar onlyContainsKeys = function (obj, keys) {\n  return _.all(obj, function (v, k) {\n    return _.contains(keys, k);\n  });\n};\n\nvar pathHasNumericKeys = function (path) {\n  return _.any(path.split('.'), isNumericKey);\n}\n\n// XXX from Underscore.String (http://epeli.github.com/underscore.string/)\nvar startsWith = function(str, starts) {\n  return str.length >= starts.length &&\n    str.substring(0, starts.length) === starts;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/sorter_projection.js                                                                    //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nMinimongo.Sorter.prototype.combineIntoProjection = function (projection) {\n  var self = this;\n  var specPaths = Minimongo._pathsElidingNumericKeys(self._getPaths());\n  return combineImportantPathsIntoProjection(specPaths, projection);\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.minimongo = {}, {\n  LocalCollection: LocalCollection,\n  Minimongo: Minimongo,\n  MinimongoTest: MinimongoTest\n});\n\n})();\n\n//# sourceMappingURL=minimongo.js.map\n"]},"hash":"b8094eef95495679c1289943323ac4e5ac97b8b8"}
