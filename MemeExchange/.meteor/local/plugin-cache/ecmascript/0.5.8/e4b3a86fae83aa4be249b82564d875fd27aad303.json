{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/bundle/programs/server/packages/callback-hook.js","filenameRelative":"/bundle/programs/server/packages/callback-hook.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/bundle/programs/server/packages/callback-hook.js.map","sourceFileName":"/bundle/programs/server/packages/callback-hook.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"callback-hook"},"ignored":false,"code":"(function () {\n\n  /* Imports */\n  var Meteor = Package.meteor.Meteor;\n  var global = Package.meteor.global;\n  var meteorEnv = Package.meteor.meteorEnv;\n  var _ = Package.underscore._;\n\n  /* Package-scope variables */\n  var Hook;\n\n  (function () {\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    //                                                                                //\n    // packages/callback-hook/hook.js                                                 //\n    //                                                                                //\n    ////////////////////////////////////////////////////////////////////////////////////\n    //\n    // XXX This pattern is under development. Do not add more callsites\n    // using this package for now. See:\n    // https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f\n    //\n    // Encapsulates the pattern of registering callbacks on a hook.\n    //\n    // The `each` method of the hook calls its iterator function argument\n    // with each registered callback.  This allows the hook to\n    // conditionally decide not to call the callback (if, for example, the\n    // observed object has been closed or terminated).\n    //\n    // By default, callbacks are bound with `Meteor.bindEnvironment`, so they will be\n    // called with the Meteor environment of the calling code that\n    // registered the callback. Override by passing { bindEnvironment: false }\n    // to the constructor.\n    //\n    // Registering a callback returns an object with a single `stop`\n    // method which unregisters the callback.\n    //\n    // The code is careful to allow a callback to be safely unregistered\n    // while the callbacks are being iterated over.\n    //\n    // If the hook is configured with the `exceptionHandler` option, the\n    // handler will be called if a called callback throws an exception.\n    // By default (if the exception handler doesn't itself throw an\n    // exception, or if the iterator function doesn't return a falsy value\n    // to terminate the calling of callbacks), the remaining callbacks\n    // will still be called.\n    //\n    // Alternatively, the `debugPrintExceptions` option can be specified\n    // as string describing the callback.  On an exception the string and\n    // the exception will be printed to the console log with\n    // `Meteor._debug`, and the exception otherwise ignored.\n    //\n    // If an exception handler isn't specified, exceptions thrown in the\n    // callback will propagate up to the iterator function, and will\n    // terminate calling the remaining callbacks if not caught.\n\n    Hook = function Hook(options) {\n      var self = this;\n      options = options || {};\n      self.nextCallbackId = 0;\n      self.callbacks = {};\n      // Whether to wrap callbacks with Meteor.bindEnvironment\n      self.bindEnvironment = true;\n      if (options.bindEnvironment === false) self.bindEnvironment = false;\n\n      if (options.exceptionHandler) self.exceptionHandler = options.exceptionHandler;else if (options.debugPrintExceptions) {\n        if (!_.isString(options.debugPrintExceptions)) throw new Error(\"Hook option debugPrintExceptions should be a string\");\n        self.exceptionHandler = options.debugPrintExceptions;\n      }\n    };\n\n    _.extend(Hook.prototype, {\n      register: function register(callback) {\n        var self = this;\n        var exceptionHandler = self.exceptionHandler || function (exception) {\n          // Note: this relies on the undocumented fact that if bindEnvironment's\n          // onException throws, and you are invoking the callback either in the\n          // browser or from within a Fiber in Node, the exception is propagated.\n          throw exception;\n        };\n\n        if (self.bindEnvironment) {\n          callback = Meteor.bindEnvironment(callback, exceptionHandler);\n        } else {\n          callback = dontBindEnvironment(callback, exceptionHandler);\n        }\n\n        var id = self.nextCallbackId++;\n        self.callbacks[id] = callback;\n\n        return {\n          stop: function stop() {\n            delete self.callbacks[id];\n          }\n        };\n      },\n\n      // For each registered callback, call the passed iterator function\n      // with the callback.\n      //\n      // The iterator function can choose whether or not to call the\n      // callback.  (For example, it might not call the callback if the\n      // observed object has been closed or terminated).\n      //\n      // The iteration is stopped if the iterator function returns a falsy\n      // value or throws an exception.\n      //\n      each: function each(iterator) {\n        var self = this;\n\n        // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't\n        // run them to completion (and exceptions thrown from onException are not\n        // propagated), so we need to be in a Fiber.\n        Meteor._nodeCodeMustBeInFiber();\n\n        var ids = _.keys(self.callbacks);\n        for (var i = 0; i < ids.length; ++i) {\n          var id = ids[i];\n          // check to see if the callback was removed during iteration\n          if (_.has(self.callbacks, id)) {\n            var callback = self.callbacks[id];\n\n            if (!iterator(callback)) break;\n          }\n        }\n      }\n    });\n\n    // Copied from Meteor.bindEnvironment and removed all the env stuff.\n    var dontBindEnvironment = function dontBindEnvironment(func, onException, _this) {\n      if (!onException || typeof onException === 'string') {\n        var description = onException || \"callback of async function\";\n        onException = function onException(error) {\n          Meteor._debug(\"Exception in \" + description + \":\", error && error.stack || error);\n        };\n      }\n\n      return function () /* arguments */{\n        var args = _.toArray(arguments);\n\n        var runAndHandleExceptions = function runAndHandleExceptions() {\n          try {\n            var ret = func.apply(_this, args);\n          } catch (e) {\n            onException(e);\n          }\n          return ret;\n        };\n\n        return runAndHandleExceptions();\n      };\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////\n  }).call(this);\n\n  /* Exports */\n  if (typeof Package === 'undefined') Package = {};\n  (function (pkg, symbols) {\n    for (var s in symbols) {\n      s in pkg || (pkg[s] = symbols[s]);\n    }\n  })(Package['callback-hook'] = {}, {\n    Hook: Hook\n  });\n})();\n\n//# sourceMappingURL=callback-hook.js.map","ast":null,"map":{"version":3,"sources":["/bundle/programs/server/packages/callback-hook.js"],"names":[],"mappings":"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","file":"/bundle/programs/server/packages/callback-hook.js.map","sourcesContent":["(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar Hook;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////\n//                                                                                //\n// packages/callback-hook/hook.js                                                 //\n//                                                                                //\n////////////////////////////////////////////////////////////////////////////////////\n                                                                                  //\n// XXX This pattern is under development. Do not add more callsites\n// using this package for now. See:\n// https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f\n//\n// Encapsulates the pattern of registering callbacks on a hook.\n//\n// The `each` method of the hook calls its iterator function argument\n// with each registered callback.  This allows the hook to\n// conditionally decide not to call the callback (if, for example, the\n// observed object has been closed or terminated).\n//\n// By default, callbacks are bound with `Meteor.bindEnvironment`, so they will be\n// called with the Meteor environment of the calling code that\n// registered the callback. Override by passing { bindEnvironment: false }\n// to the constructor.\n//\n// Registering a callback returns an object with a single `stop`\n// method which unregisters the callback.\n//\n// The code is careful to allow a callback to be safely unregistered\n// while the callbacks are being iterated over.\n//\n// If the hook is configured with the `exceptionHandler` option, the\n// handler will be called if a called callback throws an exception.\n// By default (if the exception handler doesn't itself throw an\n// exception, or if the iterator function doesn't return a falsy value\n// to terminate the calling of callbacks), the remaining callbacks\n// will still be called.\n//\n// Alternatively, the `debugPrintExceptions` option can be specified\n// as string describing the callback.  On an exception the string and\n// the exception will be printed to the console log with\n// `Meteor._debug`, and the exception otherwise ignored.\n//\n// If an exception handler isn't specified, exceptions thrown in the\n// callback will propagate up to the iterator function, and will\n// terminate calling the remaining callbacks if not caught.\n\nHook = function (options) {\n  var self = this;\n  options = options || {};\n  self.nextCallbackId = 0;\n  self.callbacks = {};\n  // Whether to wrap callbacks with Meteor.bindEnvironment\n  self.bindEnvironment = true;\n  if (options.bindEnvironment === false)\n    self.bindEnvironment = false;\n\n  if (options.exceptionHandler)\n    self.exceptionHandler = options.exceptionHandler;\n  else if (options.debugPrintExceptions) {\n    if (! _.isString(options.debugPrintExceptions))\n      throw new Error(\"Hook option debugPrintExceptions should be a string\");\n    self.exceptionHandler = options.debugPrintExceptions;\n  }\n};\n\n_.extend(Hook.prototype, {\n  register: function (callback) {\n    var self = this;\n    var exceptionHandler =  self.exceptionHandler || function (exception) {\n      // Note: this relies on the undocumented fact that if bindEnvironment's\n      // onException throws, and you are invoking the callback either in the\n      // browser or from within a Fiber in Node, the exception is propagated.\n      throw exception;\n    };\n\n    if (self.bindEnvironment) {\n      callback = Meteor.bindEnvironment(callback, exceptionHandler);\n    } else {\n      callback = dontBindEnvironment(callback, exceptionHandler);\n    }\n\n    var id = self.nextCallbackId++;\n    self.callbacks[id] = callback;\n\n    return {\n      stop: function () {\n        delete self.callbacks[id];\n      }\n    };\n  },\n\n  // For each registered callback, call the passed iterator function\n  // with the callback.\n  //\n  // The iterator function can choose whether or not to call the\n  // callback.  (For example, it might not call the callback if the\n  // observed object has been closed or terminated).\n  //\n  // The iteration is stopped if the iterator function returns a falsy\n  // value or throws an exception.\n  //\n  each: function (iterator) {\n    var self = this;\n\n    // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't\n    // run them to completion (and exceptions thrown from onException are not\n    // propagated), so we need to be in a Fiber.\n    Meteor._nodeCodeMustBeInFiber();\n\n    var ids = _.keys(self.callbacks);\n    for (var i = 0;  i < ids.length;  ++i) {\n      var id = ids[i];\n      // check to see if the callback was removed during iteration\n      if (_.has(self.callbacks, id)) {\n        var callback = self.callbacks[id];\n\n        if (! iterator(callback))\n          break;\n      }\n    }\n  }\n});\n\n// Copied from Meteor.bindEnvironment and removed all the env stuff.\nvar dontBindEnvironment = function (func, onException, _this) {\n  if (!onException || typeof(onException) === 'string') {\n    var description = onException || \"callback of async function\";\n    onException = function (error) {\n      Meteor._debug(\n        \"Exception in \" + description + \":\",\n        error && error.stack || error\n      );\n    };\n  }\n\n  return function (/* arguments */) {\n    var args = _.toArray(arguments);\n\n    var runAndHandleExceptions = function () {\n      try {\n        var ret = func.apply(_this, args);\n      } catch (e) {\n        onException(e);\n      }\n      return ret;\n    };\n\n    return runAndHandleExceptions();\n  };\n};\n\n////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['callback-hook'] = {}, {\n  Hook: Hook\n});\n\n})();\n\n//# sourceMappingURL=callback-hook.js.map\n"]},"hash":"e4b3a86fae83aa4be249b82564d875fd27aad303"}
