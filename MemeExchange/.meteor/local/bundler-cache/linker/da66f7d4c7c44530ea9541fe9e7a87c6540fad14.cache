[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar BootstrapData = Package['nemo64:bootstrap-data'].BootstrapData;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/nemo64_bootstrap/bootstrap/js/transition.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* ========================================================================                                            // 1\n * Bootstrap: transition.js v3.3.5                                                                                     // 2\n * http://getbootstrap.com/javascript/#transitions                                                                     // 3\n * ========================================================================                                            // 4\n * Copyright 2011-2015 Twitter, Inc.                                                                                   // 5\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)                                          // 6\n * ======================================================================== */                                         // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n+function ($) {                                                                                                        // 10\n  'use strict';                                                                                                        // 11\n                                                                                                                       // 12\n  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)                                                      // 13\n  // ============================================================                                                      // 14\n                                                                                                                       // 15\n  function transitionEnd() {                                                                                           // 16\n    var el = document.createElement('bootstrap')                                                                       // 17\n                                                                                                                       // 18\n    var transEndEventNames = {                                                                                         // 19\n      WebkitTransition : 'webkitTransitionEnd',                                                                        // 20\n      MozTransition    : 'transitionend',                                                                              // 21\n      OTransition      : 'oTransitionEnd otransitionend',                                                              // 22\n      transition       : 'transitionend'                                                                               // 23\n    }                                                                                                                  // 24\n                                                                                                                       // 25\n    for (var name in transEndEventNames) {                                                                             // 26\n      if (el.style[name] !== undefined) {                                                                              // 27\n        return { end: transEndEventNames[name] }                                                                       // 28\n      }                                                                                                                // 29\n    }                                                                                                                  // 30\n                                                                                                                       // 31\n    return false // explicit for ie8 (  ._.)                                                                           // 32\n  }                                                                                                                    // 33\n                                                                                                                       // 34\n  // http://blog.alexmaccaw.com/css-transitions                                                                        // 35\n  $.fn.emulateTransitionEnd = function (duration) {                                                                    // 36\n    var called = false                                                                                                 // 37\n    var $el = this                                                                                                     // 38\n    $(this).one('bsTransitionEnd', function () { called = true })                                                      // 39\n    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }                               // 40\n    setTimeout(callback, duration)                                                                                     // 41\n    return this                                                                                                        // 42\n  }                                                                                                                    // 43\n                                                                                                                       // 44\n  $(function () {                                                                                                      // 45\n    $.support.transition = transitionEnd()                                                                             // 46\n                                                                                                                       // 47\n    if (!$.support.transition) return                                                                                  // 48\n                                                                                                                       // 49\n    $.event.special.bsTransitionEnd = {                                                                                // 50\n      bindType: $.support.transition.end,                                                                              // 51\n      delegateType: $.support.transition.end,                                                                          // 52\n      handle: function (e) {                                                                                           // 53\n        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)                                    // 54\n      }                                                                                                                // 55\n    }                                                                                                                  // 56\n  })                                                                                                                   // 57\n                                                                                                                       // 58\n}(jQuery);                                                                                                             // 59\n                                                                                                                       // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/nemo64_bootstrap/bootstrap/js/collapse.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* ========================================================================                                            // 1\n * Bootstrap: collapse.js v3.3.5                                                                                       // 2\n * http://getbootstrap.com/javascript/#collapse                                                                        // 3\n * ========================================================================                                            // 4\n * Copyright 2011-2015 Twitter, Inc.                                                                                   // 5\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)                                          // 6\n * ======================================================================== */                                         // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n+function ($) {                                                                                                        // 10\n  'use strict';                                                                                                        // 11\n                                                                                                                       // 12\n  // COLLAPSE PUBLIC CLASS DEFINITION                                                                                  // 13\n  // ================================                                                                                  // 14\n                                                                                                                       // 15\n  var Collapse = function (element, options) {                                                                         // 16\n    this.$element      = $(element)                                                                                    // 17\n    this.options       = $.extend({}, Collapse.DEFAULTS, options)                                                      // 18\n    this.$trigger      = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' +                                   // 19\n                           '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')                              // 20\n    this.transitioning = null                                                                                          // 21\n                                                                                                                       // 22\n    if (this.options.parent) {                                                                                         // 23\n      this.$parent = this.getParent()                                                                                  // 24\n    } else {                                                                                                           // 25\n      this.addAriaAndCollapsedClass(this.$element, this.$trigger)                                                      // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    if (this.options.toggle) this.toggle()                                                                             // 29\n  }                                                                                                                    // 30\n                                                                                                                       // 31\n  Collapse.VERSION  = '3.3.5'                                                                                          // 32\n                                                                                                                       // 33\n  Collapse.TRANSITION_DURATION = 350                                                                                   // 34\n                                                                                                                       // 35\n  Collapse.DEFAULTS = {                                                                                                // 36\n    toggle: true                                                                                                       // 37\n  }                                                                                                                    // 38\n                                                                                                                       // 39\n  Collapse.prototype.dimension = function () {                                                                         // 40\n    var hasWidth = this.$element.hasClass('width')                                                                     // 41\n    return hasWidth ? 'width' : 'height'                                                                               // 42\n  }                                                                                                                    // 43\n                                                                                                                       // 44\n  Collapse.prototype.show = function () {                                                                              // 45\n    if (this.transitioning || this.$element.hasClass('in')) return                                                     // 46\n                                                                                                                       // 47\n    var activesData                                                                                                    // 48\n    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')                         // 49\n                                                                                                                       // 50\n    if (actives && actives.length) {                                                                                   // 51\n      activesData = actives.data('bs.collapse')                                                                        // 52\n      if (activesData && activesData.transitioning) return                                                             // 53\n    }                                                                                                                  // 54\n                                                                                                                       // 55\n    var startEvent = $.Event('show.bs.collapse')                                                                       // 56\n    this.$element.trigger(startEvent)                                                                                  // 57\n    if (startEvent.isDefaultPrevented()) return                                                                        // 58\n                                                                                                                       // 59\n    if (actives && actives.length) {                                                                                   // 60\n      Plugin.call(actives, 'hide')                                                                                     // 61\n      activesData || actives.data('bs.collapse', null)                                                                 // 62\n    }                                                                                                                  // 63\n                                                                                                                       // 64\n    var dimension = this.dimension()                                                                                   // 65\n                                                                                                                       // 66\n    this.$element                                                                                                      // 67\n      .removeClass('collapse')                                                                                         // 68\n      .addClass('collapsing')[dimension](0)                                                                            // 69\n      .attr('aria-expanded', true)                                                                                     // 70\n                                                                                                                       // 71\n    this.$trigger                                                                                                      // 72\n      .removeClass('collapsed')                                                                                        // 73\n      .attr('aria-expanded', true)                                                                                     // 74\n                                                                                                                       // 75\n    this.transitioning = 1                                                                                             // 76\n                                                                                                                       // 77\n    var complete = function () {                                                                                       // 78\n      this.$element                                                                                                    // 79\n        .removeClass('collapsing')                                                                                     // 80\n        .addClass('collapse in')[dimension]('')                                                                        // 81\n      this.transitioning = 0                                                                                           // 82\n      this.$element                                                                                                    // 83\n        .trigger('shown.bs.collapse')                                                                                  // 84\n    }                                                                                                                  // 85\n                                                                                                                       // 86\n    if (!$.support.transition) return complete.call(this)                                                              // 87\n                                                                                                                       // 88\n    var scrollSize = $.camelCase(['scroll', dimension].join('-'))                                                      // 89\n                                                                                                                       // 90\n    this.$element                                                                                                      // 91\n      .one('bsTransitionEnd', $.proxy(complete, this))                                                                 // 92\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])                     // 93\n  }                                                                                                                    // 94\n                                                                                                                       // 95\n  Collapse.prototype.hide = function () {                                                                              // 96\n    if (this.transitioning || !this.$element.hasClass('in')) return                                                    // 97\n                                                                                                                       // 98\n    var startEvent = $.Event('hide.bs.collapse')                                                                       // 99\n    this.$element.trigger(startEvent)                                                                                  // 100\n    if (startEvent.isDefaultPrevented()) return                                                                        // 101\n                                                                                                                       // 102\n    var dimension = this.dimension()                                                                                   // 103\n                                                                                                                       // 104\n    this.$element[dimension](this.$element[dimension]())[0].offsetHeight                                               // 105\n                                                                                                                       // 106\n    this.$element                                                                                                      // 107\n      .addClass('collapsing')                                                                                          // 108\n      .removeClass('collapse in')                                                                                      // 109\n      .attr('aria-expanded', false)                                                                                    // 110\n                                                                                                                       // 111\n    this.$trigger                                                                                                      // 112\n      .addClass('collapsed')                                                                                           // 113\n      .attr('aria-expanded', false)                                                                                    // 114\n                                                                                                                       // 115\n    this.transitioning = 1                                                                                             // 116\n                                                                                                                       // 117\n    var complete = function () {                                                                                       // 118\n      this.transitioning = 0                                                                                           // 119\n      this.$element                                                                                                    // 120\n        .removeClass('collapsing')                                                                                     // 121\n        .addClass('collapse')                                                                                          // 122\n        .trigger('hidden.bs.collapse')                                                                                 // 123\n    }                                                                                                                  // 124\n                                                                                                                       // 125\n    if (!$.support.transition) return complete.call(this)                                                              // 126\n                                                                                                                       // 127\n    this.$element                                                                                                      // 128\n      [dimension](0)                                                                                                   // 129\n      .one('bsTransitionEnd', $.proxy(complete, this))                                                                 // 130\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)                                                              // 131\n  }                                                                                                                    // 132\n                                                                                                                       // 133\n  Collapse.prototype.toggle = function () {                                                                            // 134\n    this[this.$element.hasClass('in') ? 'hide' : 'show']()                                                             // 135\n  }                                                                                                                    // 136\n                                                                                                                       // 137\n  Collapse.prototype.getParent = function () {                                                                         // 138\n    return $(this.options.parent)                                                                                      // 139\n      .find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]')                                     // 140\n      .each($.proxy(function (i, element) {                                                                            // 141\n        var $element = $(element)                                                                                      // 142\n        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)                                        // 143\n      }, this))                                                                                                        // 144\n      .end()                                                                                                           // 145\n  }                                                                                                                    // 146\n                                                                                                                       // 147\n  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {                                        // 148\n    var isOpen = $element.hasClass('in')                                                                               // 149\n                                                                                                                       // 150\n    $element.attr('aria-expanded', isOpen)                                                                             // 151\n    $trigger                                                                                                           // 152\n      .toggleClass('collapsed', !isOpen)                                                                               // 153\n      .attr('aria-expanded', isOpen)                                                                                   // 154\n  }                                                                                                                    // 155\n                                                                                                                       // 156\n  function getTargetFromTrigger($trigger) {                                                                            // 157\n    var href                                                                                                           // 158\n    var target = $trigger.attr('data-target')                                                                          // 159\n      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7                         // 160\n                                                                                                                       // 161\n    return $(target)                                                                                                   // 162\n  }                                                                                                                    // 163\n                                                                                                                       // 164\n                                                                                                                       // 165\n  // COLLAPSE PLUGIN DEFINITION                                                                                        // 166\n  // ==========================                                                                                        // 167\n                                                                                                                       // 168\n  function Plugin(option) {                                                                                            // 169\n    return this.each(function () {                                                                                     // 170\n      var $this   = $(this)                                                                                            // 171\n      var data    = $this.data('bs.collapse')                                                                          // 172\n      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)                 // 173\n                                                                                                                       // 174\n      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false                                  // 175\n      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))                                       // 176\n      if (typeof option == 'string') data[option]()                                                                    // 177\n    })                                                                                                                 // 178\n  }                                                                                                                    // 179\n                                                                                                                       // 180\n  var old = $.fn.collapse                                                                                              // 181\n                                                                                                                       // 182\n  $.fn.collapse             = Plugin                                                                                   // 183\n  $.fn.collapse.Constructor = Collapse                                                                                 // 184\n                                                                                                                       // 185\n                                                                                                                       // 186\n  // COLLAPSE NO CONFLICT                                                                                              // 187\n  // ====================                                                                                              // 188\n                                                                                                                       // 189\n  $.fn.collapse.noConflict = function () {                                                                             // 190\n    $.fn.collapse = old                                                                                                // 191\n    return this                                                                                                        // 192\n  }                                                                                                                    // 193\n                                                                                                                       // 194\n                                                                                                                       // 195\n  // COLLAPSE DATA-API                                                                                                 // 196\n  // =================                                                                                                 // 197\n                                                                                                                       // 198\n  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {                              // 199\n    var $this   = $(this)                                                                                              // 200\n                                                                                                                       // 201\n    if (!$this.attr('data-target')) e.preventDefault()                                                                 // 202\n                                                                                                                       // 203\n    var $target = getTargetFromTrigger($this)                                                                          // 204\n    var data    = $target.data('bs.collapse')                                                                          // 205\n    var option  = data ? 'toggle' : $this.data()                                                                       // 206\n                                                                                                                       // 207\n    Plugin.call($target, option)                                                                                       // 208\n  })                                                                                                                   // 209\n                                                                                                                       // 210\n}(jQuery);                                                                                                             // 211\n                                                                                                                       // 212\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/nemo64_bootstrap/bootstrap/js/dropdown.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* ========================================================================                                            // 1\n * Bootstrap: dropdown.js v3.3.5                                                                                       // 2\n * http://getbootstrap.com/javascript/#dropdowns                                                                       // 3\n * ========================================================================                                            // 4\n * Copyright 2011-2015 Twitter, Inc.                                                                                   // 5\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)                                          // 6\n * ======================================================================== */                                         // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n+function ($) {                                                                                                        // 10\n  'use strict';                                                                                                        // 11\n                                                                                                                       // 12\n  // DROPDOWN CLASS DEFINITION                                                                                         // 13\n  // =========================                                                                                         // 14\n                                                                                                                       // 15\n  var backdrop = '.dropdown-backdrop'                                                                                  // 16\n  var toggle   = '[data-toggle=\"dropdown\"]'                                                                            // 17\n  var Dropdown = function (element) {                                                                                  // 18\n    $(element).on('click.bs.dropdown', this.toggle)                                                                    // 19\n  }                                                                                                                    // 20\n                                                                                                                       // 21\n  Dropdown.VERSION = '3.3.5'                                                                                           // 22\n                                                                                                                       // 23\n  function getParent($this) {                                                                                          // 24\n    var selector = $this.attr('data-target')                                                                           // 25\n                                                                                                                       // 26\n    if (!selector) {                                                                                                   // 27\n      selector = $this.attr('href')                                                                                    // 28\n      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7     // 29\n    }                                                                                                                  // 30\n                                                                                                                       // 31\n    var $parent = selector && $(selector)                                                                              // 32\n                                                                                                                       // 33\n    return $parent && $parent.length ? $parent : $this.parent()                                                        // 34\n  }                                                                                                                    // 35\n                                                                                                                       // 36\n  function clearMenus(e) {                                                                                             // 37\n    if (e && e.which === 3) return                                                                                     // 38\n    $(backdrop).remove()                                                                                               // 39\n    $(toggle).each(function () {                                                                                       // 40\n      var $this         = $(this)                                                                                      // 41\n      var $parent       = getParent($this)                                                                             // 42\n      var relatedTarget = { relatedTarget: this }                                                                      // 43\n                                                                                                                       // 44\n      if (!$parent.hasClass('open')) return                                                                            // 45\n                                                                                                                       // 46\n      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return\n                                                                                                                       // 48\n      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))                                                  // 49\n                                                                                                                       // 50\n      if (e.isDefaultPrevented()) return                                                                               // 51\n                                                                                                                       // 52\n      $this.attr('aria-expanded', 'false')                                                                             // 53\n      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)                                         // 54\n    })                                                                                                                 // 55\n  }                                                                                                                    // 56\n                                                                                                                       // 57\n  Dropdown.prototype.toggle = function (e) {                                                                           // 58\n    var $this = $(this)                                                                                                // 59\n                                                                                                                       // 60\n    if ($this.is('.disabled, :disabled')) return                                                                       // 61\n                                                                                                                       // 62\n    var $parent  = getParent($this)                                                                                    // 63\n    var isActive = $parent.hasClass('open')                                                                            // 64\n                                                                                                                       // 65\n    clearMenus()                                                                                                       // 66\n                                                                                                                       // 67\n    if (!isActive) {                                                                                                   // 68\n      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {                      // 69\n        // if mobile we use a backdrop because click events don't delegate                                             // 70\n        $(document.createElement('div'))                                                                               // 71\n          .addClass('dropdown-backdrop')                                                                               // 72\n          .insertAfter($(this))                                                                                        // 73\n          .on('click', clearMenus)                                                                                     // 74\n      }                                                                                                                // 75\n                                                                                                                       // 76\n      var relatedTarget = { relatedTarget: this }                                                                      // 77\n      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))                                                  // 78\n                                                                                                                       // 79\n      if (e.isDefaultPrevented()) return                                                                               // 80\n                                                                                                                       // 81\n      $this                                                                                                            // 82\n        .trigger('focus')                                                                                              // 83\n        .attr('aria-expanded', 'true')                                                                                 // 84\n                                                                                                                       // 85\n      $parent                                                                                                          // 86\n        .toggleClass('open')                                                                                           // 87\n        .trigger('shown.bs.dropdown', relatedTarget)                                                                   // 88\n    }                                                                                                                  // 89\n                                                                                                                       // 90\n    return false                                                                                                       // 91\n  }                                                                                                                    // 92\n                                                                                                                       // 93\n  Dropdown.prototype.keydown = function (e) {                                                                          // 94\n    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return                             // 95\n                                                                                                                       // 96\n    var $this = $(this)                                                                                                // 97\n                                                                                                                       // 98\n    e.preventDefault()                                                                                                 // 99\n    e.stopPropagation()                                                                                                // 100\n                                                                                                                       // 101\n    if ($this.is('.disabled, :disabled')) return                                                                       // 102\n                                                                                                                       // 103\n    var $parent  = getParent($this)                                                                                    // 104\n    var isActive = $parent.hasClass('open')                                                                            // 105\n                                                                                                                       // 106\n    if (!isActive && e.which != 27 || isActive && e.which == 27) {                                                     // 107\n      if (e.which == 27) $parent.find(toggle).trigger('focus')                                                         // 108\n      return $this.trigger('click')                                                                                    // 109\n    }                                                                                                                  // 110\n                                                                                                                       // 111\n    var desc = ' li:not(.disabled):visible a'                                                                          // 112\n    var $items = $parent.find('.dropdown-menu' + desc)                                                                 // 113\n                                                                                                                       // 114\n    if (!$items.length) return                                                                                         // 115\n                                                                                                                       // 116\n    var index = $items.index(e.target)                                                                                 // 117\n                                                                                                                       // 118\n    if (e.which == 38 && index > 0)                 index--         // up                                              // 119\n    if (e.which == 40 && index < $items.length - 1) index++         // down                                            // 120\n    if (!~index)                                    index = 0                                                          // 121\n                                                                                                                       // 122\n    $items.eq(index).trigger('focus')                                                                                  // 123\n  }                                                                                                                    // 124\n                                                                                                                       // 125\n                                                                                                                       // 126\n  // DROPDOWN PLUGIN DEFINITION                                                                                        // 127\n  // ==========================                                                                                        // 128\n                                                                                                                       // 129\n  function Plugin(option) {                                                                                            // 130\n    return this.each(function () {                                                                                     // 131\n      var $this = $(this)                                                                                              // 132\n      var data  = $this.data('bs.dropdown')                                                                            // 133\n                                                                                                                       // 134\n      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))                                                // 135\n      if (typeof option == 'string') data[option].call($this)                                                          // 136\n    })                                                                                                                 // 137\n  }                                                                                                                    // 138\n                                                                                                                       // 139\n  var old = $.fn.dropdown                                                                                              // 140\n                                                                                                                       // 141\n  $.fn.dropdown             = Plugin                                                                                   // 142\n  $.fn.dropdown.Constructor = Dropdown                                                                                 // 143\n                                                                                                                       // 144\n                                                                                                                       // 145\n  // DROPDOWN NO CONFLICT                                                                                              // 146\n  // ====================                                                                                              // 147\n                                                                                                                       // 148\n  $.fn.dropdown.noConflict = function () {                                                                             // 149\n    $.fn.dropdown = old                                                                                                // 150\n    return this                                                                                                        // 151\n  }                                                                                                                    // 152\n                                                                                                                       // 153\n                                                                                                                       // 154\n  // APPLY TO STANDARD DROPDOWN ELEMENTS                                                                               // 155\n  // ===================================                                                                               // 156\n                                                                                                                       // 157\n  $(document)                                                                                                          // 158\n    .on('click.bs.dropdown.data-api', clearMenus)                                                                      // 159\n    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })                          // 160\n    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)                                               // 161\n    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)                                            // 162\n    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)                                  // 163\n                                                                                                                       // 164\n}(jQuery);                                                                                                             // 165\n                                                                                                                       // 166\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/nemo64_bootstrap/bootstrap/js/modal.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* ========================================================================                                            // 1\n * Bootstrap: modal.js v3.3.5                                                                                          // 2\n * http://getbootstrap.com/javascript/#modals                                                                          // 3\n * ========================================================================                                            // 4\n * Copyright 2011-2015 Twitter, Inc.                                                                                   // 5\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)                                          // 6\n * ======================================================================== */                                         // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n+function ($) {                                                                                                        // 10\n  'use strict';                                                                                                        // 11\n                                                                                                                       // 12\n  // MODAL CLASS DEFINITION                                                                                            // 13\n  // ======================                                                                                            // 14\n                                                                                                                       // 15\n  var Modal = function (element, options) {                                                                            // 16\n    this.options             = options                                                                                 // 17\n    this.$body               = $(document.body)                                                                        // 18\n    this.$element            = $(element)                                                                              // 19\n    this.$dialog             = this.$element.find('.modal-dialog')                                                     // 20\n    this.$backdrop           = null                                                                                    // 21\n    this.isShown             = null                                                                                    // 22\n    this.originalBodyPad     = null                                                                                    // 23\n    this.scrollbarWidth      = 0                                                                                       // 24\n    this.ignoreBackdropClick = false                                                                                   // 25\n                                                                                                                       // 26\n    if (this.options.remote) {                                                                                         // 27\n      this.$element                                                                                                    // 28\n        .find('.modal-content')                                                                                        // 29\n        .load(this.options.remote, $.proxy(function () {                                                               // 30\n          this.$element.trigger('loaded.bs.modal')                                                                     // 31\n        }, this))                                                                                                      // 32\n    }                                                                                                                  // 33\n  }                                                                                                                    // 34\n                                                                                                                       // 35\n  Modal.VERSION  = '3.3.5'                                                                                             // 36\n                                                                                                                       // 37\n  Modal.TRANSITION_DURATION = 300                                                                                      // 38\n  Modal.BACKDROP_TRANSITION_DURATION = 150                                                                             // 39\n                                                                                                                       // 40\n  Modal.DEFAULTS = {                                                                                                   // 41\n    backdrop: true,                                                                                                    // 42\n    keyboard: true,                                                                                                    // 43\n    show: true                                                                                                         // 44\n  }                                                                                                                    // 45\n                                                                                                                       // 46\n  Modal.prototype.toggle = function (_relatedTarget) {                                                                 // 47\n    return this.isShown ? this.hide() : this.show(_relatedTarget)                                                      // 48\n  }                                                                                                                    // 49\n                                                                                                                       // 50\n  Modal.prototype.show = function (_relatedTarget) {                                                                   // 51\n    var that = this                                                                                                    // 52\n    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })                                             // 53\n                                                                                                                       // 54\n    this.$element.trigger(e)                                                                                           // 55\n                                                                                                                       // 56\n    if (this.isShown || e.isDefaultPrevented()) return                                                                 // 57\n                                                                                                                       // 58\n    this.isShown = true                                                                                                // 59\n                                                                                                                       // 60\n    this.checkScrollbar()                                                                                              // 61\n    this.setScrollbar()                                                                                                // 62\n    this.$body.addClass('modal-open')                                                                                  // 63\n                                                                                                                       // 64\n    this.escape()                                                                                                      // 65\n    this.resize()                                                                                                      // 66\n                                                                                                                       // 67\n    this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this))                     // 68\n                                                                                                                       // 69\n    this.$dialog.on('mousedown.dismiss.bs.modal', function () {                                                        // 70\n      that.$element.one('mouseup.dismiss.bs.modal', function (e) {                                                     // 71\n        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true                                             // 72\n      })                                                                                                               // 73\n    })                                                                                                                 // 74\n                                                                                                                       // 75\n    this.backdrop(function () {                                                                                        // 76\n      var transition = $.support.transition && that.$element.hasClass('fade')                                          // 77\n                                                                                                                       // 78\n      if (!that.$element.parent().length) {                                                                            // 79\n        that.$element.appendTo(that.$body) // don't move modals dom position                                           // 80\n      }                                                                                                                // 81\n                                                                                                                       // 82\n      that.$element                                                                                                    // 83\n        .show()                                                                                                        // 84\n        .scrollTop(0)                                                                                                  // 85\n                                                                                                                       // 86\n      that.adjustDialog()                                                                                              // 87\n                                                                                                                       // 88\n      if (transition) {                                                                                                // 89\n        that.$element[0].offsetWidth // force reflow                                                                   // 90\n      }                                                                                                                // 91\n                                                                                                                       // 92\n      that.$element.addClass('in')                                                                                     // 93\n                                                                                                                       // 94\n      that.enforceFocus()                                                                                              // 95\n                                                                                                                       // 96\n      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })                                             // 97\n                                                                                                                       // 98\n      transition ?                                                                                                     // 99\n        that.$dialog // wait for modal to slide in                                                                     // 100\n          .one('bsTransitionEnd', function () {                                                                        // 101\n            that.$element.trigger('focus').trigger(e)                                                                  // 102\n          })                                                                                                           // 103\n          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :                                                           // 104\n        that.$element.trigger('focus').trigger(e)                                                                      // 105\n    })                                                                                                                 // 106\n  }                                                                                                                    // 107\n                                                                                                                       // 108\n  Modal.prototype.hide = function (e) {                                                                                // 109\n    if (e) e.preventDefault()                                                                                          // 110\n                                                                                                                       // 111\n    e = $.Event('hide.bs.modal')                                                                                       // 112\n                                                                                                                       // 113\n    this.$element.trigger(e)                                                                                           // 114\n                                                                                                                       // 115\n    if (!this.isShown || e.isDefaultPrevented()) return                                                                // 116\n                                                                                                                       // 117\n    this.isShown = false                                                                                               // 118\n                                                                                                                       // 119\n    this.escape()                                                                                                      // 120\n    this.resize()                                                                                                      // 121\n                                                                                                                       // 122\n    $(document).off('focusin.bs.modal')                                                                                // 123\n                                                                                                                       // 124\n    this.$element                                                                                                      // 125\n      .removeClass('in')                                                                                               // 126\n      .off('click.dismiss.bs.modal')                                                                                   // 127\n      .off('mouseup.dismiss.bs.modal')                                                                                 // 128\n                                                                                                                       // 129\n    this.$dialog.off('mousedown.dismiss.bs.modal')                                                                     // 130\n                                                                                                                       // 131\n    $.support.transition && this.$element.hasClass('fade') ?                                                           // 132\n      this.$element                                                                                                    // 133\n        .one('bsTransitionEnd', $.proxy(this.hideModal, this))                                                         // 134\n        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :                                                             // 135\n      this.hideModal()                                                                                                 // 136\n  }                                                                                                                    // 137\n                                                                                                                       // 138\n  Modal.prototype.enforceFocus = function () {                                                                         // 139\n    $(document)                                                                                                        // 140\n      .off('focusin.bs.modal') // guard against infinite focus loop                                                    // 141\n      .on('focusin.bs.modal', $.proxy(function (e) {                                                                   // 142\n        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {                                    // 143\n          this.$element.trigger('focus')                                                                               // 144\n        }                                                                                                              // 145\n      }, this))                                                                                                        // 146\n  }                                                                                                                    // 147\n                                                                                                                       // 148\n  Modal.prototype.escape = function () {                                                                               // 149\n    if (this.isShown && this.options.keyboard) {                                                                       // 150\n      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {                                              // 151\n        e.which == 27 && this.hide()                                                                                   // 152\n      }, this))                                                                                                        // 153\n    } else if (!this.isShown) {                                                                                        // 154\n      this.$element.off('keydown.dismiss.bs.modal')                                                                    // 155\n    }                                                                                                                  // 156\n  }                                                                                                                    // 157\n                                                                                                                       // 158\n  Modal.prototype.resize = function () {                                                                               // 159\n    if (this.isShown) {                                                                                                // 160\n      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))                                                // 161\n    } else {                                                                                                           // 162\n      $(window).off('resize.bs.modal')                                                                                 // 163\n    }                                                                                                                  // 164\n  }                                                                                                                    // 165\n                                                                                                                       // 166\n  Modal.prototype.hideModal = function () {                                                                            // 167\n    var that = this                                                                                                    // 168\n    this.$element.hide()                                                                                               // 169\n    this.backdrop(function () {                                                                                        // 170\n      that.$body.removeClass('modal-open')                                                                             // 171\n      that.resetAdjustments()                                                                                          // 172\n      that.resetScrollbar()                                                                                            // 173\n      that.$element.trigger('hidden.bs.modal')                                                                         // 174\n    })                                                                                                                 // 175\n  }                                                                                                                    // 176\n                                                                                                                       // 177\n  Modal.prototype.removeBackdrop = function () {                                                                       // 178\n    this.$backdrop && this.$backdrop.remove()                                                                          // 179\n    this.$backdrop = null                                                                                              // 180\n  }                                                                                                                    // 181\n                                                                                                                       // 182\n  Modal.prototype.backdrop = function (callback) {                                                                     // 183\n    var that = this                                                                                                    // 184\n    var animate = this.$element.hasClass('fade') ? 'fade' : ''                                                         // 185\n                                                                                                                       // 186\n    if (this.isShown && this.options.backdrop) {                                                                       // 187\n      var doAnimate = $.support.transition && animate                                                                  // 188\n                                                                                                                       // 189\n      this.$backdrop = $(document.createElement('div'))                                                                // 190\n        .addClass('modal-backdrop ' + animate)                                                                         // 191\n        .appendTo(this.$body)                                                                                          // 192\n                                                                                                                       // 193\n      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {                                                // 194\n        if (this.ignoreBackdropClick) {                                                                                // 195\n          this.ignoreBackdropClick = false                                                                             // 196\n          return                                                                                                       // 197\n        }                                                                                                              // 198\n        if (e.target !== e.currentTarget) return                                                                       // 199\n        this.options.backdrop == 'static'                                                                              // 200\n          ? this.$element[0].focus()                                                                                   // 201\n          : this.hide()                                                                                                // 202\n      }, this))                                                                                                        // 203\n                                                                                                                       // 204\n      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow                                                     // 205\n                                                                                                                       // 206\n      this.$backdrop.addClass('in')                                                                                    // 207\n                                                                                                                       // 208\n      if (!callback) return                                                                                            // 209\n                                                                                                                       // 210\n      doAnimate ?                                                                                                      // 211\n        this.$backdrop                                                                                                 // 212\n          .one('bsTransitionEnd', callback)                                                                            // 213\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :                                                  // 214\n        callback()                                                                                                     // 215\n                                                                                                                       // 216\n    } else if (!this.isShown && this.$backdrop) {                                                                      // 217\n      this.$backdrop.removeClass('in')                                                                                 // 218\n                                                                                                                       // 219\n      var callbackRemove = function () {                                                                               // 220\n        that.removeBackdrop()                                                                                          // 221\n        callback && callback()                                                                                         // 222\n      }                                                                                                                // 223\n      $.support.transition && this.$element.hasClass('fade') ?                                                         // 224\n        this.$backdrop                                                                                                 // 225\n          .one('bsTransitionEnd', callbackRemove)                                                                      // 226\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :                                                  // 227\n        callbackRemove()                                                                                               // 228\n                                                                                                                       // 229\n    } else if (callback) {                                                                                             // 230\n      callback()                                                                                                       // 231\n    }                                                                                                                  // 232\n  }                                                                                                                    // 233\n                                                                                                                       // 234\n  // these following methods are used to handle overflowing modals                                                     // 235\n                                                                                                                       // 236\n  Modal.prototype.handleUpdate = function () {                                                                         // 237\n    this.adjustDialog()                                                                                                // 238\n  }                                                                                                                    // 239\n                                                                                                                       // 240\n  Modal.prototype.adjustDialog = function () {                                                                         // 241\n    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight                     // 242\n                                                                                                                       // 243\n    this.$element.css({                                                                                                // 244\n      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',                          // 245\n      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''                           // 246\n    })                                                                                                                 // 247\n  }                                                                                                                    // 248\n                                                                                                                       // 249\n  Modal.prototype.resetAdjustments = function () {                                                                     // 250\n    this.$element.css({                                                                                                // 251\n      paddingLeft: '',                                                                                                 // 252\n      paddingRight: ''                                                                                                 // 253\n    })                                                                                                                 // 254\n  }                                                                                                                    // 255\n                                                                                                                       // 256\n  Modal.prototype.checkScrollbar = function () {                                                                       // 257\n    var fullWindowWidth = window.innerWidth                                                                            // 258\n    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8                                         // 259\n      var documentElementRect = document.documentElement.getBoundingClientRect()                                       // 260\n      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)                                 // 261\n    }                                                                                                                  // 262\n    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth                                               // 263\n    this.scrollbarWidth = this.measureScrollbar()                                                                      // 264\n  }                                                                                                                    // 265\n                                                                                                                       // 266\n  Modal.prototype.setScrollbar = function () {                                                                         // 267\n    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)                                                 // 268\n    this.originalBodyPad = document.body.style.paddingRight || ''                                                      // 269\n    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)                         // 270\n  }                                                                                                                    // 271\n                                                                                                                       // 272\n  Modal.prototype.resetScrollbar = function () {                                                                       // 273\n    this.$body.css('padding-right', this.originalBodyPad)                                                              // 274\n  }                                                                                                                    // 275\n                                                                                                                       // 276\n  Modal.prototype.measureScrollbar = function () { // thx walsh                                                        // 277\n    var scrollDiv = document.createElement('div')                                                                      // 278\n    scrollDiv.className = 'modal-scrollbar-measure'                                                                    // 279\n    this.$body.append(scrollDiv)                                                                                       // 280\n    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth                                                 // 281\n    this.$body[0].removeChild(scrollDiv)                                                                               // 282\n    return scrollbarWidth                                                                                              // 283\n  }                                                                                                                    // 284\n                                                                                                                       // 285\n                                                                                                                       // 286\n  // MODAL PLUGIN DEFINITION                                                                                           // 287\n  // =======================                                                                                           // 288\n                                                                                                                       // 289\n  function Plugin(option, _relatedTarget) {                                                                            // 290\n    return this.each(function () {                                                                                     // 291\n      var $this   = $(this)                                                                                            // 292\n      var data    = $this.data('bs.modal')                                                                             // 293\n      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)                    // 294\n                                                                                                                       // 295\n      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))                                             // 296\n      if (typeof option == 'string') data[option](_relatedTarget)                                                      // 297\n      else if (options.show) data.show(_relatedTarget)                                                                 // 298\n    })                                                                                                                 // 299\n  }                                                                                                                    // 300\n                                                                                                                       // 301\n  var old = $.fn.modal                                                                                                 // 302\n                                                                                                                       // 303\n  $.fn.modal             = Plugin                                                                                      // 304\n  $.fn.modal.Constructor = Modal                                                                                       // 305\n                                                                                                                       // 306\n                                                                                                                       // 307\n  // MODAL NO CONFLICT                                                                                                 // 308\n  // =================                                                                                                 // 309\n                                                                                                                       // 310\n  $.fn.modal.noConflict = function () {                                                                                // 311\n    $.fn.modal = old                                                                                                   // 312\n    return this                                                                                                        // 313\n  }                                                                                                                    // 314\n                                                                                                                       // 315\n                                                                                                                       // 316\n  // MODAL DATA-API                                                                                                    // 317\n  // ==============                                                                                                    // 318\n                                                                                                                       // 319\n  $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {                                    // 320\n    var $this   = $(this)                                                                                              // 321\n    var href    = $this.attr('href')                                                                                   // 322\n    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\\s]+$)/, ''))) // strip for ie7        // 323\n    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())\n                                                                                                                       // 325\n    if ($this.is('a')) e.preventDefault()                                                                              // 326\n                                                                                                                       // 327\n    $target.one('show.bs.modal', function (showEvent) {                                                                // 328\n      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown      // 329\n      $target.one('hidden.bs.modal', function () {                                                                     // 330\n        $this.is(':visible') && $this.trigger('focus')                                                                 // 331\n      })                                                                                                               // 332\n    })                                                                                                                 // 333\n    Plugin.call($target, option, this)                                                                                 // 334\n  })                                                                                                                   // 335\n                                                                                                                       // 336\n}(jQuery);                                                                                                             // 337\n                                                                                                                       // 338\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/nemo64_bootstrap/bootstrap/js/tooltip.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* ========================================================================                                            // 1\n * Bootstrap: tooltip.js v3.3.5                                                                                        // 2\n * http://getbootstrap.com/javascript/#tooltip                                                                         // 3\n * Inspired by the original jQuery.tipsy by Jason Frame                                                                // 4\n * ========================================================================                                            // 5\n * Copyright 2011-2015 Twitter, Inc.                                                                                   // 6\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)                                          // 7\n * ======================================================================== */                                         // 8\n                                                                                                                       // 9\n                                                                                                                       // 10\n+function ($) {                                                                                                        // 11\n  'use strict';                                                                                                        // 12\n                                                                                                                       // 13\n  // TOOLTIP PUBLIC CLASS DEFINITION                                                                                   // 14\n  // ===============================                                                                                   // 15\n                                                                                                                       // 16\n  var Tooltip = function (element, options) {                                                                          // 17\n    this.type       = null                                                                                             // 18\n    this.options    = null                                                                                             // 19\n    this.enabled    = null                                                                                             // 20\n    this.timeout    = null                                                                                             // 21\n    this.hoverState = null                                                                                             // 22\n    this.$element   = null                                                                                             // 23\n    this.inState    = null                                                                                             // 24\n                                                                                                                       // 25\n    this.init('tooltip', element, options)                                                                             // 26\n  }                                                                                                                    // 27\n                                                                                                                       // 28\n  Tooltip.VERSION  = '3.3.5'                                                                                           // 29\n                                                                                                                       // 30\n  Tooltip.TRANSITION_DURATION = 150                                                                                    // 31\n                                                                                                                       // 32\n  Tooltip.DEFAULTS = {                                                                                                 // 33\n    animation: true,                                                                                                   // 34\n    placement: 'top',                                                                                                  // 35\n    selector: false,                                                                                                   // 36\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',                                                                                            // 38\n    title: '',                                                                                                         // 39\n    delay: 0,                                                                                                          // 40\n    html: false,                                                                                                       // 41\n    container: false,                                                                                                  // 42\n    viewport: {                                                                                                        // 43\n      selector: 'body',                                                                                                // 44\n      padding: 0                                                                                                       // 45\n    }                                                                                                                  // 46\n  }                                                                                                                    // 47\n                                                                                                                       // 48\n  Tooltip.prototype.init = function (type, element, options) {                                                         // 49\n    this.enabled   = true                                                                                              // 50\n    this.type      = type                                                                                              // 51\n    this.$element  = $(element)                                                                                        // 52\n    this.options   = this.getOptions(options)                                                                          // 53\n    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))\n    this.inState   = { click: false, hover: false, focus: false }                                                      // 55\n                                                                                                                       // 56\n    if (this.$element[0] instanceof document.constructor && !this.options.selector) {                                  // 57\n      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\n    }                                                                                                                  // 59\n                                                                                                                       // 60\n    var triggers = this.options.trigger.split(' ')                                                                     // 61\n                                                                                                                       // 62\n    for (var i = triggers.length; i--;) {                                                                              // 63\n      var trigger = triggers[i]                                                                                        // 64\n                                                                                                                       // 65\n      if (trigger == 'click') {                                                                                        // 66\n        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))                      // 67\n      } else if (trigger != 'manual') {                                                                                // 68\n        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'                                                   // 69\n        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'                                                  // 70\n                                                                                                                       // 71\n        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))                 // 72\n        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))                 // 73\n      }                                                                                                                // 74\n    }                                                                                                                  // 75\n                                                                                                                       // 76\n    this.options.selector ?                                                                                            // 77\n      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :                              // 78\n      this.fixTitle()                                                                                                  // 79\n  }                                                                                                                    // 80\n                                                                                                                       // 81\n  Tooltip.prototype.getDefaults = function () {                                                                        // 82\n    return Tooltip.DEFAULTS                                                                                            // 83\n  }                                                                                                                    // 84\n                                                                                                                       // 85\n  Tooltip.prototype.getOptions = function (options) {                                                                  // 86\n    options = $.extend({}, this.getDefaults(), this.$element.data(), options)                                          // 87\n                                                                                                                       // 88\n    if (options.delay && typeof options.delay == 'number') {                                                           // 89\n      options.delay = {                                                                                                // 90\n        show: options.delay,                                                                                           // 91\n        hide: options.delay                                                                                            // 92\n      }                                                                                                                // 93\n    }                                                                                                                  // 94\n                                                                                                                       // 95\n    return options                                                                                                     // 96\n  }                                                                                                                    // 97\n                                                                                                                       // 98\n  Tooltip.prototype.getDelegateOptions = function () {                                                                 // 99\n    var options  = {}                                                                                                  // 100\n    var defaults = this.getDefaults()                                                                                  // 101\n                                                                                                                       // 102\n    this._options && $.each(this._options, function (key, value) {                                                     // 103\n      if (defaults[key] != value) options[key] = value                                                                 // 104\n    })                                                                                                                 // 105\n                                                                                                                       // 106\n    return options                                                                                                     // 107\n  }                                                                                                                    // 108\n                                                                                                                       // 109\n  Tooltip.prototype.enter = function (obj) {                                                                           // 110\n    var self = obj instanceof this.constructor ?                                                                       // 111\n      obj : $(obj.currentTarget).data('bs.' + this.type)                                                               // 112\n                                                                                                                       // 113\n    if (!self) {                                                                                                       // 114\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())                                        // 115\n      $(obj.currentTarget).data('bs.' + this.type, self)                                                               // 116\n    }                                                                                                                  // 117\n                                                                                                                       // 118\n    if (obj instanceof $.Event) {                                                                                      // 119\n      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true                                                   // 120\n    }                                                                                                                  // 121\n                                                                                                                       // 122\n    if (self.tip().hasClass('in') || self.hoverState == 'in') {                                                        // 123\n      self.hoverState = 'in'                                                                                           // 124\n      return                                                                                                           // 125\n    }                                                                                                                  // 126\n                                                                                                                       // 127\n    clearTimeout(self.timeout)                                                                                         // 128\n                                                                                                                       // 129\n    self.hoverState = 'in'                                                                                             // 130\n                                                                                                                       // 131\n    if (!self.options.delay || !self.options.delay.show) return self.show()                                            // 132\n                                                                                                                       // 133\n    self.timeout = setTimeout(function () {                                                                            // 134\n      if (self.hoverState == 'in') self.show()                                                                         // 135\n    }, self.options.delay.show)                                                                                        // 136\n  }                                                                                                                    // 137\n                                                                                                                       // 138\n  Tooltip.prototype.isInStateTrue = function () {                                                                      // 139\n    for (var key in this.inState) {                                                                                    // 140\n      if (this.inState[key]) return true                                                                               // 141\n    }                                                                                                                  // 142\n                                                                                                                       // 143\n    return false                                                                                                       // 144\n  }                                                                                                                    // 145\n                                                                                                                       // 146\n  Tooltip.prototype.leave = function (obj) {                                                                           // 147\n    var self = obj instanceof this.constructor ?                                                                       // 148\n      obj : $(obj.currentTarget).data('bs.' + this.type)                                                               // 149\n                                                                                                                       // 150\n    if (!self) {                                                                                                       // 151\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())                                        // 152\n      $(obj.currentTarget).data('bs.' + this.type, self)                                                               // 153\n    }                                                                                                                  // 154\n                                                                                                                       // 155\n    if (obj instanceof $.Event) {                                                                                      // 156\n      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false                                                 // 157\n    }                                                                                                                  // 158\n                                                                                                                       // 159\n    if (self.isInStateTrue()) return                                                                                   // 160\n                                                                                                                       // 161\n    clearTimeout(self.timeout)                                                                                         // 162\n                                                                                                                       // 163\n    self.hoverState = 'out'                                                                                            // 164\n                                                                                                                       // 165\n    if (!self.options.delay || !self.options.delay.hide) return self.hide()                                            // 166\n                                                                                                                       // 167\n    self.timeout = setTimeout(function () {                                                                            // 168\n      if (self.hoverState == 'out') self.hide()                                                                        // 169\n    }, self.options.delay.hide)                                                                                        // 170\n  }                                                                                                                    // 171\n                                                                                                                       // 172\n  Tooltip.prototype.show = function () {                                                                               // 173\n    var e = $.Event('show.bs.' + this.type)                                                                            // 174\n                                                                                                                       // 175\n    if (this.hasContent() && this.enabled) {                                                                           // 176\n      this.$element.trigger(e)                                                                                         // 177\n                                                                                                                       // 178\n      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])                         // 179\n      if (e.isDefaultPrevented() || !inDom) return                                                                     // 180\n      var that = this                                                                                                  // 181\n                                                                                                                       // 182\n      var $tip = this.tip()                                                                                            // 183\n                                                                                                                       // 184\n      var tipId = this.getUID(this.type)                                                                               // 185\n                                                                                                                       // 186\n      this.setContent()                                                                                                // 187\n      $tip.attr('id', tipId)                                                                                           // 188\n      this.$element.attr('aria-describedby', tipId)                                                                    // 189\n                                                                                                                       // 190\n      if (this.options.animation) $tip.addClass('fade')                                                                // 191\n                                                                                                                       // 192\n      var placement = typeof this.options.placement == 'function' ?                                                    // 193\n        this.options.placement.call(this, $tip[0], this.$element[0]) :                                                 // 194\n        this.options.placement                                                                                         // 195\n                                                                                                                       // 196\n      var autoToken = /\\s?auto?\\s?/i                                                                                   // 197\n      var autoPlace = autoToken.test(placement)                                                                        // 198\n      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'                                             // 199\n                                                                                                                       // 200\n      $tip                                                                                                             // 201\n        .detach()                                                                                                      // 202\n        .css({ top: 0, left: 0, display: 'block' })                                                                    // 203\n        .addClass(placement)                                                                                           // 204\n        .data('bs.' + this.type, this)                                                                                 // 205\n                                                                                                                       // 206\n      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)                 // 207\n      this.$element.trigger('inserted.bs.' + this.type)                                                                // 208\n                                                                                                                       // 209\n      var pos          = this.getPosition()                                                                            // 210\n      var actualWidth  = $tip[0].offsetWidth                                                                           // 211\n      var actualHeight = $tip[0].offsetHeight                                                                          // 212\n                                                                                                                       // 213\n      if (autoPlace) {                                                                                                 // 214\n        var orgPlacement = placement                                                                                   // 215\n        var viewportDim = this.getPosition(this.$viewport)                                                             // 216\n                                                                                                                       // 217\n        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :               // 218\n                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :               // 219\n                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :               // 220\n                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :               // 221\n                    placement                                                                                          // 222\n                                                                                                                       // 223\n        $tip                                                                                                           // 224\n          .removeClass(orgPlacement)                                                                                   // 225\n          .addClass(placement)                                                                                         // 226\n      }                                                                                                                // 227\n                                                                                                                       // 228\n      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)                       // 229\n                                                                                                                       // 230\n      this.applyPlacement(calculatedOffset, placement)                                                                 // 231\n                                                                                                                       // 232\n      var complete = function () {                                                                                     // 233\n        var prevHoverState = that.hoverState                                                                           // 234\n        that.$element.trigger('shown.bs.' + that.type)                                                                 // 235\n        that.hoverState = null                                                                                         // 236\n                                                                                                                       // 237\n        if (prevHoverState == 'out') that.leave(that)                                                                  // 238\n      }                                                                                                                // 239\n                                                                                                                       // 240\n      $.support.transition && this.$tip.hasClass('fade') ?                                                             // 241\n        $tip                                                                                                           // 242\n          .one('bsTransitionEnd', complete)                                                                            // 243\n          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :                                                         // 244\n        complete()                                                                                                     // 245\n    }                                                                                                                  // 246\n  }                                                                                                                    // 247\n                                                                                                                       // 248\n  Tooltip.prototype.applyPlacement = function (offset, placement) {                                                    // 249\n    var $tip   = this.tip()                                                                                            // 250\n    var width  = $tip[0].offsetWidth                                                                                   // 251\n    var height = $tip[0].offsetHeight                                                                                  // 252\n                                                                                                                       // 253\n    // manually read margins because getBoundingClientRect includes difference                                         // 254\n    var marginTop = parseInt($tip.css('margin-top'), 10)                                                               // 255\n    var marginLeft = parseInt($tip.css('margin-left'), 10)                                                             // 256\n                                                                                                                       // 257\n    // we must check for NaN for ie 8/9                                                                                // 258\n    if (isNaN(marginTop))  marginTop  = 0                                                                              // 259\n    if (isNaN(marginLeft)) marginLeft = 0                                                                              // 260\n                                                                                                                       // 261\n    offset.top  += marginTop                                                                                           // 262\n    offset.left += marginLeft                                                                                          // 263\n                                                                                                                       // 264\n    // $.fn.offset doesn't round pixel values                                                                          // 265\n    // so we use setOffset directly with our own function B-0                                                          // 266\n    $.offset.setOffset($tip[0], $.extend({                                                                             // 267\n      using: function (props) {                                                                                        // 268\n        $tip.css({                                                                                                     // 269\n          top: Math.round(props.top),                                                                                  // 270\n          left: Math.round(props.left)                                                                                 // 271\n        })                                                                                                             // 272\n      }                                                                                                                // 273\n    }, offset), 0)                                                                                                     // 274\n                                                                                                                       // 275\n    $tip.addClass('in')                                                                                                // 276\n                                                                                                                       // 277\n    // check to see if placing tip in new offset caused the tip to resize itself                                       // 278\n    var actualWidth  = $tip[0].offsetWidth                                                                             // 279\n    var actualHeight = $tip[0].offsetHeight                                                                            // 280\n                                                                                                                       // 281\n    if (placement == 'top' && actualHeight != height) {                                                                // 282\n      offset.top = offset.top + height - actualHeight                                                                  // 283\n    }                                                                                                                  // 284\n                                                                                                                       // 285\n    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)                            // 286\n                                                                                                                       // 287\n    if (delta.left) offset.left += delta.left                                                                          // 288\n    else offset.top += delta.top                                                                                       // 289\n                                                                                                                       // 290\n    var isVertical          = /top|bottom/.test(placement)                                                             // 291\n    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight\n    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'                                              // 293\n                                                                                                                       // 294\n    $tip.offset(offset)                                                                                                // 295\n    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)                                            // 296\n  }                                                                                                                    // 297\n                                                                                                                       // 298\n  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {                                           // 299\n    this.arrow()                                                                                                       // 300\n      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')                                            // 301\n      .css(isVertical ? 'top' : 'left', '')                                                                            // 302\n  }                                                                                                                    // 303\n                                                                                                                       // 304\n  Tooltip.prototype.setContent = function () {                                                                         // 305\n    var $tip  = this.tip()                                                                                             // 306\n    var title = this.getTitle()                                                                                        // 307\n                                                                                                                       // 308\n    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)                                            // 309\n    $tip.removeClass('fade in top bottom left right')                                                                  // 310\n  }                                                                                                                    // 311\n                                                                                                                       // 312\n  Tooltip.prototype.hide = function (callback) {                                                                       // 313\n    var that = this                                                                                                    // 314\n    var $tip = $(this.$tip)                                                                                            // 315\n    var e    = $.Event('hide.bs.' + this.type)                                                                         // 316\n                                                                                                                       // 317\n    function complete() {                                                                                              // 318\n      if (that.hoverState != 'in') $tip.detach()                                                                       // 319\n      that.$element                                                                                                    // 320\n        .removeAttr('aria-describedby')                                                                                // 321\n        .trigger('hidden.bs.' + that.type)                                                                             // 322\n      callback && callback()                                                                                           // 323\n    }                                                                                                                  // 324\n                                                                                                                       // 325\n    this.$element.trigger(e)                                                                                           // 326\n                                                                                                                       // 327\n    if (e.isDefaultPrevented()) return                                                                                 // 328\n                                                                                                                       // 329\n    $tip.removeClass('in')                                                                                             // 330\n                                                                                                                       // 331\n    $.support.transition && $tip.hasClass('fade') ?                                                                    // 332\n      $tip                                                                                                             // 333\n        .one('bsTransitionEnd', complete)                                                                              // 334\n        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :                                                           // 335\n      complete()                                                                                                       // 336\n                                                                                                                       // 337\n    this.hoverState = null                                                                                             // 338\n                                                                                                                       // 339\n    return this                                                                                                        // 340\n  }                                                                                                                    // 341\n                                                                                                                       // 342\n  Tooltip.prototype.fixTitle = function () {                                                                           // 343\n    var $e = this.$element                                                                                             // 344\n    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {                                       // 345\n      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')                                         // 346\n    }                                                                                                                  // 347\n  }                                                                                                                    // 348\n                                                                                                                       // 349\n  Tooltip.prototype.hasContent = function () {                                                                         // 350\n    return this.getTitle()                                                                                             // 351\n  }                                                                                                                    // 352\n                                                                                                                       // 353\n  Tooltip.prototype.getPosition = function ($element) {                                                                // 354\n    $element   = $element || this.$element                                                                             // 355\n                                                                                                                       // 356\n    var el     = $element[0]                                                                                           // 357\n    var isBody = el.tagName == 'BODY'                                                                                  // 358\n                                                                                                                       // 359\n    var elRect    = el.getBoundingClientRect()                                                                         // 360\n    if (elRect.width == null) {                                                                                        // 361\n      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })         // 363\n    }                                                                                                                  // 364\n    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()                                                   // 365\n    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }\n    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null                           // 367\n                                                                                                                       // 368\n    return $.extend({}, elRect, scroll, outerDims, elOffset)                                                           // 369\n  }                                                                                                                    // 370\n                                                                                                                       // 371\n  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {                       // 372\n    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :\n        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }    // 376\n                                                                                                                       // 377\n  }                                                                                                                    // 378\n                                                                                                                       // 379\n  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {                  // 380\n    var delta = { top: 0, left: 0 }                                                                                    // 381\n    if (!this.$viewport) return delta                                                                                  // 382\n                                                                                                                       // 383\n    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0                                  // 384\n    var viewportDimensions = this.getPosition(this.$viewport)                                                          // 385\n                                                                                                                       // 386\n    if (/right|left/.test(placement)) {                                                                                // 387\n      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll                                     // 388\n      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight                      // 389\n      if (topEdgeOffset < viewportDimensions.top) { // top overflow                                                    // 390\n        delta.top = viewportDimensions.top - topEdgeOffset                                                             // 391\n      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow           // 392\n        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset                              // 393\n      }                                                                                                                // 394\n    } else {                                                                                                           // 395\n      var leftEdgeOffset  = pos.left - viewportPadding                                                                 // 396\n      var rightEdgeOffset = pos.left + viewportPadding + actualWidth                                                   // 397\n      if (leftEdgeOffset < viewportDimensions.left) { // left overflow                                                 // 398\n        delta.left = viewportDimensions.left - leftEdgeOffset                                                          // 399\n      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow                                       // 400\n        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset                              // 401\n      }                                                                                                                // 402\n    }                                                                                                                  // 403\n                                                                                                                       // 404\n    return delta                                                                                                       // 405\n  }                                                                                                                    // 406\n                                                                                                                       // 407\n  Tooltip.prototype.getTitle = function () {                                                                           // 408\n    var title                                                                                                          // 409\n    var $e = this.$element                                                                                             // 410\n    var o  = this.options                                                                                              // 411\n                                                                                                                       // 412\n    title = $e.attr('data-original-title')                                                                             // 413\n      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)                                               // 414\n                                                                                                                       // 415\n    return title                                                                                                       // 416\n  }                                                                                                                    // 417\n                                                                                                                       // 418\n  Tooltip.prototype.getUID = function (prefix) {                                                                       // 419\n    do prefix += ~~(Math.random() * 1000000)                                                                           // 420\n    while (document.getElementById(prefix))                                                                            // 421\n    return prefix                                                                                                      // 422\n  }                                                                                                                    // 423\n                                                                                                                       // 424\n  Tooltip.prototype.tip = function () {                                                                                // 425\n    if (!this.$tip) {                                                                                                  // 426\n      this.$tip = $(this.options.template)                                                                             // 427\n      if (this.$tip.length != 1) {                                                                                     // 428\n        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')                 // 429\n      }                                                                                                                // 430\n    }                                                                                                                  // 431\n    return this.$tip                                                                                                   // 432\n  }                                                                                                                    // 433\n                                                                                                                       // 434\n  Tooltip.prototype.arrow = function () {                                                                              // 435\n    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))                                            // 436\n  }                                                                                                                    // 437\n                                                                                                                       // 438\n  Tooltip.prototype.enable = function () {                                                                             // 439\n    this.enabled = true                                                                                                // 440\n  }                                                                                                                    // 441\n                                                                                                                       // 442\n  Tooltip.prototype.disable = function () {                                                                            // 443\n    this.enabled = false                                                                                               // 444\n  }                                                                                                                    // 445\n                                                                                                                       // 446\n  Tooltip.prototype.toggleEnabled = function () {                                                                      // 447\n    this.enabled = !this.enabled                                                                                       // 448\n  }                                                                                                                    // 449\n                                                                                                                       // 450\n  Tooltip.prototype.toggle = function (e) {                                                                            // 451\n    var self = this                                                                                                    // 452\n    if (e) {                                                                                                           // 453\n      self = $(e.currentTarget).data('bs.' + this.type)                                                                // 454\n      if (!self) {                                                                                                     // 455\n        self = new this.constructor(e.currentTarget, this.getDelegateOptions())                                        // 456\n        $(e.currentTarget).data('bs.' + this.type, self)                                                               // 457\n      }                                                                                                                // 458\n    }                                                                                                                  // 459\n                                                                                                                       // 460\n    if (e) {                                                                                                           // 461\n      self.inState.click = !self.inState.click                                                                         // 462\n      if (self.isInStateTrue()) self.enter(self)                                                                       // 463\n      else self.leave(self)                                                                                            // 464\n    } else {                                                                                                           // 465\n      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)                                                  // 466\n    }                                                                                                                  // 467\n  }                                                                                                                    // 468\n                                                                                                                       // 469\n  Tooltip.prototype.destroy = function () {                                                                            // 470\n    var that = this                                                                                                    // 471\n    clearTimeout(this.timeout)                                                                                         // 472\n    this.hide(function () {                                                                                            // 473\n      that.$element.off('.' + that.type).removeData('bs.' + that.type)                                                 // 474\n      if (that.$tip) {                                                                                                 // 475\n        that.$tip.detach()                                                                                             // 476\n      }                                                                                                                // 477\n      that.$tip = null                                                                                                 // 478\n      that.$arrow = null                                                                                               // 479\n      that.$viewport = null                                                                                            // 480\n    })                                                                                                                 // 481\n  }                                                                                                                    // 482\n                                                                                                                       // 483\n                                                                                                                       // 484\n  // TOOLTIP PLUGIN DEFINITION                                                                                         // 485\n  // =========================                                                                                         // 486\n                                                                                                                       // 487\n  function Plugin(option) {                                                                                            // 488\n    return this.each(function () {                                                                                     // 489\n      var $this   = $(this)                                                                                            // 490\n      var data    = $this.data('bs.tooltip')                                                                           // 491\n      var options = typeof option == 'object' && option                                                                // 492\n                                                                                                                       // 493\n      if (!data && /destroy|hide/.test(option)) return                                                                 // 494\n      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))                                         // 495\n      if (typeof option == 'string') data[option]()                                                                    // 496\n    })                                                                                                                 // 497\n  }                                                                                                                    // 498\n                                                                                                                       // 499\n  var old = $.fn.tooltip                                                                                               // 500\n                                                                                                                       // 501\n  $.fn.tooltip             = Plugin                                                                                    // 502\n  $.fn.tooltip.Constructor = Tooltip                                                                                   // 503\n                                                                                                                       // 504\n                                                                                                                       // 505\n  // TOOLTIP NO CONFLICT                                                                                               // 506\n  // ===================                                                                                               // 507\n                                                                                                                       // 508\n  $.fn.tooltip.noConflict = function () {                                                                              // 509\n    $.fn.tooltip = old                                                                                                 // 510\n    return this                                                                                                        // 511\n  }                                                                                                                    // 512\n                                                                                                                       // 513\n}(jQuery);                                                                                                             // 514\n                                                                                                                       // 515\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/nemo64_bootstrap/bootstrap/js/popover.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* ========================================================================                                            // 1\n * Bootstrap: popover.js v3.3.5                                                                                        // 2\n * http://getbootstrap.com/javascript/#popovers                                                                        // 3\n * ========================================================================                                            // 4\n * Copyright 2011-2015 Twitter, Inc.                                                                                   // 5\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)                                          // 6\n * ======================================================================== */                                         // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n+function ($) {                                                                                                        // 10\n  'use strict';                                                                                                        // 11\n                                                                                                                       // 12\n  // POPOVER PUBLIC CLASS DEFINITION                                                                                   // 13\n  // ===============================                                                                                   // 14\n                                                                                                                       // 15\n  var Popover = function (element, options) {                                                                          // 16\n    this.init('popover', element, options)                                                                             // 17\n  }                                                                                                                    // 18\n                                                                                                                       // 19\n  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')                                                    // 20\n                                                                                                                       // 21\n  Popover.VERSION  = '3.3.5'                                                                                           // 22\n                                                                                                                       // 23\n  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {                                                 // 24\n    placement: 'right',                                                                                                // 25\n    trigger: 'click',                                                                                                  // 26\n    content: '',                                                                                                       // 27\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\n  })                                                                                                                   // 29\n                                                                                                                       // 30\n                                                                                                                       // 31\n  // NOTE: POPOVER EXTENDS tooltip.js                                                                                  // 32\n  // ================================                                                                                  // 33\n                                                                                                                       // 34\n  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)                                                 // 35\n                                                                                                                       // 36\n  Popover.prototype.constructor = Popover                                                                              // 37\n                                                                                                                       // 38\n  Popover.prototype.getDefaults = function () {                                                                        // 39\n    return Popover.DEFAULTS                                                                                            // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n  Popover.prototype.setContent = function () {                                                                         // 43\n    var $tip    = this.tip()                                                                                           // 44\n    var title   = this.getTitle()                                                                                      // 45\n    var content = this.getContent()                                                                                    // 46\n                                                                                                                       // 47\n    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)                                            // 48\n    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events   // 49\n      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'                                    // 50\n    ](content)                                                                                                         // 51\n                                                                                                                       // 52\n    $tip.removeClass('fade top bottom left right in')                                                                  // 53\n                                                                                                                       // 54\n    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do                                       // 55\n    // this manually by checking the contents.                                                                         // 56\n    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()                                        // 57\n  }                                                                                                                    // 58\n                                                                                                                       // 59\n  Popover.prototype.hasContent = function () {                                                                         // 60\n    return this.getTitle() || this.getContent()                                                                        // 61\n  }                                                                                                                    // 62\n                                                                                                                       // 63\n  Popover.prototype.getContent = function () {                                                                         // 64\n    var $e = this.$element                                                                                             // 65\n    var o  = this.options                                                                                              // 66\n                                                                                                                       // 67\n    return $e.attr('data-content')                                                                                     // 68\n      || (typeof o.content == 'function' ?                                                                             // 69\n            o.content.call($e[0]) :                                                                                    // 70\n            o.content)                                                                                                 // 71\n  }                                                                                                                    // 72\n                                                                                                                       // 73\n  Popover.prototype.arrow = function () {                                                                              // 74\n    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))                                                    // 75\n  }                                                                                                                    // 76\n                                                                                                                       // 77\n                                                                                                                       // 78\n  // POPOVER PLUGIN DEFINITION                                                                                         // 79\n  // =========================                                                                                         // 80\n                                                                                                                       // 81\n  function Plugin(option) {                                                                                            // 82\n    return this.each(function () {                                                                                     // 83\n      var $this   = $(this)                                                                                            // 84\n      var data    = $this.data('bs.popover')                                                                           // 85\n      var options = typeof option == 'object' && option                                                                // 86\n                                                                                                                       // 87\n      if (!data && /destroy|hide/.test(option)) return                                                                 // 88\n      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))                                         // 89\n      if (typeof option == 'string') data[option]()                                                                    // 90\n    })                                                                                                                 // 91\n  }                                                                                                                    // 92\n                                                                                                                       // 93\n  var old = $.fn.popover                                                                                               // 94\n                                                                                                                       // 95\n  $.fn.popover             = Plugin                                                                                    // 96\n  $.fn.popover.Constructor = Popover                                                                                   // 97\n                                                                                                                       // 98\n                                                                                                                       // 99\n  // POPOVER NO CONFLICT                                                                                               // 100\n  // ===================                                                                                               // 101\n                                                                                                                       // 102\n  $.fn.popover.noConflict = function () {                                                                              // 103\n    $.fn.popover = old                                                                                                 // 104\n    return this                                                                                                        // 105\n  }                                                                                                                    // 106\n                                                                                                                       // 107\n}(jQuery);                                                                                                             // 108\n                                                                                                                       // 109\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/nemo64_bootstrap/bootstrap/js/carousel.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* ========================================================================                                            // 1\n * Bootstrap: carousel.js v3.3.5                                                                                       // 2\n * http://getbootstrap.com/javascript/#carousel                                                                        // 3\n * ========================================================================                                            // 4\n * Copyright 2011-2015 Twitter, Inc.                                                                                   // 5\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)                                          // 6\n * ======================================================================== */                                         // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n+function ($) {                                                                                                        // 10\n  'use strict';                                                                                                        // 11\n                                                                                                                       // 12\n  // CAROUSEL CLASS DEFINITION                                                                                         // 13\n  // =========================                                                                                         // 14\n                                                                                                                       // 15\n  var Carousel = function (element, options) {                                                                         // 16\n    this.$element    = $(element)                                                                                      // 17\n    this.$indicators = this.$element.find('.carousel-indicators')                                                      // 18\n    this.options     = options                                                                                         // 19\n    this.paused      = null                                                                                            // 20\n    this.sliding     = null                                                                                            // 21\n    this.interval    = null                                                                                            // 22\n    this.$active     = null                                                                                            // 23\n    this.$items      = null                                                                                            // 24\n                                                                                                                       // 25\n    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))                      // 26\n                                                                                                                       // 27\n    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element                    // 28\n      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))                                                         // 29\n      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))                                                         // 30\n  }                                                                                                                    // 31\n                                                                                                                       // 32\n  Carousel.VERSION  = '3.3.5'                                                                                          // 33\n                                                                                                                       // 34\n  Carousel.TRANSITION_DURATION = 600                                                                                   // 35\n                                                                                                                       // 36\n  Carousel.DEFAULTS = {                                                                                                // 37\n    interval: 5000,                                                                                                    // 38\n    pause: 'hover',                                                                                                    // 39\n    wrap: true,                                                                                                        // 40\n    keyboard: true                                                                                                     // 41\n  }                                                                                                                    // 42\n                                                                                                                       // 43\n  Carousel.prototype.keydown = function (e) {                                                                          // 44\n    if (/input|textarea/i.test(e.target.tagName)) return                                                               // 45\n    switch (e.which) {                                                                                                 // 46\n      case 37: this.prev(); break                                                                                      // 47\n      case 39: this.next(); break                                                                                      // 48\n      default: return                                                                                                  // 49\n    }                                                                                                                  // 50\n                                                                                                                       // 51\n    e.preventDefault()                                                                                                 // 52\n  }                                                                                                                    // 53\n                                                                                                                       // 54\n  Carousel.prototype.cycle = function (e) {                                                                            // 55\n    e || (this.paused = false)                                                                                         // 56\n                                                                                                                       // 57\n    this.interval && clearInterval(this.interval)                                                                      // 58\n                                                                                                                       // 59\n    this.options.interval                                                                                              // 60\n      && !this.paused                                                                                                  // 61\n      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))                                // 62\n                                                                                                                       // 63\n    return this                                                                                                        // 64\n  }                                                                                                                    // 65\n                                                                                                                       // 66\n  Carousel.prototype.getItemIndex = function (item) {                                                                  // 67\n    this.$items = item.parent().children('.item')                                                                      // 68\n    return this.$items.index(item || this.$active)                                                                     // 69\n  }                                                                                                                    // 70\n                                                                                                                       // 71\n  Carousel.prototype.getItemForDirection = function (direction, active) {                                              // 72\n    var activeIndex = this.getItemIndex(active)                                                                        // 73\n    var willWrap = (direction == 'prev' && activeIndex === 0)                                                          // 74\n                || (direction == 'next' && activeIndex == (this.$items.length - 1))                                    // 75\n    if (willWrap && !this.options.wrap) return active                                                                  // 76\n    var delta = direction == 'prev' ? -1 : 1                                                                           // 77\n    var itemIndex = (activeIndex + delta) % this.$items.length                                                         // 78\n    return this.$items.eq(itemIndex)                                                                                   // 79\n  }                                                                                                                    // 80\n                                                                                                                       // 81\n  Carousel.prototype.to = function (pos) {                                                                             // 82\n    var that        = this                                                                                             // 83\n    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))                             // 84\n                                                                                                                       // 85\n    if (pos > (this.$items.length - 1) || pos < 0) return                                                              // 86\n                                                                                                                       // 87\n    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, \"slid\"  // 88\n    if (activeIndex == pos) return this.pause().cycle()                                                                // 89\n                                                                                                                       // 90\n    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))                                        // 91\n  }                                                                                                                    // 92\n                                                                                                                       // 93\n  Carousel.prototype.pause = function (e) {                                                                            // 94\n    e || (this.paused = true)                                                                                          // 95\n                                                                                                                       // 96\n    if (this.$element.find('.next, .prev').length && $.support.transition) {                                           // 97\n      this.$element.trigger($.support.transition.end)                                                                  // 98\n      this.cycle(true)                                                                                                 // 99\n    }                                                                                                                  // 100\n                                                                                                                       // 101\n    this.interval = clearInterval(this.interval)                                                                       // 102\n                                                                                                                       // 103\n    return this                                                                                                        // 104\n  }                                                                                                                    // 105\n                                                                                                                       // 106\n  Carousel.prototype.next = function () {                                                                              // 107\n    if (this.sliding) return                                                                                           // 108\n    return this.slide('next')                                                                                          // 109\n  }                                                                                                                    // 110\n                                                                                                                       // 111\n  Carousel.prototype.prev = function () {                                                                              // 112\n    if (this.sliding) return                                                                                           // 113\n    return this.slide('prev')                                                                                          // 114\n  }                                                                                                                    // 115\n                                                                                                                       // 116\n  Carousel.prototype.slide = function (type, next) {                                                                   // 117\n    var $active   = this.$element.find('.item.active')                                                                 // 118\n    var $next     = next || this.getItemForDirection(type, $active)                                                    // 119\n    var isCycling = this.interval                                                                                      // 120\n    var direction = type == 'next' ? 'left' : 'right'                                                                  // 121\n    var that      = this                                                                                               // 122\n                                                                                                                       // 123\n    if ($next.hasClass('active')) return (this.sliding = false)                                                        // 124\n                                                                                                                       // 125\n    var relatedTarget = $next[0]                                                                                       // 126\n    var slideEvent = $.Event('slide.bs.carousel', {                                                                    // 127\n      relatedTarget: relatedTarget,                                                                                    // 128\n      direction: direction                                                                                             // 129\n    })                                                                                                                 // 130\n    this.$element.trigger(slideEvent)                                                                                  // 131\n    if (slideEvent.isDefaultPrevented()) return                                                                        // 132\n                                                                                                                       // 133\n    this.sliding = true                                                                                                // 134\n                                                                                                                       // 135\n    isCycling && this.pause()                                                                                          // 136\n                                                                                                                       // 137\n    if (this.$indicators.length) {                                                                                     // 138\n      this.$indicators.find('.active').removeClass('active')                                                           // 139\n      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])                                    // 140\n      $nextIndicator && $nextIndicator.addClass('active')                                                              // 141\n    }                                                                                                                  // 142\n                                                                                                                       // 143\n    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, \"slid\"\n    if ($.support.transition && this.$element.hasClass('slide')) {                                                     // 145\n      $next.addClass(type)                                                                                             // 146\n      $next[0].offsetWidth // force reflow                                                                             // 147\n      $active.addClass(direction)                                                                                      // 148\n      $next.addClass(direction)                                                                                        // 149\n      $active                                                                                                          // 150\n        .one('bsTransitionEnd', function () {                                                                          // 151\n          $next.removeClass([type, direction].join(' ')).addClass('active')                                            // 152\n          $active.removeClass(['active', direction].join(' '))                                                         // 153\n          that.sliding = false                                                                                         // 154\n          setTimeout(function () {                                                                                     // 155\n            that.$element.trigger(slidEvent)                                                                           // 156\n          }, 0)                                                                                                        // 157\n        })                                                                                                             // 158\n        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)                                                            // 159\n    } else {                                                                                                           // 160\n      $active.removeClass('active')                                                                                    // 161\n      $next.addClass('active')                                                                                         // 162\n      this.sliding = false                                                                                             // 163\n      this.$element.trigger(slidEvent)                                                                                 // 164\n    }                                                                                                                  // 165\n                                                                                                                       // 166\n    isCycling && this.cycle()                                                                                          // 167\n                                                                                                                       // 168\n    return this                                                                                                        // 169\n  }                                                                                                                    // 170\n                                                                                                                       // 171\n                                                                                                                       // 172\n  // CAROUSEL PLUGIN DEFINITION                                                                                        // 173\n  // ==========================                                                                                        // 174\n                                                                                                                       // 175\n  function Plugin(option) {                                                                                            // 176\n    return this.each(function () {                                                                                     // 177\n      var $this   = $(this)                                                                                            // 178\n      var data    = $this.data('bs.carousel')                                                                          // 179\n      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)                 // 180\n      var action  = typeof option == 'string' ? option : options.slide                                                 // 181\n                                                                                                                       // 182\n      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))                                       // 183\n      if (typeof option == 'number') data.to(option)                                                                   // 184\n      else if (action) data[action]()                                                                                  // 185\n      else if (options.interval) data.pause().cycle()                                                                  // 186\n    })                                                                                                                 // 187\n  }                                                                                                                    // 188\n                                                                                                                       // 189\n  var old = $.fn.carousel                                                                                              // 190\n                                                                                                                       // 191\n  $.fn.carousel             = Plugin                                                                                   // 192\n  $.fn.carousel.Constructor = Carousel                                                                                 // 193\n                                                                                                                       // 194\n                                                                                                                       // 195\n  // CAROUSEL NO CONFLICT                                                                                              // 196\n  // ====================                                                                                              // 197\n                                                                                                                       // 198\n  $.fn.carousel.noConflict = function () {                                                                             // 199\n    $.fn.carousel = old                                                                                                // 200\n    return this                                                                                                        // 201\n  }                                                                                                                    // 202\n                                                                                                                       // 203\n                                                                                                                       // 204\n  // CAROUSEL DATA-API                                                                                                 // 205\n  // =================                                                                                                 // 206\n                                                                                                                       // 207\n  var clickHandler = function (e) {                                                                                    // 208\n    var href                                                                                                           // 209\n    var $this   = $(this)                                                                                              // 210\n    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')) // strip for ie7\n    if (!$target.hasClass('carousel')) return                                                                          // 212\n    var options = $.extend({}, $target.data(), $this.data())                                                           // 213\n    var slideIndex = $this.attr('data-slide-to')                                                                       // 214\n    if (slideIndex) options.interval = false                                                                           // 215\n                                                                                                                       // 216\n    Plugin.call($target, options)                                                                                      // 217\n                                                                                                                       // 218\n    if (slideIndex) {                                                                                                  // 219\n      $target.data('bs.carousel').to(slideIndex)                                                                       // 220\n    }                                                                                                                  // 221\n                                                                                                                       // 222\n    e.preventDefault()                                                                                                 // 223\n  }                                                                                                                    // 224\n                                                                                                                       // 225\n  $(document)                                                                                                          // 226\n    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)                                                    // 227\n    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)                                                 // 228\n                                                                                                                       // 229\n  $(window).on('load', function () {                                                                                   // 230\n    $('[data-ride=\"carousel\"]').each(function () {                                                                     // 231\n      var $carousel = $(this)                                                                                          // 232\n      Plugin.call($carousel, $carousel.data())                                                                         // 233\n    })                                                                                                                 // 234\n  })                                                                                                                   // 235\n                                                                                                                       // 236\n}(jQuery);                                                                                                             // 237\n                                                                                                                       // 238\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/nemo64_bootstrap/bootstrap/js/affix.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* ========================================================================                                            // 1\n * Bootstrap: affix.js v3.3.5                                                                                          // 2\n * http://getbootstrap.com/javascript/#affix                                                                           // 3\n * ========================================================================                                            // 4\n * Copyright 2011-2015 Twitter, Inc.                                                                                   // 5\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)                                          // 6\n * ======================================================================== */                                         // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n+function ($) {                                                                                                        // 10\n  'use strict';                                                                                                        // 11\n                                                                                                                       // 12\n  // AFFIX CLASS DEFINITION                                                                                            // 13\n  // ======================                                                                                            // 14\n                                                                                                                       // 15\n  var Affix = function (element, options) {                                                                            // 16\n    this.options = $.extend({}, Affix.DEFAULTS, options)                                                               // 17\n                                                                                                                       // 18\n    this.$target = $(this.options.target)                                                                              // 19\n      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))                                               // 20\n      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))                                  // 21\n                                                                                                                       // 22\n    this.$element     = $(element)                                                                                     // 23\n    this.affixed      = null                                                                                           // 24\n    this.unpin        = null                                                                                           // 25\n    this.pinnedOffset = null                                                                                           // 26\n                                                                                                                       // 27\n    this.checkPosition()                                                                                               // 28\n  }                                                                                                                    // 29\n                                                                                                                       // 30\n  Affix.VERSION  = '3.3.5'                                                                                             // 31\n                                                                                                                       // 32\n  Affix.RESET    = 'affix affix-top affix-bottom'                                                                      // 33\n                                                                                                                       // 34\n  Affix.DEFAULTS = {                                                                                                   // 35\n    offset: 0,                                                                                                         // 36\n    target: window                                                                                                     // 37\n  }                                                                                                                    // 38\n                                                                                                                       // 39\n  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {                                // 40\n    var scrollTop    = this.$target.scrollTop()                                                                        // 41\n    var position     = this.$element.offset()                                                                          // 42\n    var targetHeight = this.$target.height()                                                                           // 43\n                                                                                                                       // 44\n    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false                       // 45\n                                                                                                                       // 46\n    if (this.affixed == 'bottom') {                                                                                    // 47\n      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'                        // 48\n      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'                              // 49\n    }                                                                                                                  // 50\n                                                                                                                       // 51\n    var initializing   = this.affixed == null                                                                          // 52\n    var colliderTop    = initializing ? scrollTop : position.top                                                       // 53\n    var colliderHeight = initializing ? targetHeight : height                                                          // 54\n                                                                                                                       // 55\n    if (offsetTop != null && scrollTop <= offsetTop) return 'top'                                                      // 56\n    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'         // 57\n                                                                                                                       // 58\n    return false                                                                                                       // 59\n  }                                                                                                                    // 60\n                                                                                                                       // 61\n  Affix.prototype.getPinnedOffset = function () {                                                                      // 62\n    if (this.pinnedOffset) return this.pinnedOffset                                                                    // 63\n    this.$element.removeClass(Affix.RESET).addClass('affix')                                                           // 64\n    var scrollTop = this.$target.scrollTop()                                                                           // 65\n    var position  = this.$element.offset()                                                                             // 66\n    return (this.pinnedOffset = position.top - scrollTop)                                                              // 67\n  }                                                                                                                    // 68\n                                                                                                                       // 69\n  Affix.prototype.checkPositionWithEventLoop = function () {                                                           // 70\n    setTimeout($.proxy(this.checkPosition, this), 1)                                                                   // 71\n  }                                                                                                                    // 72\n                                                                                                                       // 73\n  Affix.prototype.checkPosition = function () {                                                                        // 74\n    if (!this.$element.is(':visible')) return                                                                          // 75\n                                                                                                                       // 76\n    var height       = this.$element.height()                                                                          // 77\n    var offset       = this.options.offset                                                                             // 78\n    var offsetTop    = offset.top                                                                                      // 79\n    var offsetBottom = offset.bottom                                                                                   // 80\n    var scrollHeight = Math.max($(document).height(), $(document.body).height())                                       // 81\n                                                                                                                       // 82\n    if (typeof offset != 'object')         offsetBottom = offsetTop = offset                                           // 83\n    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)                                    // 84\n    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)                                 // 85\n                                                                                                                       // 86\n    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)                                           // 87\n                                                                                                                       // 88\n    if (this.affixed != affix) {                                                                                       // 89\n      if (this.unpin != null) this.$element.css('top', '')                                                             // 90\n                                                                                                                       // 91\n      var affixType = 'affix' + (affix ? '-' + affix : '')                                                             // 92\n      var e         = $.Event(affixType + '.bs.affix')                                                                 // 93\n                                                                                                                       // 94\n      this.$element.trigger(e)                                                                                         // 95\n                                                                                                                       // 96\n      if (e.isDefaultPrevented()) return                                                                               // 97\n                                                                                                                       // 98\n      this.affixed = affix                                                                                             // 99\n      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null                                                   // 100\n                                                                                                                       // 101\n      this.$element                                                                                                    // 102\n        .removeClass(Affix.RESET)                                                                                      // 103\n        .addClass(affixType)                                                                                           // 104\n        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')                                                  // 105\n    }                                                                                                                  // 106\n                                                                                                                       // 107\n    if (affix == 'bottom') {                                                                                           // 108\n      this.$element.offset({                                                                                           // 109\n        top: scrollHeight - height - offsetBottom                                                                      // 110\n      })                                                                                                               // 111\n    }                                                                                                                  // 112\n  }                                                                                                                    // 113\n                                                                                                                       // 114\n                                                                                                                       // 115\n  // AFFIX PLUGIN DEFINITION                                                                                           // 116\n  // =======================                                                                                           // 117\n                                                                                                                       // 118\n  function Plugin(option) {                                                                                            // 119\n    return this.each(function () {                                                                                     // 120\n      var $this   = $(this)                                                                                            // 121\n      var data    = $this.data('bs.affix')                                                                             // 122\n      var options = typeof option == 'object' && option                                                                // 123\n                                                                                                                       // 124\n      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))                                             // 125\n      if (typeof option == 'string') data[option]()                                                                    // 126\n    })                                                                                                                 // 127\n  }                                                                                                                    // 128\n                                                                                                                       // 129\n  var old = $.fn.affix                                                                                                 // 130\n                                                                                                                       // 131\n  $.fn.affix             = Plugin                                                                                      // 132\n  $.fn.affix.Constructor = Affix                                                                                       // 133\n                                                                                                                       // 134\n                                                                                                                       // 135\n  // AFFIX NO CONFLICT                                                                                                 // 136\n  // =================                                                                                                 // 137\n                                                                                                                       // 138\n  $.fn.affix.noConflict = function () {                                                                                // 139\n    $.fn.affix = old                                                                                                   // 140\n    return this                                                                                                        // 141\n  }                                                                                                                    // 142\n                                                                                                                       // 143\n                                                                                                                       // 144\n  // AFFIX DATA-API                                                                                                    // 145\n  // ==============                                                                                                    // 146\n                                                                                                                       // 147\n  $(window).on('load', function () {                                                                                   // 148\n    $('[data-spy=\"affix\"]').each(function () {                                                                         // 149\n      var $spy = $(this)                                                                                               // 150\n      var data = $spy.data()                                                                                           // 151\n                                                                                                                       // 152\n      data.offset = data.offset || {}                                                                                  // 153\n                                                                                                                       // 154\n      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom                                            // 155\n      if (data.offsetTop    != null) data.offset.top    = data.offsetTop                                               // 156\n                                                                                                                       // 157\n      Plugin.call($spy, data)                                                                                          // 158\n    })                                                                                                                 // 159\n  })                                                                                                                   // 160\n                                                                                                                       // 161\n}(jQuery);                                                                                                             // 162\n                                                                                                                       // 163\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/nemo64_bootstrap/bootstrap/js/alert.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* ========================================================================                                            // 1\n * Bootstrap: alert.js v3.3.5                                                                                          // 2\n * http://getbootstrap.com/javascript/#alerts                                                                          // 3\n * ========================================================================                                            // 4\n * Copyright 2011-2015 Twitter, Inc.                                                                                   // 5\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)                                          // 6\n * ======================================================================== */                                         // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n+function ($) {                                                                                                        // 10\n  'use strict';                                                                                                        // 11\n                                                                                                                       // 12\n  // ALERT CLASS DEFINITION                                                                                            // 13\n  // ======================                                                                                            // 14\n                                                                                                                       // 15\n  var dismiss = '[data-dismiss=\"alert\"]'                                                                               // 16\n  var Alert   = function (el) {                                                                                        // 17\n    $(el).on('click', dismiss, this.close)                                                                             // 18\n  }                                                                                                                    // 19\n                                                                                                                       // 20\n  Alert.VERSION = '3.3.5'                                                                                              // 21\n                                                                                                                       // 22\n  Alert.TRANSITION_DURATION = 150                                                                                      // 23\n                                                                                                                       // 24\n  Alert.prototype.close = function (e) {                                                                               // 25\n    var $this    = $(this)                                                                                             // 26\n    var selector = $this.attr('data-target')                                                                           // 27\n                                                                                                                       // 28\n    if (!selector) {                                                                                                   // 29\n      selector = $this.attr('href')                                                                                    // 30\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7                                   // 31\n    }                                                                                                                  // 32\n                                                                                                                       // 33\n    var $parent = $(selector)                                                                                          // 34\n                                                                                                                       // 35\n    if (e) e.preventDefault()                                                                                          // 36\n                                                                                                                       // 37\n    if (!$parent.length) {                                                                                             // 38\n      $parent = $this.closest('.alert')                                                                                // 39\n    }                                                                                                                  // 40\n                                                                                                                       // 41\n    $parent.trigger(e = $.Event('close.bs.alert'))                                                                     // 42\n                                                                                                                       // 43\n    if (e.isDefaultPrevented()) return                                                                                 // 44\n                                                                                                                       // 45\n    $parent.removeClass('in')                                                                                          // 46\n                                                                                                                       // 47\n    function removeElement() {                                                                                         // 48\n      // detach from parent, fire event then clean up data                                                             // 49\n      $parent.detach().trigger('closed.bs.alert').remove()                                                             // 50\n    }                                                                                                                  // 51\n                                                                                                                       // 52\n    $.support.transition && $parent.hasClass('fade') ?                                                                 // 53\n      $parent                                                                                                          // 54\n        .one('bsTransitionEnd', removeElement)                                                                         // 55\n        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :                                                             // 56\n      removeElement()                                                                                                  // 57\n  }                                                                                                                    // 58\n                                                                                                                       // 59\n                                                                                                                       // 60\n  // ALERT PLUGIN DEFINITION                                                                                           // 61\n  // =======================                                                                                           // 62\n                                                                                                                       // 63\n  function Plugin(option) {                                                                                            // 64\n    return this.each(function () {                                                                                     // 65\n      var $this = $(this)                                                                                              // 66\n      var data  = $this.data('bs.alert')                                                                               // 67\n                                                                                                                       // 68\n      if (!data) $this.data('bs.alert', (data = new Alert(this)))                                                      // 69\n      if (typeof option == 'string') data[option].call($this)                                                          // 70\n    })                                                                                                                 // 71\n  }                                                                                                                    // 72\n                                                                                                                       // 73\n  var old = $.fn.alert                                                                                                 // 74\n                                                                                                                       // 75\n  $.fn.alert             = Plugin                                                                                      // 76\n  $.fn.alert.Constructor = Alert                                                                                       // 77\n                                                                                                                       // 78\n                                                                                                                       // 79\n  // ALERT NO CONFLICT                                                                                                 // 80\n  // =================                                                                                                 // 81\n                                                                                                                       // 82\n  $.fn.alert.noConflict = function () {                                                                                // 83\n    $.fn.alert = old                                                                                                   // 84\n    return this                                                                                                        // 85\n  }                                                                                                                    // 86\n                                                                                                                       // 87\n                                                                                                                       // 88\n  // ALERT DATA-API                                                                                                    // 89\n  // ==============                                                                                                    // 90\n                                                                                                                       // 91\n  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)                                            // 92\n                                                                                                                       // 93\n}(jQuery);                                                                                                             // 94\n                                                                                                                       // 95\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/nemo64_bootstrap/bootstrap/js/button.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* ========================================================================                                            // 1\n * Bootstrap: button.js v3.3.5                                                                                         // 2\n * http://getbootstrap.com/javascript/#buttons                                                                         // 3\n * ========================================================================                                            // 4\n * Copyright 2011-2015 Twitter, Inc.                                                                                   // 5\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)                                          // 6\n * ======================================================================== */                                         // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n+function ($) {                                                                                                        // 10\n  'use strict';                                                                                                        // 11\n                                                                                                                       // 12\n  // BUTTON PUBLIC CLASS DEFINITION                                                                                    // 13\n  // ==============================                                                                                    // 14\n                                                                                                                       // 15\n  var Button = function (element, options) {                                                                           // 16\n    this.$element  = $(element)                                                                                        // 17\n    this.options   = $.extend({}, Button.DEFAULTS, options)                                                            // 18\n    this.isLoading = false                                                                                             // 19\n  }                                                                                                                    // 20\n                                                                                                                       // 21\n  Button.VERSION  = '3.3.5'                                                                                            // 22\n                                                                                                                       // 23\n  Button.DEFAULTS = {                                                                                                  // 24\n    loadingText: 'loading...'                                                                                          // 25\n  }                                                                                                                    // 26\n                                                                                                                       // 27\n  Button.prototype.setState = function (state) {                                                                       // 28\n    var d    = 'disabled'                                                                                              // 29\n    var $el  = this.$element                                                                                           // 30\n    var val  = $el.is('input') ? 'val' : 'html'                                                                        // 31\n    var data = $el.data()                                                                                              // 32\n                                                                                                                       // 33\n    state += 'Text'                                                                                                    // 34\n                                                                                                                       // 35\n    if (data.resetText == null) $el.data('resetText', $el[val]())                                                      // 36\n                                                                                                                       // 37\n    // push to event loop to allow forms to submit                                                                     // 38\n    setTimeout($.proxy(function () {                                                                                   // 39\n      $el[val](data[state] == null ? this.options[state] : data[state])                                                // 40\n                                                                                                                       // 41\n      if (state == 'loadingText') {                                                                                    // 42\n        this.isLoading = true                                                                                          // 43\n        $el.addClass(d).attr(d, d)                                                                                     // 44\n      } else if (this.isLoading) {                                                                                     // 45\n        this.isLoading = false                                                                                         // 46\n        $el.removeClass(d).removeAttr(d)                                                                               // 47\n      }                                                                                                                // 48\n    }, this), 0)                                                                                                       // 49\n  }                                                                                                                    // 50\n                                                                                                                       // 51\n  Button.prototype.toggle = function () {                                                                              // 52\n    var changed = true                                                                                                 // 53\n    var $parent = this.$element.closest('[data-toggle=\"buttons\"]')                                                     // 54\n                                                                                                                       // 55\n    if ($parent.length) {                                                                                              // 56\n      var $input = this.$element.find('input')                                                                         // 57\n      if ($input.prop('type') == 'radio') {                                                                            // 58\n        if ($input.prop('checked')) changed = false                                                                    // 59\n        $parent.find('.active').removeClass('active')                                                                  // 60\n        this.$element.addClass('active')                                                                               // 61\n      } else if ($input.prop('type') == 'checkbox') {                                                                  // 62\n        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false                             // 63\n        this.$element.toggleClass('active')                                                                            // 64\n      }                                                                                                                // 65\n      $input.prop('checked', this.$element.hasClass('active'))                                                         // 66\n      if (changed) $input.trigger('change')                                                                            // 67\n    } else {                                                                                                           // 68\n      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))                                            // 69\n      this.$element.toggleClass('active')                                                                              // 70\n    }                                                                                                                  // 71\n  }                                                                                                                    // 72\n                                                                                                                       // 73\n                                                                                                                       // 74\n  // BUTTON PLUGIN DEFINITION                                                                                          // 75\n  // ========================                                                                                          // 76\n                                                                                                                       // 77\n  function Plugin(option) {                                                                                            // 78\n    return this.each(function () {                                                                                     // 79\n      var $this   = $(this)                                                                                            // 80\n      var data    = $this.data('bs.button')                                                                            // 81\n      var options = typeof option == 'object' && option                                                                // 82\n                                                                                                                       // 83\n      if (!data) $this.data('bs.button', (data = new Button(this, options)))                                           // 84\n                                                                                                                       // 85\n      if (option == 'toggle') data.toggle()                                                                            // 86\n      else if (option) data.setState(option)                                                                           // 87\n    })                                                                                                                 // 88\n  }                                                                                                                    // 89\n                                                                                                                       // 90\n  var old = $.fn.button                                                                                                // 91\n                                                                                                                       // 92\n  $.fn.button             = Plugin                                                                                     // 93\n  $.fn.button.Constructor = Button                                                                                     // 94\n                                                                                                                       // 95\n                                                                                                                       // 96\n  // BUTTON NO CONFLICT                                                                                                // 97\n  // ==================                                                                                                // 98\n                                                                                                                       // 99\n  $.fn.button.noConflict = function () {                                                                               // 100\n    $.fn.button = old                                                                                                  // 101\n    return this                                                                                                        // 102\n  }                                                                                                                    // 103\n                                                                                                                       // 104\n                                                                                                                       // 105\n  // BUTTON DATA-API                                                                                                   // 106\n  // ===============                                                                                                   // 107\n                                                                                                                       // 108\n  $(document)                                                                                                          // 109\n    .on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {                                          // 110\n      var $btn = $(e.target)                                                                                           // 111\n      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')                                                           // 112\n      Plugin.call($btn, 'toggle')                                                                                      // 113\n      if (!($(e.target).is('input[type=\"radio\"]') || $(e.target).is('input[type=\"checkbox\"]'))) e.preventDefault()     // 114\n    })                                                                                                                 // 115\n    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {                  // 116\n      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))                                    // 117\n    })                                                                                                                 // 118\n                                                                                                                       // 119\n}(jQuery);                                                                                                             // 120\n                                                                                                                       // 121\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/nemo64_bootstrap/bootstrap/js/scrollspy.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* ========================================================================                                            // 1\n * Bootstrap: scrollspy.js v3.3.5                                                                                      // 2\n * http://getbootstrap.com/javascript/#scrollspy                                                                       // 3\n * ========================================================================                                            // 4\n * Copyright 2011-2015 Twitter, Inc.                                                                                   // 5\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)                                          // 6\n * ======================================================================== */                                         // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n+function ($) {                                                                                                        // 10\n  'use strict';                                                                                                        // 11\n                                                                                                                       // 12\n  // SCROLLSPY CLASS DEFINITION                                                                                        // 13\n  // ==========================                                                                                        // 14\n                                                                                                                       // 15\n  function ScrollSpy(element, options) {                                                                               // 16\n    this.$body          = $(document.body)                                                                             // 17\n    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)                                        // 18\n    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)                                                    // 19\n    this.selector       = (this.options.target || '') + ' .nav li > a'                                                 // 20\n    this.offsets        = []                                                                                           // 21\n    this.targets        = []                                                                                           // 22\n    this.activeTarget   = null                                                                                         // 23\n    this.scrollHeight   = 0                                                                                            // 24\n                                                                                                                       // 25\n    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))                                         // 26\n    this.refresh()                                                                                                     // 27\n    this.process()                                                                                                     // 28\n  }                                                                                                                    // 29\n                                                                                                                       // 30\n  ScrollSpy.VERSION  = '3.3.5'                                                                                         // 31\n                                                                                                                       // 32\n  ScrollSpy.DEFAULTS = {                                                                                               // 33\n    offset: 10                                                                                                         // 34\n  }                                                                                                                    // 35\n                                                                                                                       // 36\n  ScrollSpy.prototype.getScrollHeight = function () {                                                                  // 37\n    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n  }                                                                                                                    // 39\n                                                                                                                       // 40\n  ScrollSpy.prototype.refresh = function () {                                                                          // 41\n    var that          = this                                                                                           // 42\n    var offsetMethod  = 'offset'                                                                                       // 43\n    var offsetBase    = 0                                                                                              // 44\n                                                                                                                       // 45\n    this.offsets      = []                                                                                             // 46\n    this.targets      = []                                                                                             // 47\n    this.scrollHeight = this.getScrollHeight()                                                                         // 48\n                                                                                                                       // 49\n    if (!$.isWindow(this.$scrollElement[0])) {                                                                         // 50\n      offsetMethod = 'position'                                                                                        // 51\n      offsetBase   = this.$scrollElement.scrollTop()                                                                   // 52\n    }                                                                                                                  // 53\n                                                                                                                       // 54\n    this.$body                                                                                                         // 55\n      .find(this.selector)                                                                                             // 56\n      .map(function () {                                                                                               // 57\n        var $el   = $(this)                                                                                            // 58\n        var href  = $el.data('target') || $el.attr('href')                                                             // 59\n        var $href = /^#./.test(href) && $(href)                                                                        // 60\n                                                                                                                       // 61\n        return ($href                                                                                                  // 62\n          && $href.length                                                                                              // 63\n          && $href.is(':visible')                                                                                      // 64\n          && [[$href[offsetMethod]().top + offsetBase, href]]) || null                                                 // 65\n      })                                                                                                               // 66\n      .sort(function (a, b) { return a[0] - b[0] })                                                                    // 67\n      .each(function () {                                                                                              // 68\n        that.offsets.push(this[0])                                                                                     // 69\n        that.targets.push(this[1])                                                                                     // 70\n      })                                                                                                               // 71\n  }                                                                                                                    // 72\n                                                                                                                       // 73\n  ScrollSpy.prototype.process = function () {                                                                          // 74\n    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset                                           // 75\n    var scrollHeight = this.getScrollHeight()                                                                          // 76\n    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()                               // 77\n    var offsets      = this.offsets                                                                                    // 78\n    var targets      = this.targets                                                                                    // 79\n    var activeTarget = this.activeTarget                                                                               // 80\n    var i                                                                                                              // 81\n                                                                                                                       // 82\n    if (this.scrollHeight != scrollHeight) {                                                                           // 83\n      this.refresh()                                                                                                   // 84\n    }                                                                                                                  // 85\n                                                                                                                       // 86\n    if (scrollTop >= maxScroll) {                                                                                      // 87\n      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)                                     // 88\n    }                                                                                                                  // 89\n                                                                                                                       // 90\n    if (activeTarget && scrollTop < offsets[0]) {                                                                      // 91\n      this.activeTarget = null                                                                                         // 92\n      return this.clear()                                                                                              // 93\n    }                                                                                                                  // 94\n                                                                                                                       // 95\n    for (i = offsets.length; i--;) {                                                                                   // 96\n      activeTarget != targets[i]                                                                                       // 97\n        && scrollTop >= offsets[i]                                                                                     // 98\n        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])                                                // 99\n        && this.activate(targets[i])                                                                                   // 100\n    }                                                                                                                  // 101\n  }                                                                                                                    // 102\n                                                                                                                       // 103\n  ScrollSpy.prototype.activate = function (target) {                                                                   // 104\n    this.activeTarget = target                                                                                         // 105\n                                                                                                                       // 106\n    this.clear()                                                                                                       // 107\n                                                                                                                       // 108\n    var selector = this.selector +                                                                                     // 109\n      '[data-target=\"' + target + '\"],' +                                                                              // 110\n      this.selector + '[href=\"' + target + '\"]'                                                                        // 111\n                                                                                                                       // 112\n    var active = $(selector)                                                                                           // 113\n      .parents('li')                                                                                                   // 114\n      .addClass('active')                                                                                              // 115\n                                                                                                                       // 116\n    if (active.parent('.dropdown-menu').length) {                                                                      // 117\n      active = active                                                                                                  // 118\n        .closest('li.dropdown')                                                                                        // 119\n        .addClass('active')                                                                                            // 120\n    }                                                                                                                  // 121\n                                                                                                                       // 122\n    active.trigger('activate.bs.scrollspy')                                                                            // 123\n  }                                                                                                                    // 124\n                                                                                                                       // 125\n  ScrollSpy.prototype.clear = function () {                                                                            // 126\n    $(this.selector)                                                                                                   // 127\n      .parentsUntil(this.options.target, '.active')                                                                    // 128\n      .removeClass('active')                                                                                           // 129\n  }                                                                                                                    // 130\n                                                                                                                       // 131\n                                                                                                                       // 132\n  // SCROLLSPY PLUGIN DEFINITION                                                                                       // 133\n  // ===========================                                                                                       // 134\n                                                                                                                       // 135\n  function Plugin(option) {                                                                                            // 136\n    return this.each(function () {                                                                                     // 137\n      var $this   = $(this)                                                                                            // 138\n      var data    = $this.data('bs.scrollspy')                                                                         // 139\n      var options = typeof option == 'object' && option                                                                // 140\n                                                                                                                       // 141\n      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))                                     // 142\n      if (typeof option == 'string') data[option]()                                                                    // 143\n    })                                                                                                                 // 144\n  }                                                                                                                    // 145\n                                                                                                                       // 146\n  var old = $.fn.scrollspy                                                                                             // 147\n                                                                                                                       // 148\n  $.fn.scrollspy             = Plugin                                                                                  // 149\n  $.fn.scrollspy.Constructor = ScrollSpy                                                                               // 150\n                                                                                                                       // 151\n                                                                                                                       // 152\n  // SCROLLSPY NO CONFLICT                                                                                             // 153\n  // =====================                                                                                             // 154\n                                                                                                                       // 155\n  $.fn.scrollspy.noConflict = function () {                                                                            // 156\n    $.fn.scrollspy = old                                                                                               // 157\n    return this                                                                                                        // 158\n  }                                                                                                                    // 159\n                                                                                                                       // 160\n                                                                                                                       // 161\n  // SCROLLSPY DATA-API                                                                                                // 162\n  // ==================                                                                                                // 163\n                                                                                                                       // 164\n  $(window).on('load.bs.scrollspy.data-api', function () {                                                             // 165\n    $('[data-spy=\"scroll\"]').each(function () {                                                                        // 166\n      var $spy = $(this)                                                                                               // 167\n      Plugin.call($spy, $spy.data())                                                                                   // 168\n    })                                                                                                                 // 169\n  })                                                                                                                   // 170\n                                                                                                                       // 171\n}(jQuery);                                                                                                             // 172\n                                                                                                                       // 173\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/nemo64_bootstrap/bootstrap/js/tab.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* ========================================================================                                            // 1\n * Bootstrap: tab.js v3.3.5                                                                                            // 2\n * http://getbootstrap.com/javascript/#tabs                                                                            // 3\n * ========================================================================                                            // 4\n * Copyright 2011-2015 Twitter, Inc.                                                                                   // 5\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)                                          // 6\n * ======================================================================== */                                         // 7\n                                                                                                                       // 8\n                                                                                                                       // 9\n+function ($) {                                                                                                        // 10\n  'use strict';                                                                                                        // 11\n                                                                                                                       // 12\n  // TAB CLASS DEFINITION                                                                                              // 13\n  // ====================                                                                                              // 14\n                                                                                                                       // 15\n  var Tab = function (element) {                                                                                       // 16\n    // jscs:disable requireDollarBeforejQueryAssignment                                                                // 17\n    this.element = $(element)                                                                                          // 18\n    // jscs:enable requireDollarBeforejQueryAssignment                                                                 // 19\n  }                                                                                                                    // 20\n                                                                                                                       // 21\n  Tab.VERSION = '3.3.5'                                                                                                // 22\n                                                                                                                       // 23\n  Tab.TRANSITION_DURATION = 150                                                                                        // 24\n                                                                                                                       // 25\n  Tab.prototype.show = function () {                                                                                   // 26\n    var $this    = this.element                                                                                        // 27\n    var $ul      = $this.closest('ul:not(.dropdown-menu)')                                                             // 28\n    var selector = $this.data('target')                                                                                // 29\n                                                                                                                       // 30\n    if (!selector) {                                                                                                   // 31\n      selector = $this.attr('href')                                                                                    // 32\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7                                   // 33\n    }                                                                                                                  // 34\n                                                                                                                       // 35\n    if ($this.parent('li').hasClass('active')) return                                                                  // 36\n                                                                                                                       // 37\n    var $previous = $ul.find('.active:last a')                                                                         // 38\n    var hideEvent = $.Event('hide.bs.tab', {                                                                           // 39\n      relatedTarget: $this[0]                                                                                          // 40\n    })                                                                                                                 // 41\n    var showEvent = $.Event('show.bs.tab', {                                                                           // 42\n      relatedTarget: $previous[0]                                                                                      // 43\n    })                                                                                                                 // 44\n                                                                                                                       // 45\n    $previous.trigger(hideEvent)                                                                                       // 46\n    $this.trigger(showEvent)                                                                                           // 47\n                                                                                                                       // 48\n    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return                                       // 49\n                                                                                                                       // 50\n    var $target = $(selector)                                                                                          // 51\n                                                                                                                       // 52\n    this.activate($this.closest('li'), $ul)                                                                            // 53\n    this.activate($target, $target.parent(), function () {                                                             // 54\n      $previous.trigger({                                                                                              // 55\n        type: 'hidden.bs.tab',                                                                                         // 56\n        relatedTarget: $this[0]                                                                                        // 57\n      })                                                                                                               // 58\n      $this.trigger({                                                                                                  // 59\n        type: 'shown.bs.tab',                                                                                          // 60\n        relatedTarget: $previous[0]                                                                                    // 61\n      })                                                                                                               // 62\n    })                                                                                                                 // 63\n  }                                                                                                                    // 64\n                                                                                                                       // 65\n  Tab.prototype.activate = function (element, container, callback) {                                                   // 66\n    var $active    = container.find('> .active')                                                                       // 67\n    var transition = callback                                                                                          // 68\n      && $.support.transition                                                                                          // 69\n      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)                            // 70\n                                                                                                                       // 71\n    function next() {                                                                                                  // 72\n      $active                                                                                                          // 73\n        .removeClass('active')                                                                                         // 74\n        .find('> .dropdown-menu > .active')                                                                            // 75\n          .removeClass('active')                                                                                       // 76\n        .end()                                                                                                         // 77\n        .find('[data-toggle=\"tab\"]')                                                                                   // 78\n          .attr('aria-expanded', false)                                                                                // 79\n                                                                                                                       // 80\n      element                                                                                                          // 81\n        .addClass('active')                                                                                            // 82\n        .find('[data-toggle=\"tab\"]')                                                                                   // 83\n          .attr('aria-expanded', true)                                                                                 // 84\n                                                                                                                       // 85\n      if (transition) {                                                                                                // 86\n        element[0].offsetWidth // reflow for transition                                                                // 87\n        element.addClass('in')                                                                                         // 88\n      } else {                                                                                                         // 89\n        element.removeClass('fade')                                                                                    // 90\n      }                                                                                                                // 91\n                                                                                                                       // 92\n      if (element.parent('.dropdown-menu').length) {                                                                   // 93\n        element                                                                                                        // 94\n          .closest('li.dropdown')                                                                                      // 95\n            .addClass('active')                                                                                        // 96\n          .end()                                                                                                       // 97\n          .find('[data-toggle=\"tab\"]')                                                                                 // 98\n            .attr('aria-expanded', true)                                                                               // 99\n      }                                                                                                                // 100\n                                                                                                                       // 101\n      callback && callback()                                                                                           // 102\n    }                                                                                                                  // 103\n                                                                                                                       // 104\n    $active.length && transition ?                                                                                     // 105\n      $active                                                                                                          // 106\n        .one('bsTransitionEnd', next)                                                                                  // 107\n        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :                                                               // 108\n      next()                                                                                                           // 109\n                                                                                                                       // 110\n    $active.removeClass('in')                                                                                          // 111\n  }                                                                                                                    // 112\n                                                                                                                       // 113\n                                                                                                                       // 114\n  // TAB PLUGIN DEFINITION                                                                                             // 115\n  // =====================                                                                                             // 116\n                                                                                                                       // 117\n  function Plugin(option) {                                                                                            // 118\n    return this.each(function () {                                                                                     // 119\n      var $this = $(this)                                                                                              // 120\n      var data  = $this.data('bs.tab')                                                                                 // 121\n                                                                                                                       // 122\n      if (!data) $this.data('bs.tab', (data = new Tab(this)))                                                          // 123\n      if (typeof option == 'string') data[option]()                                                                    // 124\n    })                                                                                                                 // 125\n  }                                                                                                                    // 126\n                                                                                                                       // 127\n  var old = $.fn.tab                                                                                                   // 128\n                                                                                                                       // 129\n  $.fn.tab             = Plugin                                                                                        // 130\n  $.fn.tab.Constructor = Tab                                                                                           // 131\n                                                                                                                       // 132\n                                                                                                                       // 133\n  // TAB NO CONFLICT                                                                                                   // 134\n  // ===============                                                                                                   // 135\n                                                                                                                       // 136\n  $.fn.tab.noConflict = function () {                                                                                  // 137\n    $.fn.tab = old                                                                                                     // 138\n    return this                                                                                                        // 139\n  }                                                                                                                    // 140\n                                                                                                                       // 141\n                                                                                                                       // 142\n  // TAB DATA-API                                                                                                      // 143\n  // ============                                                                                                      // 144\n                                                                                                                       // 145\n  var clickHandler = function (e) {                                                                                    // 146\n    e.preventDefault()                                                                                                 // 147\n    Plugin.call($(this), 'show')                                                                                       // 148\n  }                                                                                                                    // 149\n                                                                                                                       // 150\n  $(document)                                                                                                          // 151\n    .on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler)                                                  // 152\n    .on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler)                                                 // 153\n                                                                                                                       // 154\n}(jQuery);                                                                                                             // 155\n                                                                                                                       // 156\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['nemo64:bootstrap'] = {};\n\n})();\n","servePath":"/packages/nemo64_bootstrap.js","sourceMap":{"version":3,"sources":["/packages/nemo64_bootstrap/bootstrap/js/transition.js","/packages/nemo64_bootstrap/bootstrap/js/collapse.js","/packages/nemo64_bootstrap/bootstrap/js/dropdown.js","/packages/nemo64_bootstrap/bootstrap/js/modal.js","/packages/nemo64_bootstrap/bootstrap/js/tooltip.js","/packages/nemo64_bootstrap/bootstrap/js/popover.js","/packages/nemo64_bootstrap/bootstrap/js/carousel.js","/packages/nemo64_bootstrap/bootstrap/js/affix.js","/packages/nemo64_bootstrap/bootstrap/js/alert.js","/packages/nemo64_bootstrap/bootstrap/js/button.js","/packages/nemo64_bootstrap/bootstrap/js/scrollspy.js","/packages/nemo64_bootstrap/bootstrap/js/tab.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;ACnrjlglKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;ACxfile":"/packages/nemo64_bootstrap.js","sourcesContent":["/* ========================================================================\n * Bootstrap: transition.js v3.3.5\n * http://getbootstrap.com/javascript/#transitions\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)\n  // ============================================================\n\n  function transitionEnd() {\n    var el = document.createElement('bootstrap')\n\n    var transEndEventNames = {\n      WebkitTransition : 'webkitTransitionEnd',\n      MozTransition    : 'transitionend',\n      OTransition      : 'oTransitionEnd otransitionend',\n      transition       : 'transitionend'\n    }\n\n    for (var name in transEndEventNames) {\n      if (el.style[name] !== undefined) {\n        return { end: transEndEventNames[name] }\n      }\n    }\n\n    return false // explicit for ie8 (  ._.)\n  }\n\n  // http://blog.alexmaccaw.com/css-transitions\n  $.fn.emulateTransitionEnd = function (duration) {\n    var called = false\n    var $el = this\n    $(this).one('bsTransitionEnd', function () { called = true })\n    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }\n    setTimeout(callback, duration)\n    return this\n  }\n\n  $(function () {\n    $.support.transition = transitionEnd()\n\n    if (!$.support.transition) return\n\n    $.event.special.bsTransitionEnd = {\n      bindType: $.support.transition.end,\n      delegateType: $.support.transition.end,\n      handle: function (e) {\n        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\n      }\n    }\n  })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: collapse.js v3.3.5\n * http://getbootstrap.com/javascript/#collapse\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // COLLAPSE PUBLIC CLASS DEFINITION\n  // ================================\n\n  var Collapse = function (element, options) {\n    this.$element      = $(element)\n    this.options       = $.extend({}, Collapse.DEFAULTS, options)\n    this.$trigger      = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' +\n                           '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')\n    this.transitioning = null\n\n    if (this.options.parent) {\n      this.$parent = this.getParent()\n    } else {\n      this.addAriaAndCollapsedClass(this.$element, this.$trigger)\n    }\n\n    if (this.options.toggle) this.toggle()\n  }\n\n  Collapse.VERSION  = '3.3.5'\n\n  Collapse.TRANSITION_DURATION = 350\n\n  Collapse.DEFAULTS = {\n    toggle: true\n  }\n\n  Collapse.prototype.dimension = function () {\n    var hasWidth = this.$element.hasClass('width')\n    return hasWidth ? 'width' : 'height'\n  }\n\n  Collapse.prototype.show = function () {\n    if (this.transitioning || this.$element.hasClass('in')) return\n\n    var activesData\n    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')\n\n    if (actives && actives.length) {\n      activesData = actives.data('bs.collapse')\n      if (activesData && activesData.transitioning) return\n    }\n\n    var startEvent = $.Event('show.bs.collapse')\n    this.$element.trigger(startEvent)\n    if (startEvent.isDefaultPrevented()) return\n\n    if (actives && actives.length) {\n      Plugin.call(actives, 'hide')\n      activesData || actives.data('bs.collapse', null)\n    }\n\n    var dimension = this.dimension()\n\n    this.$element\n      .removeClass('collapse')\n      .addClass('collapsing')[dimension](0)\n      .attr('aria-expanded', true)\n\n    this.$trigger\n      .removeClass('collapsed')\n      .attr('aria-expanded', true)\n\n    this.transitioning = 1\n\n    var complete = function () {\n      this.$element\n        .removeClass('collapsing')\n        .addClass('collapse in')[dimension]('')\n      this.transitioning = 0\n      this.$element\n        .trigger('shown.bs.collapse')\n    }\n\n    if (!$.support.transition) return complete.call(this)\n\n    var scrollSize = $.camelCase(['scroll', dimension].join('-'))\n\n    this.$element\n      .one('bsTransitionEnd', $.proxy(complete, this))\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])\n  }\n\n  Collapse.prototype.hide = function () {\n    if (this.transitioning || !this.$element.hasClass('in')) return\n\n    var startEvent = $.Event('hide.bs.collapse')\n    this.$element.trigger(startEvent)\n    if (startEvent.isDefaultPrevented()) return\n\n    var dimension = this.dimension()\n\n    this.$element[dimension](this.$element[dimension]())[0].offsetHeight\n\n    this.$element\n      .addClass('collapsing')\n      .removeClass('collapse in')\n      .attr('aria-expanded', false)\n\n    this.$trigger\n      .addClass('collapsed')\n      .attr('aria-expanded', false)\n\n    this.transitioning = 1\n\n    var complete = function () {\n      this.transitioning = 0\n      this.$element\n        .removeClass('collapsing')\n        .addClass('collapse')\n        .trigger('hidden.bs.collapse')\n    }\n\n    if (!$.support.transition) return complete.call(this)\n\n    this.$element\n      [dimension](0)\n      .one('bsTransitionEnd', $.proxy(complete, this))\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)\n  }\n\n  Collapse.prototype.toggle = function () {\n    this[this.$element.hasClass('in') ? 'hide' : 'show']()\n  }\n\n  Collapse.prototype.getParent = function () {\n    return $(this.options.parent)\n      .find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]')\n      .each($.proxy(function (i, element) {\n        var $element = $(element)\n        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)\n      }, this))\n      .end()\n  }\n\n  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\n    var isOpen = $element.hasClass('in')\n\n    $element.attr('aria-expanded', isOpen)\n    $trigger\n      .toggleClass('collapsed', !isOpen)\n      .attr('aria-expanded', isOpen)\n  }\n\n  function getTargetFromTrigger($trigger) {\n    var href\n    var target = $trigger.attr('data-target')\n      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\n\n    return $(target)\n  }\n\n\n  // COLLAPSE PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.collapse')\n      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false\n      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.collapse\n\n  $.fn.collapse             = Plugin\n  $.fn.collapse.Constructor = Collapse\n\n\n  // COLLAPSE NO CONFLICT\n  // ====================\n\n  $.fn.collapse.noConflict = function () {\n    $.fn.collapse = old\n    return this\n  }\n\n\n  // COLLAPSE DATA-API\n  // =================\n\n  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\n    var $this   = $(this)\n\n    if (!$this.attr('data-target')) e.preventDefault()\n\n    var $target = getTargetFromTrigger($this)\n    var data    = $target.data('bs.collapse')\n    var option  = data ? 'toggle' : $this.data()\n\n    Plugin.call($target, option)\n  })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: dropdown.js v3.3.5\n * http://getbootstrap.com/javascript/#dropdowns\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // DROPDOWN CLASS DEFINITION\n  // =========================\n\n  var backdrop = '.dropdown-backdrop'\n  var toggle   = '[data-toggle=\"dropdown\"]'\n  var Dropdown = function (element) {\n    $(element).on('click.bs.dropdown', this.toggle)\n  }\n\n  Dropdown.VERSION = '3.3.5'\n\n  function getParent($this) {\n    var selector = $this.attr('data-target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    var $parent = selector && $(selector)\n\n    return $parent && $parent.length ? $parent : $this.parent()\n  }\n\n  function clearMenus(e) {\n    if (e && e.which === 3) return\n    $(backdrop).remove()\n    $(toggle).each(function () {\n      var $this         = $(this)\n      var $parent       = getParent($this)\n      var relatedTarget = { relatedTarget: this }\n\n      if (!$parent.hasClass('open')) return\n\n      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return\n\n      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))\n\n      if (e.isDefaultPrevented()) return\n\n      $this.attr('aria-expanded', 'false')\n      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)\n    })\n  }\n\n  Dropdown.prototype.toggle = function (e) {\n    var $this = $(this)\n\n    if ($this.is('.disabled, :disabled')) return\n\n    var $parent  = getParent($this)\n    var isActive = $parent.hasClass('open')\n\n    clearMenus()\n\n    if (!isActive) {\n      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {\n        // if mobile we use a backdrop because click events don't delegate\n        $(document.createElement('div'))\n          .addClass('dropdown-backdrop')\n          .insertAfter($(this))\n          .on('click', clearMenus)\n      }\n\n      var relatedTarget = { relatedTarget: this }\n      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))\n\n      if (e.isDefaultPrevented()) return\n\n      $this\n        .trigger('focus')\n        .attr('aria-expanded', 'true')\n\n      $parent\n        .toggleClass('open')\n        .trigger('shown.bs.dropdown', relatedTarget)\n    }\n\n    return false\n  }\n\n  Dropdown.prototype.keydown = function (e) {\n    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return\n\n    var $this = $(this)\n\n    e.preventDefault()\n    e.stopPropagation()\n\n    if ($this.is('.disabled, :disabled')) return\n\n    var $parent  = getParent($this)\n    var isActive = $parent.hasClass('open')\n\n    if (!isActive && e.which != 27 || isActive && e.which == 27) {\n      if (e.which == 27) $parent.find(toggle).trigger('focus')\n      return $this.trigger('click')\n    }\n\n    var desc = ' li:not(.disabled):visible a'\n    var $items = $parent.find('.dropdown-menu' + desc)\n\n    if (!$items.length) return\n\n    var index = $items.index(e.target)\n\n    if (e.which == 38 && index > 0)                 index--         // up\n    if (e.which == 40 && index < $items.length - 1) index++         // down\n    if (!~index)                                    index = 0\n\n    $items.eq(index).trigger('focus')\n  }\n\n\n  // DROPDOWN PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.dropdown')\n\n      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  var old = $.fn.dropdown\n\n  $.fn.dropdown             = Plugin\n  $.fn.dropdown.Constructor = Dropdown\n\n\n  // DROPDOWN NO CONFLICT\n  // ====================\n\n  $.fn.dropdown.noConflict = function () {\n    $.fn.dropdown = old\n    return this\n  }\n\n\n  // APPLY TO STANDARD DROPDOWN ELEMENTS\n  // ===================================\n\n  $(document)\n    .on('click.bs.dropdown.data-api', clearMenus)\n    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })\n    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)\n    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)\n    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: modal.js v3.3.5\n * http://getbootstrap.com/javascript/#modals\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // MODAL CLASS DEFINITION\n  // ======================\n\n  var Modal = function (element, options) {\n    this.options             = options\n    this.$body               = $(document.body)\n    this.$element            = $(element)\n    this.$dialog             = this.$element.find('.modal-dialog')\n    this.$backdrop           = null\n    this.isShown             = null\n    this.originalBodyPad     = null\n    this.scrollbarWidth      = 0\n    this.ignoreBackdropClick = false\n\n    if (this.options.remote) {\n      this.$element\n        .find('.modal-content')\n        .load(this.options.remote, $.proxy(function () {\n          this.$element.trigger('loaded.bs.modal')\n        }, this))\n    }\n  }\n\n  Modal.VERSION  = '3.3.5'\n\n  Modal.TRANSITION_DURATION = 300\n  Modal.BACKDROP_TRANSITION_DURATION = 150\n\n  Modal.DEFAULTS = {\n    backdrop: true,\n    keyboard: true,\n    show: true\n  }\n\n  Modal.prototype.toggle = function (_relatedTarget) {\n    return this.isShown ? this.hide() : this.show(_relatedTarget)\n  }\n\n  Modal.prototype.show = function (_relatedTarget) {\n    var that = this\n    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })\n\n    this.$element.trigger(e)\n\n    if (this.isShown || e.isDefaultPrevented()) return\n\n    this.isShown = true\n\n    this.checkScrollbar()\n    this.setScrollbar()\n    this.$body.addClass('modal-open')\n\n    this.escape()\n    this.resize()\n\n    this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this))\n\n    this.$dialog.on('mousedown.dismiss.bs.modal', function () {\n      that.$element.one('mouseup.dismiss.bs.modal', function (e) {\n        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true\n      })\n    })\n\n    this.backdrop(function () {\n      var transition = $.support.transition && that.$element.hasClass('fade')\n\n      if (!that.$element.parent().length) {\n        that.$element.appendTo(that.$body) // don't move modals dom position\n      }\n\n      that.$element\n        .show()\n        .scrollTop(0)\n\n      that.adjustDialog()\n\n      if (transition) {\n        that.$element[0].offsetWidth // force reflow\n      }\n\n      that.$element.addClass('in')\n\n      that.enforceFocus()\n\n      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })\n\n      transition ?\n        that.$dialog // wait for modal to slide in\n          .one('bsTransitionEnd', function () {\n            that.$element.trigger('focus').trigger(e)\n          })\n          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\n        that.$element.trigger('focus').trigger(e)\n    })\n  }\n\n  Modal.prototype.hide = function (e) {\n    if (e) e.preventDefault()\n\n    e = $.Event('hide.bs.modal')\n\n    this.$element.trigger(e)\n\n    if (!this.isShown || e.isDefaultPrevented()) return\n\n    this.isShown = false\n\n    this.escape()\n    this.resize()\n\n    $(document).off('focusin.bs.modal')\n\n    this.$element\n      .removeClass('in')\n      .off('click.dismiss.bs.modal')\n      .off('mouseup.dismiss.bs.modal')\n\n    this.$dialog.off('mousedown.dismiss.bs.modal')\n\n    $.support.transition && this.$element.hasClass('fade') ?\n      this.$element\n        .one('bsTransitionEnd', $.proxy(this.hideModal, this))\n        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\n      this.hideModal()\n  }\n\n  Modal.prototype.enforceFocus = function () {\n    $(document)\n      .off('focusin.bs.modal') // guard against infinite focus loop\n      .on('focusin.bs.modal', $.proxy(function (e) {\n        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {\n          this.$element.trigger('focus')\n        }\n      }, this))\n  }\n\n  Modal.prototype.escape = function () {\n    if (this.isShown && this.options.keyboard) {\n      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {\n        e.which == 27 && this.hide()\n      }, this))\n    } else if (!this.isShown) {\n      this.$element.off('keydown.dismiss.bs.modal')\n    }\n  }\n\n  Modal.prototype.resize = function () {\n    if (this.isShown) {\n      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))\n    } else {\n      $(window).off('resize.bs.modal')\n    }\n  }\n\n  Modal.prototype.hideModal = function () {\n    var that = this\n    this.$element.hide()\n    this.backdrop(function () {\n      that.$body.removeClass('modal-open')\n      that.resetAdjustments()\n      that.resetScrollbar()\n      that.$element.trigger('hidden.bs.modal')\n    })\n  }\n\n  Modal.prototype.removeBackdrop = function () {\n    this.$backdrop && this.$backdrop.remove()\n    this.$backdrop = null\n  }\n\n  Modal.prototype.backdrop = function (callback) {\n    var that = this\n    var animate = this.$element.hasClass('fade') ? 'fade' : ''\n\n    if (this.isShown && this.options.backdrop) {\n      var doAnimate = $.support.transition && animate\n\n      this.$backdrop = $(document.createElement('div'))\n        .addClass('modal-backdrop ' + animate)\n        .appendTo(this.$body)\n\n      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {\n        if (this.ignoreBackdropClick) {\n          this.ignoreBackdropClick = false\n          return\n        }\n        if (e.target !== e.currentTarget) return\n        this.options.backdrop == 'static'\n          ? this.$element[0].focus()\n          : this.hide()\n      }, this))\n\n      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow\n\n      this.$backdrop.addClass('in')\n\n      if (!callback) return\n\n      doAnimate ?\n        this.$backdrop\n          .one('bsTransitionEnd', callback)\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\n        callback()\n\n    } else if (!this.isShown && this.$backdrop) {\n      this.$backdrop.removeClass('in')\n\n      var callbackRemove = function () {\n        that.removeBackdrop()\n        callback && callback()\n      }\n      $.support.transition && this.$element.hasClass('fade') ?\n        this.$backdrop\n          .one('bsTransitionEnd', callbackRemove)\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\n        callbackRemove()\n\n    } else if (callback) {\n      callback()\n    }\n  }\n\n  // these following methods are used to handle overflowing modals\n\n  Modal.prototype.handleUpdate = function () {\n    this.adjustDialog()\n  }\n\n  Modal.prototype.adjustDialog = function () {\n    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight\n\n    this.$element.css({\n      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',\n      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''\n    })\n  }\n\n  Modal.prototype.resetAdjustments = function () {\n    this.$element.css({\n      paddingLeft: '',\n      paddingRight: ''\n    })\n  }\n\n  Modal.prototype.checkScrollbar = function () {\n    var fullWindowWidth = window.innerWidth\n    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8\n      var documentElementRect = document.documentElement.getBoundingClientRect()\n      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)\n    }\n    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth\n    this.scrollbarWidth = this.measureScrollbar()\n  }\n\n  Modal.prototype.setScrollbar = function () {\n    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)\n    this.originalBodyPad = document.body.style.paddingRight || ''\n    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)\n  }\n\n  Modal.prototype.resetScrollbar = function () {\n    this.$body.css('padding-right', this.originalBodyPad)\n  }\n\n  Modal.prototype.measureScrollbar = function () { // thx walsh\n    var scrollDiv = document.createElement('div')\n    scrollDiv.className = 'modal-scrollbar-measure'\n    this.$body.append(scrollDiv)\n    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth\n    this.$body[0].removeChild(scrollDiv)\n    return scrollbarWidth\n  }\n\n\n  // MODAL PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option, _relatedTarget) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.modal')\n      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))\n      if (typeof option == 'string') data[option](_relatedTarget)\n      else if (options.show) data.show(_relatedTarget)\n    })\n  }\n\n  var old = $.fn.modal\n\n  $.fn.modal             = Plugin\n  $.fn.modal.Constructor = Modal\n\n\n  // MODAL NO CONFLICT\n  // =================\n\n  $.fn.modal.noConflict = function () {\n    $.fn.modal = old\n    return this\n  }\n\n\n  // MODAL DATA-API\n  // ==============\n\n  $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\n    var $this   = $(this)\n    var href    = $this.attr('href')\n    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\\s]+$)/, ''))) // strip for ie7\n    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())\n\n    if ($this.is('a')) e.preventDefault()\n\n    $target.one('show.bs.modal', function (showEvent) {\n      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown\n      $target.one('hidden.bs.modal', function () {\n        $this.is(':visible') && $this.trigger('focus')\n      })\n    })\n    Plugin.call($target, option, this)\n  })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: tooltip.js v3.3.5\n * http://getbootstrap.com/javascript/#tooltip\n * Inspired by the original jQuery.tipsy by Jason Frame\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // TOOLTIP PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Tooltip = function (element, options) {\n    this.type       = null\n    this.options    = null\n    this.enabled    = null\n    this.timeout    = null\n    this.hoverState = null\n    this.$element   = null\n    this.inState    = null\n\n    this.init('tooltip', element, options)\n  }\n\n  Tooltip.VERSION  = '3.3.5'\n\n  Tooltip.TRANSITION_DURATION = 150\n\n  Tooltip.DEFAULTS = {\n    animation: true,\n    placement: 'top',\n    selector: false,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    container: false,\n    viewport: {\n      selector: 'body',\n      padding: 0\n    }\n  }\n\n  Tooltip.prototype.init = function (type, element, options) {\n    this.enabled   = true\n    this.type      = type\n    this.$element  = $(element)\n    this.options   = this.getOptions(options)\n    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))\n    this.inState   = { click: false, hover: false, focus: false }\n\n    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\n      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\n    }\n\n    var triggers = this.options.trigger.split(' ')\n\n    for (var i = triggers.length; i--;) {\n      var trigger = triggers[i]\n\n      if (trigger == 'click') {\n        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))\n      } else if (trigger != 'manual') {\n        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'\n        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'\n\n        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))\n        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))\n      }\n    }\n\n    this.options.selector ?\n      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :\n      this.fixTitle()\n  }\n\n  Tooltip.prototype.getDefaults = function () {\n    return Tooltip.DEFAULTS\n  }\n\n  Tooltip.prototype.getOptions = function (options) {\n    options = $.extend({}, this.getDefaults(), this.$element.data(), options)\n\n    if (options.delay && typeof options.delay == 'number') {\n      options.delay = {\n        show: options.delay,\n        hide: options.delay\n      }\n    }\n\n    return options\n  }\n\n  Tooltip.prototype.getDelegateOptions = function () {\n    var options  = {}\n    var defaults = this.getDefaults()\n\n    this._options && $.each(this._options, function (key, value) {\n      if (defaults[key] != value) options[key] = value\n    })\n\n    return options\n  }\n\n  Tooltip.prototype.enter = function (obj) {\n    var self = obj instanceof this.constructor ?\n      obj : $(obj.currentTarget).data('bs.' + this.type)\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n      $(obj.currentTarget).data('bs.' + this.type, self)\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true\n    }\n\n    if (self.tip().hasClass('in') || self.hoverState == 'in') {\n      self.hoverState = 'in'\n      return\n    }\n\n    clearTimeout(self.timeout)\n\n    self.hoverState = 'in'\n\n    if (!self.options.delay || !self.options.delay.show) return self.show()\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'in') self.show()\n    }, self.options.delay.show)\n  }\n\n  Tooltip.prototype.isInStateTrue = function () {\n    for (var key in this.inState) {\n      if (this.inState[key]) return true\n    }\n\n    return false\n  }\n\n  Tooltip.prototype.leave = function (obj) {\n    var self = obj instanceof this.constructor ?\n      obj : $(obj.currentTarget).data('bs.' + this.type)\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n      $(obj.currentTarget).data('bs.' + this.type, self)\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false\n    }\n\n    if (self.isInStateTrue()) return\n\n    clearTimeout(self.timeout)\n\n    self.hoverState = 'out'\n\n    if (!self.options.delay || !self.options.delay.hide) return self.hide()\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'out') self.hide()\n    }, self.options.delay.hide)\n  }\n\n  Tooltip.prototype.show = function () {\n    var e = $.Event('show.bs.' + this.type)\n\n    if (this.hasContent() && this.enabled) {\n      this.$element.trigger(e)\n\n      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])\n      if (e.isDefaultPrevented() || !inDom) return\n      var that = this\n\n      var $tip = this.tip()\n\n      var tipId = this.getUID(this.type)\n\n      this.setContent()\n      $tip.attr('id', tipId)\n      this.$element.attr('aria-describedby', tipId)\n\n      if (this.options.animation) $tip.addClass('fade')\n\n      var placement = typeof this.options.placement == 'function' ?\n        this.options.placement.call(this, $tip[0], this.$element[0]) :\n        this.options.placement\n\n      var autoToken = /\\s?auto?\\s?/i\n      var autoPlace = autoToken.test(placement)\n      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'\n\n      $tip\n        .detach()\n        .css({ top: 0, left: 0, display: 'block' })\n        .addClass(placement)\n        .data('bs.' + this.type, this)\n\n      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)\n      this.$element.trigger('inserted.bs.' + this.type)\n\n      var pos          = this.getPosition()\n      var actualWidth  = $tip[0].offsetWidth\n      var actualHeight = $tip[0].offsetHeight\n\n      if (autoPlace) {\n        var orgPlacement = placement\n        var viewportDim = this.getPosition(this.$viewport)\n\n        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :\n                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :\n                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :\n                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :\n                    placement\n\n        $tip\n          .removeClass(orgPlacement)\n          .addClass(placement)\n      }\n\n      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\n\n      this.applyPlacement(calculatedOffset, placement)\n\n      var complete = function () {\n        var prevHoverState = that.hoverState\n        that.$element.trigger('shown.bs.' + that.type)\n        that.hoverState = null\n\n        if (prevHoverState == 'out') that.leave(that)\n      }\n\n      $.support.transition && this.$tip.hasClass('fade') ?\n        $tip\n          .one('bsTransitionEnd', complete)\n          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n        complete()\n    }\n  }\n\n  Tooltip.prototype.applyPlacement = function (offset, placement) {\n    var $tip   = this.tip()\n    var width  = $tip[0].offsetWidth\n    var height = $tip[0].offsetHeight\n\n    // manually read margins because getBoundingClientRect includes difference\n    var marginTop = parseInt($tip.css('margin-top'), 10)\n    var marginLeft = parseInt($tip.css('margin-left'), 10)\n\n    // we must check for NaN for ie 8/9\n    if (isNaN(marginTop))  marginTop  = 0\n    if (isNaN(marginLeft)) marginLeft = 0\n\n    offset.top  += marginTop\n    offset.left += marginLeft\n\n    // $.fn.offset doesn't round pixel values\n    // so we use setOffset directly with our own function B-0\n    $.offset.setOffset($tip[0], $.extend({\n      using: function (props) {\n        $tip.css({\n          top: Math.round(props.top),\n          left: Math.round(props.left)\n        })\n      }\n    }, offset), 0)\n\n    $tip.addClass('in')\n\n    // check to see if placing tip in new offset caused the tip to resize itself\n    var actualWidth  = $tip[0].offsetWidth\n    var actualHeight = $tip[0].offsetHeight\n\n    if (placement == 'top' && actualHeight != height) {\n      offset.top = offset.top + height - actualHeight\n    }\n\n    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)\n\n    if (delta.left) offset.left += delta.left\n    else offset.top += delta.top\n\n    var isVertical          = /top|bottom/.test(placement)\n    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight\n    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'\n\n    $tip.offset(offset)\n    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)\n  }\n\n  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\n    this.arrow()\n      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n      .css(isVertical ? 'top' : 'left', '')\n  }\n\n  Tooltip.prototype.setContent = function () {\n    var $tip  = this.tip()\n    var title = this.getTitle()\n\n    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)\n    $tip.removeClass('fade in top bottom left right')\n  }\n\n  Tooltip.prototype.hide = function (callback) {\n    var that = this\n    var $tip = $(this.$tip)\n    var e    = $.Event('hide.bs.' + this.type)\n\n    function complete() {\n      if (that.hoverState != 'in') $tip.detach()\n      that.$element\n        .removeAttr('aria-describedby')\n        .trigger('hidden.bs.' + that.type)\n      callback && callback()\n    }\n\n    this.$element.trigger(e)\n\n    if (e.isDefaultPrevented()) return\n\n    $tip.removeClass('in')\n\n    $.support.transition && $tip.hasClass('fade') ?\n      $tip\n        .one('bsTransitionEnd', complete)\n        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n      complete()\n\n    this.hoverState = null\n\n    return this\n  }\n\n  Tooltip.prototype.fixTitle = function () {\n    var $e = this.$element\n    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\n      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')\n    }\n  }\n\n  Tooltip.prototype.hasContent = function () {\n    return this.getTitle()\n  }\n\n  Tooltip.prototype.getPosition = function ($element) {\n    $element   = $element || this.$element\n\n    var el     = $element[0]\n    var isBody = el.tagName == 'BODY'\n\n    var elRect    = el.getBoundingClientRect()\n    if (elRect.width == null) {\n      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })\n    }\n    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()\n    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }\n    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null\n\n    return $.extend({}, elRect, scroll, outerDims, elOffset)\n  }\n\n  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\n    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :\n        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }\n\n  }\n\n  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\n    var delta = { top: 0, left: 0 }\n    if (!this.$viewport) return delta\n\n    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0\n    var viewportDimensions = this.getPosition(this.$viewport)\n\n    if (/right|left/.test(placement)) {\n      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll\n      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight\n      if (topEdgeOffset < viewportDimensions.top) { // top overflow\n        delta.top = viewportDimensions.top - topEdgeOffset\n      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset\n      }\n    } else {\n      var leftEdgeOffset  = pos.left - viewportPadding\n      var rightEdgeOffset = pos.left + viewportPadding + actualWidth\n      if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n        delta.left = viewportDimensions.left - leftEdgeOffset\n      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset\n      }\n    }\n\n    return delta\n  }\n\n  Tooltip.prototype.getTitle = function () {\n    var title\n    var $e = this.$element\n    var o  = this.options\n\n    title = $e.attr('data-original-title')\n      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)\n\n    return title\n  }\n\n  Tooltip.prototype.getUID = function (prefix) {\n    do prefix += ~~(Math.random() * 1000000)\n    while (document.getElementById(prefix))\n    return prefix\n  }\n\n  Tooltip.prototype.tip = function () {\n    if (!this.$tip) {\n      this.$tip = $(this.options.template)\n      if (this.$tip.length != 1) {\n        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')\n      }\n    }\n    return this.$tip\n  }\n\n  Tooltip.prototype.arrow = function () {\n    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))\n  }\n\n  Tooltip.prototype.enable = function () {\n    this.enabled = true\n  }\n\n  Tooltip.prototype.disable = function () {\n    this.enabled = false\n  }\n\n  Tooltip.prototype.toggleEnabled = function () {\n    this.enabled = !this.enabled\n  }\n\n  Tooltip.prototype.toggle = function (e) {\n    var self = this\n    if (e) {\n      self = $(e.currentTarget).data('bs.' + this.type)\n      if (!self) {\n        self = new this.constructor(e.currentTarget, this.getDelegateOptions())\n        $(e.currentTarget).data('bs.' + this.type, self)\n      }\n    }\n\n    if (e) {\n      self.inState.click = !self.inState.click\n      if (self.isInStateTrue()) self.enter(self)\n      else self.leave(self)\n    } else {\n      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)\n    }\n  }\n\n  Tooltip.prototype.destroy = function () {\n    var that = this\n    clearTimeout(this.timeout)\n    this.hide(function () {\n      that.$element.off('.' + that.type).removeData('bs.' + that.type)\n      if (that.$tip) {\n        that.$tip.detach()\n      }\n      that.$tip = null\n      that.$arrow = null\n      that.$viewport = null\n    })\n  }\n\n\n  // TOOLTIP PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.tooltip')\n      var options = typeof option == 'object' && option\n\n      if (!data && /destroy|hide/.test(option)) return\n      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.tooltip\n\n  $.fn.tooltip             = Plugin\n  $.fn.tooltip.Constructor = Tooltip\n\n\n  // TOOLTIP NO CONFLICT\n  // ===================\n\n  $.fn.tooltip.noConflict = function () {\n    $.fn.tooltip = old\n    return this\n  }\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: popover.js v3.3.5\n * http://getbootstrap.com/javascript/#popovers\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // POPOVER PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Popover = function (element, options) {\n    this.init('popover', element, options)\n  }\n\n  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')\n\n  Popover.VERSION  = '3.3.5'\n\n  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\n  })\n\n\n  // NOTE: POPOVER EXTENDS tooltip.js\n  // ================================\n\n  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)\n\n  Popover.prototype.constructor = Popover\n\n  Popover.prototype.getDefaults = function () {\n    return Popover.DEFAULTS\n  }\n\n  Popover.prototype.setContent = function () {\n    var $tip    = this.tip()\n    var title   = this.getTitle()\n    var content = this.getContent()\n\n    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)\n    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events\n      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'\n    ](content)\n\n    $tip.removeClass('fade top bottom left right in')\n\n    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\n    // this manually by checking the contents.\n    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()\n  }\n\n  Popover.prototype.hasContent = function () {\n    return this.getTitle() || this.getContent()\n  }\n\n  Popover.prototype.getContent = function () {\n    var $e = this.$element\n    var o  = this.options\n\n    return $e.attr('data-content')\n      || (typeof o.content == 'function' ?\n            o.content.call($e[0]) :\n            o.content)\n  }\n\n  Popover.prototype.arrow = function () {\n    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))\n  }\n\n\n  // POPOVER PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.popover')\n      var options = typeof option == 'object' && option\n\n      if (!data && /destroy|hide/.test(option)) return\n      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.popover\n\n  $.fn.popover             = Plugin\n  $.fn.popover.Constructor = Popover\n\n\n  // POPOVER NO CONFLICT\n  // ===================\n\n  $.fn.popover.noConflict = function () {\n    $.fn.popover = old\n    return this\n  }\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: carousel.js v3.3.5\n * http://getbootstrap.com/javascript/#carousel\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // CAROUSEL CLASS DEFINITION\n  // =========================\n\n  var Carousel = function (element, options) {\n    this.$element    = $(element)\n    this.$indicators = this.$element.find('.carousel-indicators')\n    this.options     = options\n    this.paused      = null\n    this.sliding     = null\n    this.interval    = null\n    this.$active     = null\n    this.$items      = null\n\n    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))\n\n    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element\n      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))\n      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))\n  }\n\n  Carousel.VERSION  = '3.3.5'\n\n  Carousel.TRANSITION_DURATION = 600\n\n  Carousel.DEFAULTS = {\n    interval: 5000,\n    pause: 'hover',\n    wrap: true,\n    keyboard: true\n  }\n\n  Carousel.prototype.keydown = function (e) {\n    if (/input|textarea/i.test(e.target.tagName)) return\n    switch (e.which) {\n      case 37: this.prev(); break\n      case 39: this.next(); break\n      default: return\n    }\n\n    e.preventDefault()\n  }\n\n  Carousel.prototype.cycle = function (e) {\n    e || (this.paused = false)\n\n    this.interval && clearInterval(this.interval)\n\n    this.options.interval\n      && !this.paused\n      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))\n\n    return this\n  }\n\n  Carousel.prototype.getItemIndex = function (item) {\n    this.$items = item.parent().children('.item')\n    return this.$items.index(item || this.$active)\n  }\n\n  Carousel.prototype.getItemForDirection = function (direction, active) {\n    var activeIndex = this.getItemIndex(active)\n    var willWrap = (direction == 'prev' && activeIndex === 0)\n                || (direction == 'next' && activeIndex == (this.$items.length - 1))\n    if (willWrap && !this.options.wrap) return active\n    var delta = direction == 'prev' ? -1 : 1\n    var itemIndex = (activeIndex + delta) % this.$items.length\n    return this.$items.eq(itemIndex)\n  }\n\n  Carousel.prototype.to = function (pos) {\n    var that        = this\n    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))\n\n    if (pos > (this.$items.length - 1) || pos < 0) return\n\n    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, \"slid\"\n    if (activeIndex == pos) return this.pause().cycle()\n\n    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))\n  }\n\n  Carousel.prototype.pause = function (e) {\n    e || (this.paused = true)\n\n    if (this.$element.find('.next, .prev').length && $.support.transition) {\n      this.$element.trigger($.support.transition.end)\n      this.cycle(true)\n    }\n\n    this.interval = clearInterval(this.interval)\n\n    return this\n  }\n\n  Carousel.prototype.next = function () {\n    if (this.sliding) return\n    return this.slide('next')\n  }\n\n  Carousel.prototype.prev = function () {\n    if (this.sliding) return\n    return this.slide('prev')\n  }\n\n  Carousel.prototype.slide = function (type, next) {\n    var $active   = this.$element.find('.item.active')\n    var $next     = next || this.getItemForDirection(type, $active)\n    var isCycling = this.interval\n    var direction = type == 'next' ? 'left' : 'right'\n    var that      = this\n\n    if ($next.hasClass('active')) return (this.sliding = false)\n\n    var relatedTarget = $next[0]\n    var slideEvent = $.Event('slide.bs.carousel', {\n      relatedTarget: relatedTarget,\n      direction: direction\n    })\n    this.$element.trigger(slideEvent)\n    if (slideEvent.isDefaultPrevented()) return\n\n    this.sliding = true\n\n    isCycling && this.pause()\n\n    if (this.$indicators.length) {\n      this.$indicators.find('.active').removeClass('active')\n      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])\n      $nextIndicator && $nextIndicator.addClass('active')\n    }\n\n    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, \"slid\"\n    if ($.support.transition && this.$element.hasClass('slide')) {\n      $next.addClass(type)\n      $next[0].offsetWidth // force reflow\n      $active.addClass(direction)\n      $next.addClass(direction)\n      $active\n        .one('bsTransitionEnd', function () {\n          $next.removeClass([type, direction].join(' ')).addClass('active')\n          $active.removeClass(['active', direction].join(' '))\n          that.sliding = false\n          setTimeout(function () {\n            that.$element.trigger(slidEvent)\n          }, 0)\n        })\n        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)\n    } else {\n      $active.removeClass('active')\n      $next.addClass('active')\n      this.sliding = false\n      this.$element.trigger(slidEvent)\n    }\n\n    isCycling && this.cycle()\n\n    return this\n  }\n\n\n  // CAROUSEL PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.carousel')\n      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)\n      var action  = typeof option == 'string' ? option : options.slide\n\n      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))\n      if (typeof option == 'number') data.to(option)\n      else if (action) data[action]()\n      else if (options.interval) data.pause().cycle()\n    })\n  }\n\n  var old = $.fn.carousel\n\n  $.fn.carousel             = Plugin\n  $.fn.carousel.Constructor = Carousel\n\n\n  // CAROUSEL NO CONFLICT\n  // ====================\n\n  $.fn.carousel.noConflict = function () {\n    $.fn.carousel = old\n    return this\n  }\n\n\n  // CAROUSEL DATA-API\n  // =================\n\n  var clickHandler = function (e) {\n    var href\n    var $this   = $(this)\n    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')) // strip for ie7\n    if (!$target.hasClass('carousel')) return\n    var options = $.extend({}, $target.data(), $this.data())\n    var slideIndex = $this.attr('data-slide-to')\n    if (slideIndex) options.interval = false\n\n    Plugin.call($target, options)\n\n    if (slideIndex) {\n      $target.data('bs.carousel').to(slideIndex)\n    }\n\n    e.preventDefault()\n  }\n\n  $(document)\n    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)\n    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)\n\n  $(window).on('load', function () {\n    $('[data-ride=\"carousel\"]').each(function () {\n      var $carousel = $(this)\n      Plugin.call($carousel, $carousel.data())\n    })\n  })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: affix.js v3.3.5\n * http://getbootstrap.com/javascript/#affix\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // AFFIX CLASS DEFINITION\n  // ======================\n\n  var Affix = function (element, options) {\n    this.options = $.extend({}, Affix.DEFAULTS, options)\n\n    this.$target = $(this.options.target)\n      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))\n      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))\n\n    this.$element     = $(element)\n    this.affixed      = null\n    this.unpin        = null\n    this.pinnedOffset = null\n\n    this.checkPosition()\n  }\n\n  Affix.VERSION  = '3.3.5'\n\n  Affix.RESET    = 'affix affix-top affix-bottom'\n\n  Affix.DEFAULTS = {\n    offset: 0,\n    target: window\n  }\n\n  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {\n    var scrollTop    = this.$target.scrollTop()\n    var position     = this.$element.offset()\n    var targetHeight = this.$target.height()\n\n    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false\n\n    if (this.affixed == 'bottom') {\n      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'\n      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'\n    }\n\n    var initializing   = this.affixed == null\n    var colliderTop    = initializing ? scrollTop : position.top\n    var colliderHeight = initializing ? targetHeight : height\n\n    if (offsetTop != null && scrollTop <= offsetTop) return 'top'\n    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'\n\n    return false\n  }\n\n  Affix.prototype.getPinnedOffset = function () {\n    if (this.pinnedOffset) return this.pinnedOffset\n    this.$element.removeClass(Affix.RESET).addClass('affix')\n    var scrollTop = this.$target.scrollTop()\n    var position  = this.$element.offset()\n    return (this.pinnedOffset = position.top - scrollTop)\n  }\n\n  Affix.prototype.checkPositionWithEventLoop = function () {\n    setTimeout($.proxy(this.checkPosition, this), 1)\n  }\n\n  Affix.prototype.checkPosition = function () {\n    if (!this.$element.is(':visible')) return\n\n    var height       = this.$element.height()\n    var offset       = this.options.offset\n    var offsetTop    = offset.top\n    var offsetBottom = offset.bottom\n    var scrollHeight = Math.max($(document).height(), $(document.body).height())\n\n    if (typeof offset != 'object')         offsetBottom = offsetTop = offset\n    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)\n    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)\n\n    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)\n\n    if (this.affixed != affix) {\n      if (this.unpin != null) this.$element.css('top', '')\n\n      var affixType = 'affix' + (affix ? '-' + affix : '')\n      var e         = $.Event(affixType + '.bs.affix')\n\n      this.$element.trigger(e)\n\n      if (e.isDefaultPrevented()) return\n\n      this.affixed = affix\n      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null\n\n      this.$element\n        .removeClass(Affix.RESET)\n        .addClass(affixType)\n        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')\n    }\n\n    if (affix == 'bottom') {\n      this.$element.offset({\n        top: scrollHeight - height - offsetBottom\n      })\n    }\n  }\n\n\n  // AFFIX PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.affix')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.affix\n\n  $.fn.affix             = Plugin\n  $.fn.affix.Constructor = Affix\n\n\n  // AFFIX NO CONFLICT\n  // =================\n\n  $.fn.affix.noConflict = function () {\n    $.fn.affix = old\n    return this\n  }\n\n\n  // AFFIX DATA-API\n  // ==============\n\n  $(window).on('load', function () {\n    $('[data-spy=\"affix\"]').each(function () {\n      var $spy = $(this)\n      var data = $spy.data()\n\n      data.offset = data.offset || {}\n\n      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom\n      if (data.offsetTop    != null) data.offset.top    = data.offsetTop\n\n      Plugin.call($spy, data)\n    })\n  })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: alert.js v3.3.5\n * http://getbootstrap.com/javascript/#alerts\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // ALERT CLASS DEFINITION\n  // ======================\n\n  var dismiss = '[data-dismiss=\"alert\"]'\n  var Alert   = function (el) {\n    $(el).on('click', dismiss, this.close)\n  }\n\n  Alert.VERSION = '3.3.5'\n\n  Alert.TRANSITION_DURATION = 150\n\n  Alert.prototype.close = function (e) {\n    var $this    = $(this)\n    var selector = $this.attr('data-target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    var $parent = $(selector)\n\n    if (e) e.preventDefault()\n\n    if (!$parent.length) {\n      $parent = $this.closest('.alert')\n    }\n\n    $parent.trigger(e = $.Event('close.bs.alert'))\n\n    if (e.isDefaultPrevented()) return\n\n    $parent.removeClass('in')\n\n    function removeElement() {\n      // detach from parent, fire event then clean up data\n      $parent.detach().trigger('closed.bs.alert').remove()\n    }\n\n    $.support.transition && $parent.hasClass('fade') ?\n      $parent\n        .one('bsTransitionEnd', removeElement)\n        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :\n      removeElement()\n  }\n\n\n  // ALERT PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.alert')\n\n      if (!data) $this.data('bs.alert', (data = new Alert(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  var old = $.fn.alert\n\n  $.fn.alert             = Plugin\n  $.fn.alert.Constructor = Alert\n\n\n  // ALERT NO CONFLICT\n  // =================\n\n  $.fn.alert.noConflict = function () {\n    $.fn.alert = old\n    return this\n  }\n\n\n  // ALERT DATA-API\n  // ==============\n\n  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: button.js v3.3.5\n * http://getbootstrap.com/javascript/#buttons\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // BUTTON PUBLIC CLASS DEFINITION\n  // ==============================\n\n  var Button = function (element, options) {\n    this.$element  = $(element)\n    this.options   = $.extend({}, Button.DEFAULTS, options)\n    this.isLoading = false\n  }\n\n  Button.VERSION  = '3.3.5'\n\n  Button.DEFAULTS = {\n    loadingText: 'loading...'\n  }\n\n  Button.prototype.setState = function (state) {\n    var d    = 'disabled'\n    var $el  = this.$element\n    var val  = $el.is('input') ? 'val' : 'html'\n    var data = $el.data()\n\n    state += 'Text'\n\n    if (data.resetText == null) $el.data('resetText', $el[val]())\n\n    // push to event loop to allow forms to submit\n    setTimeout($.proxy(function () {\n      $el[val](data[state] == null ? this.options[state] : data[state])\n\n      if (state == 'loadingText') {\n        this.isLoading = true\n        $el.addClass(d).attr(d, d)\n      } else if (this.isLoading) {\n        this.isLoading = false\n        $el.removeClass(d).removeAttr(d)\n      }\n    }, this), 0)\n  }\n\n  Button.prototype.toggle = function () {\n    var changed = true\n    var $parent = this.$element.closest('[data-toggle=\"buttons\"]')\n\n    if ($parent.length) {\n      var $input = this.$element.find('input')\n      if ($input.prop('type') == 'radio') {\n        if ($input.prop('checked')) changed = false\n        $parent.find('.active').removeClass('active')\n        this.$element.addClass('active')\n      } else if ($input.prop('type') == 'checkbox') {\n        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false\n        this.$element.toggleClass('active')\n      }\n      $input.prop('checked', this.$element.hasClass('active'))\n      if (changed) $input.trigger('change')\n    } else {\n      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))\n      this.$element.toggleClass('active')\n    }\n  }\n\n\n  // BUTTON PLUGIN DEFINITION\n  // ========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.button')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.button', (data = new Button(this, options)))\n\n      if (option == 'toggle') data.toggle()\n      else if (option) data.setState(option)\n    })\n  }\n\n  var old = $.fn.button\n\n  $.fn.button             = Plugin\n  $.fn.button.Constructor = Button\n\n\n  // BUTTON NO CONFLICT\n  // ==================\n\n  $.fn.button.noConflict = function () {\n    $.fn.button = old\n    return this\n  }\n\n\n  // BUTTON DATA-API\n  // ===============\n\n  $(document)\n    .on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      var $btn = $(e.target)\n      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')\n      Plugin.call($btn, 'toggle')\n      if (!($(e.target).is('input[type=\"radio\"]') || $(e.target).is('input[type=\"checkbox\"]'))) e.preventDefault()\n    })\n    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))\n    })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: scrollspy.js v3.3.5\n * http://getbootstrap.com/javascript/#scrollspy\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  function ScrollSpy(element, options) {\n    this.$body          = $(document.body)\n    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)\n    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)\n    this.selector       = (this.options.target || '') + ' .nav li > a'\n    this.offsets        = []\n    this.targets        = []\n    this.activeTarget   = null\n    this.scrollHeight   = 0\n\n    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))\n    this.refresh()\n    this.process()\n  }\n\n  ScrollSpy.VERSION  = '3.3.5'\n\n  ScrollSpy.DEFAULTS = {\n    offset: 10\n  }\n\n  ScrollSpy.prototype.getScrollHeight = function () {\n    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n  }\n\n  ScrollSpy.prototype.refresh = function () {\n    var that          = this\n    var offsetMethod  = 'offset'\n    var offsetBase    = 0\n\n    this.offsets      = []\n    this.targets      = []\n    this.scrollHeight = this.getScrollHeight()\n\n    if (!$.isWindow(this.$scrollElement[0])) {\n      offsetMethod = 'position'\n      offsetBase   = this.$scrollElement.scrollTop()\n    }\n\n    this.$body\n      .find(this.selector)\n      .map(function () {\n        var $el   = $(this)\n        var href  = $el.data('target') || $el.attr('href')\n        var $href = /^#./.test(href) && $(href)\n\n        return ($href\n          && $href.length\n          && $href.is(':visible')\n          && [[$href[offsetMethod]().top + offsetBase, href]]) || null\n      })\n      .sort(function (a, b) { return a[0] - b[0] })\n      .each(function () {\n        that.offsets.push(this[0])\n        that.targets.push(this[1])\n      })\n  }\n\n  ScrollSpy.prototype.process = function () {\n    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n    var scrollHeight = this.getScrollHeight()\n    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\n    var offsets      = this.offsets\n    var targets      = this.targets\n    var activeTarget = this.activeTarget\n    var i\n\n    if (this.scrollHeight != scrollHeight) {\n      this.refresh()\n    }\n\n    if (scrollTop >= maxScroll) {\n      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\n    }\n\n    if (activeTarget && scrollTop < offsets[0]) {\n      this.activeTarget = null\n      return this.clear()\n    }\n\n    for (i = offsets.length; i--;) {\n      activeTarget != targets[i]\n        && scrollTop >= offsets[i]\n        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\n        && this.activate(targets[i])\n    }\n  }\n\n  ScrollSpy.prototype.activate = function (target) {\n    this.activeTarget = target\n\n    this.clear()\n\n    var selector = this.selector +\n      '[data-target=\"' + target + '\"],' +\n      this.selector + '[href=\"' + target + '\"]'\n\n    var active = $(selector)\n      .parents('li')\n      .addClass('active')\n\n    if (active.parent('.dropdown-menu').length) {\n      active = active\n        .closest('li.dropdown')\n        .addClass('active')\n    }\n\n    active.trigger('activate.bs.scrollspy')\n  }\n\n  ScrollSpy.prototype.clear = function () {\n    $(this.selector)\n      .parentsUntil(this.options.target, '.active')\n      .removeClass('active')\n  }\n\n\n  // SCROLLSPY PLUGIN DEFINITION\n  // ===========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.scrollspy')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.scrollspy\n\n  $.fn.scrollspy             = Plugin\n  $.fn.scrollspy.Constructor = ScrollSpy\n\n\n  // SCROLLSPY NO CONFLICT\n  // =====================\n\n  $.fn.scrollspy.noConflict = function () {\n    $.fn.scrollspy = old\n    return this\n  }\n\n\n  // SCROLLSPY DATA-API\n  // ==================\n\n  $(window).on('load.bs.scrollspy.data-api', function () {\n    $('[data-spy=\"scroll\"]').each(function () {\n      var $spy = $(this)\n      Plugin.call($spy, $spy.data())\n    })\n  })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: tab.js v3.3.5\n * http://getbootstrap.com/javascript/#tabs\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // TAB CLASS DEFINITION\n  // ====================\n\n  var Tab = function (element) {\n    // jscs:disable requireDollarBeforejQueryAssignment\n    this.element = $(element)\n    // jscs:enable requireDollarBeforejQueryAssignment\n  }\n\n  Tab.VERSION = '3.3.5'\n\n  Tab.TRANSITION_DURATION = 150\n\n  Tab.prototype.show = function () {\n    var $this    = this.element\n    var $ul      = $this.closest('ul:not(.dropdown-menu)')\n    var selector = $this.data('target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    if ($this.parent('li').hasClass('active')) return\n\n    var $previous = $ul.find('.active:last a')\n    var hideEvent = $.Event('hide.bs.tab', {\n      relatedTarget: $this[0]\n    })\n    var showEvent = $.Event('show.bs.tab', {\n      relatedTarget: $previous[0]\n    })\n\n    $previous.trigger(hideEvent)\n    $this.trigger(showEvent)\n\n    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return\n\n    var $target = $(selector)\n\n    this.activate($this.closest('li'), $ul)\n    this.activate($target, $target.parent(), function () {\n      $previous.trigger({\n        type: 'hidden.bs.tab',\n        relatedTarget: $this[0]\n      })\n      $this.trigger({\n        type: 'shown.bs.tab',\n        relatedTarget: $previous[0]\n      })\n    })\n  }\n\n  Tab.prototype.activate = function (element, container, callback) {\n    var $active    = container.find('> .active')\n    var transition = callback\n      && $.support.transition\n      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)\n\n    function next() {\n      $active\n        .removeClass('active')\n        .find('> .dropdown-menu > .active')\n          .removeClass('active')\n        .end()\n        .find('[data-toggle=\"tab\"]')\n          .attr('aria-expanded', false)\n\n      element\n        .addClass('active')\n        .find('[data-toggle=\"tab\"]')\n          .attr('aria-expanded', true)\n\n      if (transition) {\n        element[0].offsetWidth // reflow for transition\n        element.addClass('in')\n      } else {\n        element.removeClass('fade')\n      }\n\n      if (element.parent('.dropdown-menu').length) {\n        element\n          .closest('li.dropdown')\n            .addClass('active')\n          .end()\n          .find('[data-toggle=\"tab\"]')\n            .attr('aria-expanded', true)\n      }\n\n      callback && callback()\n    }\n\n    $active.length && transition ?\n      $active\n        .one('bsTransitionEnd', next)\n        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :\n      next()\n\n    $active.removeClass('in')\n  }\n\n\n  // TAB PLUGIN DEFINITION\n  // =====================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.tab')\n\n      if (!data) $this.data('bs.tab', (data = new Tab(this)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.tab\n\n  $.fn.tab             = Plugin\n  $.fn.tab.Constructor = Tab\n\n\n  // TAB NO CONFLICT\n  // ===============\n\n  $.fn.tab.noConflict = function () {\n    $.fn.tab = old\n    return this\n  }\n\n\n  // TAB DATA-API\n  // ============\n\n  var clickHandler = function (e) {\n    e.preventDefault()\n    Plugin.call($(this), 'show')\n  }\n\n  $(document)\n    .on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler)\n    .on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler)\n\n}(jQuery);\n"]}}]